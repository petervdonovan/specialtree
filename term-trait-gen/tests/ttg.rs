/// generated by [term_trait_gen::generate]
#[rustfmt::skip]
pub mod term_trait {
    use tymetafuncspec_core::IdxBoxHeapBak;
    use tymetafuncspec_core::BoundedNat;
    use crate::term_trait::owned as tto;
    use crate::term_trait::words as ttw;
    use term::SuperHeap;
    use term::MapsTmf;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNatHeapBak;
    use tymetafuncspec_core::SetHeapBak;
    /// generated by [term_trait_gen::heap_trait]
    #[rustfmt::skip]
    pub trait Heap: Sized + MapsTmf<
            ttw::L,
            Set<Self, Self::Nat>,
        > + MapsTmf<
            ttw::L,
            BoundedNat<Self>,
        > + MapsTmf<
            ttw::L,
            IdxBox<Self, Self::F>,
        > + MapsTmf<
            ttw::L,
            IdxBox<Self, Self::Plus>,
        > + MapsTmf<
            ttw::L,
            IdxBox<Self, Self::Sum>,
        > + SuperHeap<
            SetHeapBak<Self, Self::Nat>,
        > + SuperHeap<
            BoundedNatHeapBak<Self>,
        > + SuperHeap<
            IdxBoxHeapBak<Self, Self::F>,
        > + SuperHeap<
            IdxBoxHeapBak<Self, Self::Plus>,
        > + SuperHeap<IdxBoxHeapBak<Self, Self::Sum>> {
        type Plus: tto::Plus<Heap = Self>;
        type LeftOperand: tto::LeftOperand<Heap = Self>;
        type RightOperand: tto::RightOperand<Heap = Self>;
        type F: tto::F<Heap = Self>;
        type Sum: tto::Sum<Heap = Self>;
        type Nat: tto::Nat<Heap = Self>;
    }
    /// generated by [term_trait_gen::owned::generate]
    #[rustfmt::skip]
    pub mod owned {
        use tymetafuncspec_core::IdxBox;
        use term::Heaped;
        use tymetafuncspec_core::Set;
        use tymetafuncspec_core::BoundedNat;
        use crate::term_trait as tt;
        use crate::term_trait::words as ttw;
        use term::MapsTmf;
        use term::CanonicallyConstructibleFrom;
        pub trait Plus: Heaped + CanonicallyConstructibleFrom<
                <Self as Heaped>::Heap,
                (
                    <<Self as Heaped>::Heap as tt::Heap>::LeftOperand,
                    (<<Self as Heaped>::Heap as tt::Heap>::RightOperand, ()),
                ),
            >
        where
            <Self as Heaped>::Heap: tt::Heap,
        {}
        pub trait LeftOperand: Heaped + CanonicallyConstructibleFrom<
                <Self as Heaped>::Heap,
                (<<Self as Heaped>::Heap as tt::Heap>::Nat, ()),
            >
        where
            <Self as Heaped>::Heap: tt::Heap,
        {}
        pub trait RightOperand: Heaped + CanonicallyConstructibleFrom<
                <Self as Heaped>::Heap,
                (<<Self as Heaped>::Heap as tt::Heap>::Nat, ()),
            >
        where
            <Self as Heaped>::Heap: tt::Heap,
        {}
        pub trait F: Heaped + CanonicallyConstructibleFrom<
                <Self as Heaped>::Heap,
                (<<Self as Heaped>::Heap as tt::Heap>::Nat, ()),
            >
        where
            <Self as Heaped>::Heap: tt::Heap,
        {}
        pub trait Sum: Heaped + CanonicallyConstructibleFrom<
                <Self as Heaped>::Heap,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        ttw::L,
                        Set<
                            <Self as Heaped>::Heap,
                            <<Self as Heaped>::Heap as tt::Heap>::Nat,
                        >,
                    >>::Tmf,
                    (),
                ),
            >
        where
            <Self as Heaped>::Heap: tt::Heap,
        {}
        pub trait Nat: Heaped + CanonicallyConstructibleFrom<
                <Self as Heaped>::Heap,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        ttw::L,
                        BoundedNat<<Self as Heaped>::Heap>,
                    >>::Tmf,
                    (),
                ),
            > + CanonicallyConstructibleFrom<
                <Self as Heaped>::Heap,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        ttw::L,
                        IdxBox<
                            <Self as Heaped>::Heap,
                            <<Self as Heaped>::Heap as tt::Heap>::F,
                        >,
                    >>::Tmf,
                    (),
                ),
            > + CanonicallyConstructibleFrom<
                <Self as Heaped>::Heap,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        ttw::L,
                        IdxBox<
                            <Self as Heaped>::Heap,
                            <<Self as Heaped>::Heap as tt::Heap>::Plus,
                        >,
                    >>::Tmf,
                    (),
                ),
            > + CanonicallyConstructibleFrom<
                <Self as Heaped>::Heap,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        ttw::L,
                        IdxBox<
                            <Self as Heaped>::Heap,
                            <<Self as Heaped>::Heap as tt::Heap>::Sum,
                        >,
                    >>::Tmf,
                    (),
                ),
            >
        where
            <Self as Heaped>::Heap: tt::Heap,
        {}
    }
    /// generated by [words::words_mod]
    #[rustfmt::skip]
    pub mod words {
        pub struct L;
        pub mod sorts {
            pub struct Plus;
            pub struct LeftOperand;
            pub struct RightOperand;
            pub struct F;
            pub struct Sum;
            pub struct Nat;
        }
    }
}
