/// generated by [term_trait_gen::generate]
pub mod extension_of {
    /// generated by [term_trait_gen::heap_trait]
    pub trait Heap {
        type Plus: crate::extension_of::owned::Plus<Heap = Self>;
        type LeftOperand: crate::extension_of::owned::LeftOperand<Heap = Self>;
        type RightOperand: crate::extension_of::owned::RightOperand<Heap = Self>;
        type F: crate::extension_of::owned::F<Heap = Self>;
        type Sum: crate::extension_of::owned::Sum<Heap = Self>;
        type Nat: crate::extension_of::owned::Nat<Heap = Self>;
    }
    /// generated by [term_trait_gen::owned::generate]
    mod owned {
        pub trait Plus:
            term::Heaped
            + term::CanonicallyConstructibleFrom<(
                <<Self as term::Heaped>::Heap as crate::extension_of::Heap>::LeftOperand,
                <<Self as term::Heaped>::Heap as crate::extension_of::Heap>::RightOperand,
            )>
        where
            <Self as term::Heaped>::Heap: crate::extension_of::Heap,
        {
        }
        pub trait LeftOperand:
            term::Heaped
            + term::CanonicallyConstructibleFrom<(
                <<Self as term::Heaped>::Heap as crate::extension_of::Heap>::Nat,
            )>
        where
            <Self as term::Heaped>::Heap: crate::extension_of::Heap,
        {
        }
        pub trait RightOperand:
            term::Heaped
            + term::CanonicallyConstructibleFrom<(
                <<Self as term::Heaped>::Heap as crate::extension_of::Heap>::Nat,
            )>
        where
            <Self as term::Heaped>::Heap: crate::extension_of::Heap,
        {
        }
        pub trait F:
            term::Heaped
            + term::CanonicallyConstructibleFrom<(
                <<Self as term::Heaped>::Heap as crate::extension_of::Heap>::Nat,
            )> where
            <Self as term::Heaped>::Heap: crate::extension_of::Heap,
        {
        }
        pub trait Sum:
            term::Heaped
            + term::CanonicallyConstructibleFrom<(
                tymetafuncspec_core::Set<
                    <Self as term::Heaped>::Heap,
                    <<Self as term::Heaped>::Heap as crate::extension_of::Heap>::Nat,
                >,
            )>
        where
            <Self as term::Heaped>::Heap: crate::extension_of::Heap,
        {
        }
        pub trait Nat:
            term::Heaped
            + term::CanonicallyConstructibleFrom<(
                tymetafuncspec_core::BoundedNat<<Self as term::Heaped>::Heap>,
            )> + term::CanonicallyConstructibleFrom<(
                tymetafuncspec_core::IdxBox<
                    <Self as term::Heaped>::Heap,
                    <<Self as term::Heaped>::Heap as crate::extension_of::Heap>::F,
                >,
            )> + term::CanonicallyConstructibleFrom<(
                tymetafuncspec_core::IdxBox<
                    <Self as term::Heaped>::Heap,
                    <<Self as term::Heaped>::Heap as crate::extension_of::Heap>::Plus,
                >,
            )>
        where
            <Self as term::Heaped>::Heap: crate::extension_of::Heap,
        {
        }
    }
    /// generated by [term_trait_gen::reference::generate]
    mod reference {
        pub trait Plus<'a, 'heap: 'a, Heap: crate::extension_of::Heap>:
            term::Heaped<Heap = Heap>
            + term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::LeftOperand,
                term::ExpansionMaybeConversionFallibility,
            > + term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::RightOperand,
                term::ExpansionMaybeConversionFallibility,
            >
        {
            type LeftOperand: term::Heaped<Heap = Heap>;
            type RightOperand: term::Heaped<Heap = Heap>;
        }
        pub trait LeftOperand<'a, 'heap: 'a, Heap: crate::extension_of::Heap>:
            term::Heaped<Heap = Heap>
            + term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::Nat,
                term::ExpansionMaybeConversionFallibility,
            >
        {
            type Nat: term::Heaped<Heap = Heap>;
        }
        pub trait RightOperand<'a, 'heap: 'a, Heap: crate::extension_of::Heap>:
            term::Heaped<Heap = Heap>
            + term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::Nat,
                term::ExpansionMaybeConversionFallibility,
            >
        {
            type Nat: term::Heaped<Heap = Heap>;
        }
        pub trait F<'a, 'heap: 'a, Heap: crate::extension_of::Heap>:
            term::Heaped<Heap = Heap>
            + term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::Nat,
                term::ExpansionMaybeConversionFallibility,
            >
        {
            type Nat: term::Heaped<Heap = Heap>;
        }
        pub trait Sum<'a, 'heap: 'a, Heap: crate::extension_of::Heap>:
            term::Heaped<Heap = Heap>
            + term::CanonicallyMaybeConvertibleTo<
                'heap,
                tymetafuncspec_core::Set<Heap, Self::Nat>,
                term::ExpansionMaybeConversionFallibility,
            >
        {
            type Nat: term::Heaped<Heap = Heap>;
        }
        pub trait Nat<'a, 'heap: 'a, Heap: crate::extension_of::Heap>:
            term::Heaped<Heap = Heap>
            + term::CanonicallyMaybeConvertibleTo<
                'heap,
                tymetafuncspec_core::BoundedNat<Heap>,
                term::ExpansionMaybeConversionFallibility,
            > + term::CanonicallyMaybeConvertibleTo<
                'heap,
                tymetafuncspec_core::IdxBox<Heap, Self::F>,
                term::ExpansionMaybeConversionFallibility,
            > + term::CanonicallyMaybeConvertibleTo<
                'heap,
                tymetafuncspec_core::IdxBox<Heap, Self::Plus>,
                term::ExpansionMaybeConversionFallibility,
            >
        {
            type F: term::Heaped<Heap = Heap>;
            type Plus: term::Heaped<Heap = Heap>;
        }
    }
}
