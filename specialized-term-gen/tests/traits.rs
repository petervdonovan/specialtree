/// generated by [specialized_term_gen::generate]
pub mod extension_of {
    /// generated by [specialized_term_gen::heap_trait]
    pub trait Heap {
        type NatLit: crate::extension_of::owned::NatLit<Heap = Self>;
        type Plus: crate::extension_of::owned::Plus<Heap = Self>;
        type LeftOperand: crate::extension_of::owned::LeftOperand<Heap = Self>;
        type RightOperand: crate::extension_of::owned::RightOperand<Heap = Self>;
        type F: crate::extension_of::owned::F<Heap = Self>;
        type Sum: crate::extension_of::owned::Sum<Heap = Self>;
        type Nat: crate::extension_of::owned::Nat<Heap = Self>;
    }
    /// generated by [specialized_term_gen::owned::generate]
    mod owned {
        pub trait NatLit: specialized_term::Heaped
        where
            <Self as specialized_term::Heaped>::Heap: crate::extension_of::Heap,
        {}
        pub trait Plus: specialized_term::Heaped + specialized_term::CanonicallyConstructibleFrom<
                (
                    <<Self as specialized_term::Heaped>::Heap as crate::extension_of::Heap>::LeftOperand,
                    <<Self as specialized_term::Heaped>::Heap as crate::extension_of::Heap>::RightOperand,
                ),
            >
        where
            <Self as specialized_term::Heaped>::Heap: crate::extension_of::Heap,
        {}
        pub trait LeftOperand: specialized_term::Heaped + specialized_term::CanonicallyConstructibleFrom<
                (
                    <<Self as specialized_term::Heaped>::Heap as crate::extension_of::Heap>::Nat,
                ),
            >
        where
            <Self as specialized_term::Heaped>::Heap: crate::extension_of::Heap,
        {}
        pub trait RightOperand: specialized_term::Heaped + specialized_term::CanonicallyConstructibleFrom<
                (
                    <<Self as specialized_term::Heaped>::Heap as crate::extension_of::Heap>::Nat,
                ),
            >
        where
            <Self as specialized_term::Heaped>::Heap: crate::extension_of::Heap,
        {}
        pub trait F: specialized_term::Heaped + specialized_term::CanonicallyConstructibleFrom<
                (
                    <<Self as specialized_term::Heaped>::Heap as crate::extension_of::Heap>::Nat,
                ),
            >
        where
            <Self as specialized_term::Heaped>::Heap: crate::extension_of::Heap,
        {}
        pub trait Sum: specialized_term::Heaped + specialized_term::CanonicallyConstructibleFrom<
                (
                    <<Self as specialized_term::Heaped>::Heap as crate::extension_of::Heap>::SetOf<
                        Nat,
                    >,
                ),
            >
        where
            <Self as specialized_term::Heaped>::Heap: crate::extension_of::Heap,
        {}
        pub trait Nat: specialized_term::Heaped + specialized_term::CanonicallyConstructibleFrom<
                (
                    <<Self as specialized_term::Heaped>::Heap as crate::extension_of::Heap>::NatLit,
                ),
            > + specialized_term::CanonicallyConstructibleFrom<
                (
                    <<Self as specialized_term::Heaped>::Heap as crate::extension_of::Heap>::F,
                ),
            > + specialized_term::CanonicallyConstructibleFrom<
                (
                    <<Self as specialized_term::Heaped>::Heap as crate::extension_of::Heap>::Plus,
                ),
            >
        where
            <Self as specialized_term::Heaped>::Heap: crate::extension_of::Heap,
        {}
    }
    /// generated by [specialized_term_gen::reference::generate]
    mod reference {
        pub trait NatLit<
            'a,
            'heap: 'a,
            Heap: crate::extension_of::Heap,
        >: specialized_term::Heaped<Heap = Heap> {}
        pub trait Plus<
            'a,
            'heap: 'a,
            Heap: crate::extension_of::Heap,
        >: specialized_term::Heaped<
                Heap = Heap,
            > + specialized_term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::LeftOperand,
                specialized_term::ExpansionMaybeConversionFallibility,
            > + specialized_term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::RightOperand,
                specialized_term::ExpansionMaybeConversionFallibility,
            > {
            type LeftOperand: specialized_term::Heaped<Heap = Heap>;
            type RightOperand: specialized_term::Heaped<Heap = Heap>;
        }
        pub trait LeftOperand<
            'a,
            'heap: 'a,
            Heap: crate::extension_of::Heap,
        >: specialized_term::Heaped<
                Heap = Heap,
            > + specialized_term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::Nat,
                specialized_term::ExpansionMaybeConversionFallibility,
            > {
            type Nat: specialized_term::Heaped<Heap = Heap>;
        }
        pub trait RightOperand<
            'a,
            'heap: 'a,
            Heap: crate::extension_of::Heap,
        >: specialized_term::Heaped<
                Heap = Heap,
            > + specialized_term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::Nat,
                specialized_term::ExpansionMaybeConversionFallibility,
            > {
            type Nat: specialized_term::Heaped<Heap = Heap>;
        }
        pub trait F<
            'a,
            'heap: 'a,
            Heap: crate::extension_of::Heap,
        >: specialized_term::Heaped<
                Heap = Heap,
            > + specialized_term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::Nat,
                specialized_term::ExpansionMaybeConversionFallibility,
            > {
            type Nat: specialized_term::Heaped<Heap = Heap>;
        }
        pub trait Sum<
            'a,
            'heap: 'a,
            Heap: crate::extension_of::Heap,
        >: specialized_term::Heaped<
                Heap = Heap,
            > + specialized_term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::SetOf<Nat>,
                specialized_term::ExpansionMaybeConversionFallibility,
            > {
            type SetOf<Nat>: specialized_term::Heaped<Heap = Heap>;
        }
        pub trait Nat<
            'a,
            'heap: 'a,
            Heap: crate::extension_of::Heap,
        >: specialized_term::Heaped<
                Heap = Heap,
            > + specialized_term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::NatLit,
                specialized_term::ExpansionMaybeConversionFallibility,
            > + specialized_term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::F,
                specialized_term::ExpansionMaybeConversionFallibility,
            > + specialized_term::CanonicallyMaybeConvertibleTo<
                'heap,
                Self::Plus,
                specialized_term::ExpansionMaybeConversionFallibility,
            > {
            type NatLit: specialized_term::Heaped<Heap = Heap>;
            type F: specialized_term::Heaped<Heap = Heap>;
            type Plus: specialized_term::Heaped<Heap = Heap>;
        }
    }
    mod mut_reference {}
}
