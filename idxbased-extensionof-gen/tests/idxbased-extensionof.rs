/// generated by [idxbased_extensionof_gen::gen]
pub mod idxbased_extension_of {
    /// generated by [idxbased_extensionof_gen::limpl]
    impl crate::extension_of::LImpl for crate::data_structure::idxbased::Fib {
        type NatLit = crate::data_structure::idxbased::NatLit;
        type Plus = crate::data_structure::idxbased::Plus;
        type F = crate::data_structure::idxbased::F;
        type Nat = crate::data_structure::idxbased::Nat;
    }
    /// generated by [idxbased_extensionof_gen::owned::gen]
    pub mod owned {
        impl crate::extension_of::owned::NatLit
        for crate::data_structure::idxbased::NatLit {
            type LImpl = crate::data_structure::idxbased::Fib;
        }
        impl std::convert::From<u64> for crate::data_structure::idxbased::NatLit {
            fn from(x: u64) -> Self {
                Self(x)
            }
        }
        impl std::convert::From<crate::data_structure::idxbased::NatLit> for u64 {
            fn from(x: crate::data_structure::idxbased::NatLit) -> Self {
                x.0
            }
        }
        /// generated by [idxbased_extensionof_gen::owned::gen_prods]
        impl crate::extension_of::owned::Plus for crate::data_structure::idxbased::Plus {
            type LImpl = crate::data_structure::idxbased::Fib;
            fn new(
                l: &mut Self::LImpl,
                args: (
                    <Self::LImpl as crate::extension_of::LImpl>::Nat,
                    <Self::LImpl as crate::extension_of::LImpl>::Nat,
                ),
            ) -> Self {
                let data = crate::data_structure::idxbased::data::Plus(args.0, args.1);
                let ret = l.plus.len();
                l.plus.push(data);
                Self(ret)
            }
            fn get_ref<'a, 'b: 'a>(
                &'a self,
                _l: &'b Self::LImpl,
            ) -> impl crate::extension_of::reference::Plus<'a, LImpl = Self::LImpl> {
                *self
            }
            fn get_mut<'a, 'b: 'a>(
                &'a mut self,
                _l: &'b mut Self::LImpl,
            ) -> impl crate::extension_of::mut_reference::Plus<'a, LImpl = Self::LImpl> {
                *self
            }
        }
        /// generated by [idxbased_extensionof_gen::owned::gen_prods]
        impl crate::extension_of::owned::F for crate::data_structure::idxbased::F {
            type LImpl = crate::data_structure::idxbased::Fib;
            fn new(
                l: &mut Self::LImpl,
                args: (<Self::LImpl as crate::extension_of::LImpl>::Nat,),
            ) -> Self {
                let data = crate::data_structure::idxbased::data::F(args.0);
                let ret = l.f.len();
                l.f.push(data);
                Self(ret)
            }
            fn get_ref<'a, 'b: 'a>(
                &'a self,
                _l: &'b Self::LImpl,
            ) -> impl crate::extension_of::reference::F<'a, LImpl = Self::LImpl> {
                *self
            }
            fn get_mut<'a, 'b: 'a>(
                &'a mut self,
                _l: &'b mut Self::LImpl,
            ) -> impl crate::extension_of::mut_reference::F<'a, LImpl = Self::LImpl> {
                *self
            }
        }
        /// generated by [idxbased_extensionof_gen::owned::gen_sums]
        impl crate::extension_of::owned::Nat for crate::data_structure::idxbased::Nat {
            type LImpl = crate::data_structure::idxbased::Fib;
            fn nat_lit(
                l: &mut Self::LImpl,
                from: <Self::LImpl as crate::extension_of::LImpl>::NatLit,
            ) -> Self {
                let data = crate::data_structure::idxbased::data::Nat::NatLit(from);
                let ret = l.nat.len();
                l.nat.push(data);
                Self(ret)
            }
            fn f(
                l: &mut Self::LImpl,
                from: <Self::LImpl as crate::extension_of::LImpl>::F,
            ) -> Self {
                let data = crate::data_structure::idxbased::data::Nat::F(from);
                let ret = l.nat.len();
                l.nat.push(data);
                Self(ret)
            }
            fn plus(
                l: &mut Self::LImpl,
                from: <Self::LImpl as crate::extension_of::LImpl>::Plus,
            ) -> Self {
                let data = crate::data_structure::idxbased::data::Nat::Plus(from);
                let ret = l.nat.len();
                l.nat.push(data);
                Self(ret)
            }
            fn get_ref(
                &self,
                _l: &Self::LImpl,
            ) -> impl crate::extension_of::reference::Nat<'_, LImpl = Self::LImpl> {
                *self
            }
            fn get_mut(
                &mut self,
                _l: &mut Self::LImpl,
            ) -> impl crate::extension_of::mut_reference::Nat<'_, LImpl = Self::LImpl> {
                *self
            }
        }
    }
    /// generated by [idxbased_extensionof_gen::reference::gen]
    pub mod reference {
        impl<'a> crate::extension_of::reference::NatLit<'a>
        for crate::data_structure::idxbased::NatLit {
            type LImpl = crate::data_structure::idxbased::Fib;
            fn is_eq<'b: 'a>(self, _l: &'b Self::LImpl, other: Self) -> bool {
                self.0 == other.0
            }
        }
        /// generated by [idxbased_extensionof_gen::reference::gen_prods]
        impl<'a> crate::extension_of::reference::Plus<'a>
        for crate::data_structure::idxbased::Plus {
            type LImpl = crate::data_structure::idxbased::Fib;
            type T0 = crate::data_structure::idxbased::Nat;
            type T1 = crate::data_structure::idxbased::Nat;
            fn is_eq<'b: 'a>(self, l: &'b Self::LImpl, other: Self) -> bool {
                use crate::extension_of::reference::Nat;
                let mut ret = true;
                {
                    let mine = <Self as crate::extension_of::Projection<
                        Self::LImpl,
                        0,
                    >>::project(self, l);
                    let their_data = <Self as crate::extension_of::Projection<
                        Self::LImpl,
                        0,
                    >>::project(other, l);
                    ret = ret && mine.is_eq(l, their_data);
                }
                {
                    let mine = <Self as crate::extension_of::Projection<
                        Self::LImpl,
                        1,
                    >>::project(self, l);
                    let their_data = <Self as crate::extension_of::Projection<
                        Self::LImpl,
                        1,
                    >>::project(other, l);
                    ret = ret && mine.is_eq(l, their_data);
                }
                ret
            }
        }
        /// generated by [idxbased_extensionof_gen::reference::gen_prods]
        impl<'a> crate::extension_of::reference::F<'a>
        for crate::data_structure::idxbased::F {
            type LImpl = crate::data_structure::idxbased::Fib;
            type T0 = crate::data_structure::idxbased::Nat;
            fn is_eq<'b: 'a>(self, l: &'b Self::LImpl, other: Self) -> bool {
                use crate::extension_of::reference::Nat;
                let mut ret = true;
                {
                    let mine = <Self as crate::extension_of::Projection<
                        Self::LImpl,
                        0,
                    >>::project(self, l);
                    let their_data = <Self as crate::extension_of::Projection<
                        Self::LImpl,
                        0,
                    >>::project(other, l);
                    ret = ret && mine.is_eq(l, their_data);
                }
                ret
            }
        }
        impl crate::extension_of::Projection<crate::data_structure::idxbased::Fib, 0>
        for crate::data_structure::idxbased::Plus {
            type To = crate::data_structure::idxbased::Nat;
            fn project(self, l: &crate::data_structure::idxbased::Fib) -> Self::To {
                let my_data = &l.plus[self.0];
                my_data.0
            }
        }
        impl crate::extension_of::Projection<crate::data_structure::idxbased::Fib, 1>
        for crate::data_structure::idxbased::Plus {
            type To = crate::data_structure::idxbased::Nat;
            fn project(self, l: &crate::data_structure::idxbased::Fib) -> Self::To {
                let my_data = &l.plus[self.0];
                my_data.1
            }
        }
        impl crate::extension_of::Projection<crate::data_structure::idxbased::Fib, 0>
        for crate::data_structure::idxbased::F {
            type To = crate::data_structure::idxbased::Nat;
            fn project(self, l: &crate::data_structure::idxbased::Fib) -> Self::To {
                let my_data = &l.f[self.0];
                my_data.0
            }
        }
        /// generated by [idxbased_extensionof_gen::reference::gen_sums]
        impl<'a> crate::extension_of::reference::Nat<'a>
        for crate::data_structure::idxbased::Nat {
            type LImpl = crate::data_structure::idxbased::Fib;
            type NatLit = crate::data_structure::idxbased::NatLit;
            type F = crate::data_structure::idxbased::F;
            type Plus = crate::data_structure::idxbased::Plus;
            fn nat_lit<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::NatLit> {
                let my_data = &l.nat[self.0];
                match my_data {
                    crate::data_structure::idxbased::data::Nat::NatLit(a) => Some(*a),
                    _ => None,
                }
            }
            fn f<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::F> {
                let my_data = &l.nat[self.0];
                match my_data {
                    crate::data_structure::idxbased::data::Nat::F(a) => Some(*a),
                    _ => None,
                }
            }
            fn plus<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::Plus> {
                let my_data = &l.nat[self.0];
                match my_data {
                    crate::data_structure::idxbased::data::Nat::Plus(a) => Some(*a),
                    _ => None,
                }
            }
            fn is_eq<'b: 'a>(self, l: &'b Self::LImpl, other: Self) -> bool {
                use crate::extension_of::reference::NatLit;
                use crate::extension_of::reference::F;
                use crate::extension_of::reference::Plus;
                match (&l.nat[self.0], &l.nat[other.0]) {
                    (
                        crate::data_structure::idxbased::data::Nat::NatLit(a),
                        crate::data_structure::idxbased::data::Nat::NatLit(b),
                    ) => a.is_eq(l, *b),
                    (
                        crate::data_structure::idxbased::data::Nat::F(a),
                        crate::data_structure::idxbased::data::Nat::F(b),
                    ) => a.is_eq(l, *b),
                    (
                        crate::data_structure::idxbased::data::Nat::Plus(a),
                        crate::data_structure::idxbased::data::Nat::Plus(b),
                    ) => a.is_eq(l, *b),
                    _ => false,
                }
            }
        }
    }
    /// generated by [idxbased_extensionof_gen::mut_reference::gen]
    pub mod mut_reference {
        impl<'a> crate::extension_of::mut_reference::NatLit<'a>
        for crate::data_structure::idxbased::NatLit {}
        /// generated by [idxbased_extensionof_gen::mut_reference::gen_prods]
        impl<'a> crate::extension_of::mut_reference::Plus<'a>
        for crate::data_structure::idxbased::Plus {
            type LImpl = crate::data_structure::idxbased::Fib;
            type T0 = crate::data_structure::idxbased::Nat;
            type T1 = crate::data_structure::idxbased::Nat;
        }
        /// generated by [idxbased_extensionof_gen::mut_reference::gen_prods]
        impl<'a> crate::extension_of::mut_reference::F<'a>
        for crate::data_structure::idxbased::F {
            type LImpl = crate::data_structure::idxbased::Fib;
            type T0 = crate::data_structure::idxbased::Nat;
        }
        /// generated by [idxbased_extensionof_gen::mut_reference::gen_sums]
        impl<'a> crate::extension_of::mut_reference::Nat<'a>
        for crate::data_structure::idxbased::Nat {
            type LImpl = crate::data_structure::idxbased::Fib;
            type Owned = crate::data_structure::idxbased::Nat;
            type NatLit = crate::data_structure::idxbased::NatLit;
            type F = crate::data_structure::idxbased::F;
            type Plus = crate::data_structure::idxbased::Plus;
            fn nat_lit<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::NatLit> {
                let my_data = &l.nat[self.0];
                match my_data {
                    crate::data_structure::idxbased::data::Nat::NatLit(a) => Some(*a),
                    _ => None,
                }
            }
            fn f<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::F> {
                let my_data = &l.nat[self.0];
                match my_data {
                    crate::data_structure::idxbased::data::Nat::F(a) => Some(*a),
                    _ => None,
                }
            }
            fn plus<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::Plus> {
                let my_data = &l.nat[self.0];
                match my_data {
                    crate::data_structure::idxbased::data::Nat::Plus(a) => Some(*a),
                    _ => None,
                }
            }
            fn set<'b: 'a>(self, l: &'b mut Self::LImpl, value: Self::Owned) {
                let their_data = l.nat[value.0];
                let my_data = &mut l.nat[self.0];
                *my_data = their_data;
            }
        }
    }
}
/// generated by [extensionof_gen::gen]
pub mod extension_of {
    /// generated by [extensionof_gen::limpl_trait]
    pub trait LImpl {
        type NatLit: crate::extension_of::owned::NatLit<LImpl = Self>;
        type Plus: crate::extension_of::owned::Plus<LImpl = Self>;
        type F: crate::extension_of::owned::F<LImpl = Self>;
        type Nat: crate::extension_of::owned::Nat<LImpl = Self>;
        fn convert<
            LImpl: crate::extension_of::LImpl<Plus = Plus, F = F, Nat = Nat>,
            NatLit,
            Plus: crate::extension_of::owned::Plus<LImpl = LImpl>,
            F: crate::extension_of::owned::F<LImpl = LImpl>,
            Nat: crate::extension_of::owned::Nat<LImpl = LImpl>,
        >(
            &mut self,
            lo: &LImpl,
            from: crate::extension_of::Any<NatLit, Plus, F, Nat>,
        ) -> crate::extension_of::Any<NatLit, Self::Plus, Self::F, Self::Nat> {
            use crate::extension_of::reference::Plus;
            use crate::extension_of::reference::F;
            use crate::extension_of::reference::Nat;
            match from {
                crate::extension_of::Any::NatLit(nat_lit) => {
                    crate::extension_of::Any::NatLit(nat_lit)
                }
                crate::extension_of::Any::Plus(p) => {
                    crate::extension_of::Any::Plus(p.get_ref(lo).convert(lo, self))
                }
                crate::extension_of::Any::F(p) => {
                    crate::extension_of::Any::F(p.get_ref(lo).convert(lo, self))
                }
                crate::extension_of::Any::Nat(s) => {
                    crate::extension_of::Any::Nat(s.get_ref(lo).convert(lo, self))
                }
            }
        }
    }
    /// generated by [extensionof_gen::any_type]
    pub enum Any<
        NatLit,
        Plus: crate::extension_of::owned::Plus,
        F: crate::extension_of::owned::F,
        Nat: crate::extension_of::owned::Nat,
    > {
        NatLit(NatLit),
        Plus(Plus),
        F(F),
        Nat(Nat),
    }
    pub trait Projection<LImpl, const N: u8> {
        type To;
        fn project(self, l: &LImpl) -> Self::To;
    }
    pub trait ExtensionOf {
        type Any;
        fn take_reduct<L: ExtensionOf>(&self, term: &Self::Any) -> (L, L::Any);
    }
    /// generated by [extensionof_gen::owned::gen]
    pub mod owned {
        pub trait NatLit: From<u64> {
            type LImpl: crate::extension_of::LImpl;
        }
        /// generated by [extensionof_gen::owned::prods]
        pub trait Plus {
            type LImpl: crate::extension_of::LImpl;
            fn new(
                l: &mut Self::LImpl,
                args: (
                    <Self::LImpl as crate::extension_of::LImpl>::Nat,
                    <Self::LImpl as crate::extension_of::LImpl>::Nat,
                ),
            ) -> Self;
            fn get_ref<'a, 'b: 'a>(
                &'a self,
                l: &'b Self::LImpl,
            ) -> impl crate::extension_of::reference::Plus<'a, LImpl = Self::LImpl>;
            fn get_mut<'a, 'b: 'a>(
                &'a mut self,
                l: &'b mut Self::LImpl,
            ) -> impl crate::extension_of::mut_reference::Plus<'a, LImpl = Self::LImpl>;
        }
        /// generated by [extensionof_gen::owned::prods]
        pub trait F {
            type LImpl: crate::extension_of::LImpl;
            fn new(
                l: &mut Self::LImpl,
                args: (<Self::LImpl as crate::extension_of::LImpl>::Nat,),
            ) -> Self;
            fn get_ref<'a, 'b: 'a>(
                &'a self,
                l: &'b Self::LImpl,
            ) -> impl crate::extension_of::reference::F<'a, LImpl = Self::LImpl>;
            fn get_mut<'a, 'b: 'a>(
                &'a mut self,
                l: &'b mut Self::LImpl,
            ) -> impl crate::extension_of::mut_reference::F<'a, LImpl = Self::LImpl>;
        }
        /// generated by [extensionof_gen::owned::sums]
        pub trait Nat {
            type LImpl: crate::extension_of::LImpl;
            fn nat_lit(
                l: &mut Self::LImpl,
                from: <Self::LImpl as crate::extension_of::LImpl>::NatLit,
            ) -> Self;
            fn f(
                l: &mut Self::LImpl,
                from: <Self::LImpl as crate::extension_of::LImpl>::F,
            ) -> Self;
            fn plus(
                l: &mut Self::LImpl,
                from: <Self::LImpl as crate::extension_of::LImpl>::Plus,
            ) -> Self;
            fn get_ref(
                &self,
                l: &Self::LImpl,
            ) -> impl crate::extension_of::reference::Nat<'_, LImpl = Self::LImpl>;
            fn get_mut(
                &mut self,
                l: &mut Self::LImpl,
            ) -> impl crate::extension_of::mut_reference::Nat<'_, LImpl = Self::LImpl>;
        }
    }
    /// generated by [extensionof_gen::reference::gen]
    pub mod reference {
        pub trait NatLit<'a>: Into<u64> {
            type LImpl: crate::extension_of::LImpl;
            fn is_eq<'b: 'a>(self: Self, l: &'b Self::LImpl, other: Self) -> bool;
            fn convert<'b: 'a, 'c, O: crate::extension_of::owned::NatLit>(
                self,
                _l: &'b Self::LImpl,
                _lo: &'c mut O::LImpl,
            ) -> O {
                let intermediate: u64 = self.into();
                O::from(intermediate)
            }
        }
        /// generated by [extensionof_gen::reference::prods]
        pub trait Plus<
            'a,
        >: Copy + 'a + crate::extension_of::Projection<
                Self::LImpl,
                0,
                To = Self::T0,
            > + crate::extension_of::Projection<Self::LImpl, 1, To = Self::T1>
        where
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
        {
            type LImpl: crate::extension_of::LImpl;
            type T0: crate::extension_of::reference::Nat<'a, LImpl = Self::LImpl>;
            type T1: crate::extension_of::reference::Nat<'a, LImpl = Self::LImpl>;
            fn is_eq<'b: 'a>(self, l: &'b Self::LImpl, other: Self) -> bool;
            fn convert<'b: 'a, 'c, O: crate::extension_of::owned::Plus>(
                self,
                l: &'b Self::LImpl,
                lo: &'c mut O::LImpl,
            ) -> O {
                let args = (
                    <Self as crate::extension_of::Projection<
                        Self::LImpl,
                        0,
                    >>::project(self, l)
                        .convert(l, lo),
                    <Self as crate::extension_of::Projection<
                        Self::LImpl,
                        1,
                    >>::project(self, l)
                        .convert(l, lo),
                );
                O::new(lo, args)
            }
        }
        /// generated by [extensionof_gen::reference::prods]
        pub trait F<
            'a,
        >: Copy + 'a + crate::extension_of::Projection<Self::LImpl, 0, To = Self::T0>
        where
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
        {
            type LImpl: crate::extension_of::LImpl;
            type T0: crate::extension_of::reference::Nat<'a, LImpl = Self::LImpl>;
            fn is_eq<'b: 'a>(self, l: &'b Self::LImpl, other: Self) -> bool;
            fn convert<'b: 'a, 'c, O: crate::extension_of::owned::F>(
                self,
                l: &'b Self::LImpl,
                lo: &'c mut O::LImpl,
            ) -> O {
                let args = (
                    <Self as crate::extension_of::Projection<
                        Self::LImpl,
                        0,
                    >>::project(self, l)
                        .convert(l, lo),
                );
                O::new(lo, args)
            }
        }
        /// generated by [extensionof_gen::reference::sums]
        pub trait Nat<'a>: Copy + 'a {
            type LImpl: crate::extension_of::LImpl;
            type NatLit: crate::extension_of::reference::NatLit<'a, LImpl = Self::LImpl>;
            type F: crate::extension_of::reference::F<'a, LImpl = Self::LImpl>;
            type Plus: crate::extension_of::reference::Plus<'a, LImpl = Self::LImpl>;
            fn nat_lit<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::NatLit>;
            fn f<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::F>;
            fn plus<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::Plus>;
            fn is_eq<'b: 'a>(self, l: &'b Self::LImpl, other: Self) -> bool;
            fn convert<'b: 'a, 'c, O: crate::extension_of::owned::Nat>(
                self,
                l: &'b Self::LImpl,
                lo: &'c mut O::LImpl,
            ) -> O {
                if let Some(x) = self.nat_lit(l) {
                    let arg = x.convert(l, lo);
                    return O::nat_lit(lo, arg);
                }
                if let Some(x) = self.f(l) {
                    let arg = x.convert(l, lo);
                    return O::f(lo, arg);
                }
                if let Some(x) = self.plus(l) {
                    let arg = x.convert(l, lo);
                    return O::plus(lo, arg);
                }
                panic!("unreachable");
            }
        }
    }
    pub mod mut_reference {
        pub trait NatLit<'a> {}
        /// generated by [extensionof_gen::mut_reference::prods]
        pub trait Plus<
            'a,
        >: Copy + crate::extension_of::Projection<
                Self::LImpl,
                0,
                To = Self::T0,
            > + crate::extension_of::Projection<Self::LImpl, 1, To = Self::T1>
        where
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
        {
            type LImpl: crate::extension_of::LImpl;
            type T0: crate::extension_of::mut_reference::Nat<'a>;
            type T1: crate::extension_of::mut_reference::Nat<'a>;
        }
        /// generated by [extensionof_gen::mut_reference::prods]
        pub trait F<
            'a,
        >: Copy + crate::extension_of::Projection<Self::LImpl, 0, To = Self::T0>
        where
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
        {
            type LImpl: crate::extension_of::LImpl;
            type T0: crate::extension_of::mut_reference::Nat<'a>;
        }
        /// generated by [extensionof_gen::mut_reference::sums]
        pub trait Nat<'a>: 'a + Copy {
            type LImpl: crate::extension_of::LImpl;
            type Owned: crate::extension_of::owned::Nat;
            type NatLit: crate::extension_of::mut_reference::NatLit<'a>;
            type F: crate::extension_of::mut_reference::F<'a>;
            type Plus: crate::extension_of::mut_reference::Plus<'a>;
            fn nat_lit<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::NatLit>;
            fn f<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::F>;
            fn plus<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::Plus>;
            fn set<'b: 'a>(self, l: &'b mut Self::LImpl, value: Self::Owned);
        }
    }
}
pub mod data_structure {
    /// generated by [langdatastructure_gen::idxbased::gen]
    pub mod idxbased {
        /// generated by [langdatastructure_gen::idxbased::gen_db]
        pub struct Fib {
            pub plus: Vec<crate::data_structure::idxbased::data::Plus>,
            pub f: Vec<crate::data_structure::idxbased::data::F>,
            pub nat: Vec<crate::data_structure::idxbased::data::Nat>,
        }
        pub(crate) mod data {
            #[derive(Clone, Copy)]
            pub struct Plus(
                pub crate::data_structure::idxbased::Nat,
                pub crate::data_structure::idxbased::Nat,
            );
            #[derive(Clone, Copy)]
            pub struct F(pub crate::data_structure::idxbased::Nat);
            #[derive(Clone, Copy)]
            pub enum Nat {
                NatLit(crate::data_structure::idxbased::NatLit),
                F(crate::data_structure::idxbased::F),
                Plus(crate::data_structure::idxbased::Plus),
            }
        }
        #[derive(Clone, Copy)]
        pub struct NatLit(pub u64);
        #[derive(Clone, Copy)]
        pub struct Plus(pub usize);
        #[derive(Clone, Copy)]
        pub struct F(pub usize);
        #[derive(Clone, Copy)]
        pub struct Nat(pub usize);
    }
}
