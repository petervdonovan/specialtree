#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_impl_gen::generate]
use crate::term_specialized_fib as tsf;
/// @generated by [term_specialized_impl_gen::gen_heap_impl]
impl fib::term_trait_fib::Heap for tsf::Heap {
    type Plus = tsf::Plus;
    type LeftOperand = tsf::LeftOperand;
    type RightOperand = tsf::RightOperand;
    type F = tsf::F;
    type Sum = tsf::Sum;
    type Nat = tsf::Nat;
}
/// @generated by [term_specialized_impl_gen::gen_owned_mod]
pub mod owned_impls {
    use crate::term_specialized_fib as tsf;
    impl fib::term_trait_fib::owned::Plus<tsf::Heap> for tsf::Plus {}
    impl fib::term_trait_fib::owned::LeftOperand<tsf::Heap> for tsf::LeftOperand {}
    impl fib::term_trait_fib::owned::RightOperand<tsf::Heap> for tsf::RightOperand {}
    impl fib::term_trait_fib::owned::F<tsf::Heap> for tsf::F {}
    impl fib::term_trait_fib::owned::Sum<tsf::Heap> for tsf::Sum {}
    impl fib::term_trait_fib::owned::Nat<tsf::Heap> for tsf::Nat {}
}
/// @generated by [term_specialized_impl_gen::gen_ccf_mod]
pub mod ccf_impls {
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod plus {
        use term::Heaped;
        use crate::term_specialized_fib as tsf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (tsf::LeftOperand, (tsf::RightOperand, ())),
        > for tsf::Plus {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (tsf::LeftOperand, (tsf::RightOperand, ())),
            ) -> Self {
                crate::term_specialized_fib::Plus {
                    left_operand: t.0,
                    right_operand: t.1.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (tsf::LeftOperand, (tsf::RightOperand, ())) {
                (self.left_operand, (self.right_operand, ()))
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod left_operand {
        use term::Heaped;
        use crate::term_specialized_fib as tsf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (tsf::Nat, ()),
        > for tsf::LeftOperand {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (tsf::Nat, ())) -> Self {
                crate::term_specialized_fib::LeftOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (tsf::Nat, ()) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod right_operand {
        use term::Heaped;
        use crate::term_specialized_fib as tsf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (tsf::Nat, ()),
        > for tsf::RightOperand {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (tsf::Nat, ())) -> Self {
                crate::term_specialized_fib::RightOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (tsf::Nat, ()) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod f {
        use term::Heaped;
        use crate::term_specialized_fib as tsf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (tsf::Nat, ()),
        > for tsf::F {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (tsf::Nat, ())) -> Self {
                crate::term_specialized_fib::F {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (tsf::Nat, ()) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod sum {
        use tymetafuncspec_core::Set;
        use term::MapsTmf;
        use term::Heaped;
        use fib::words_mod_fib::L;
        use crate::term_specialized_fib as tsf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    Set<<Self as Heaped>::Heap, tsf::Nat>,
                >>::Tmf,
                (),
            ),
        > for tsf::Sum {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        Set<<Self as Heaped>::Heap, tsf::Nat>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_fib::Sum {
                    set: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    Set<<Self as Heaped>::Heap, tsf::Nat>,
                >>::Tmf,
                (),
            ) {
                (self.set, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod nat {
        use tymetafuncspec_core::IdxBox;
        use tymetafuncspec_core::BoundedNat;
        use term::MapsTmf;
        use term::Heaped;
        use fib::words_mod_fib::L;
        use crate::term_specialized_fib as tsf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    BoundedNat<<Self as Heaped>::Heap>,
                >>::Tmf,
                (),
            ),
        > for tsf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        BoundedNat<<Self as Heaped>::Heap>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_fib::Nat::NatLit(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_fib::Nat::NatLit(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    BoundedNat<<Self as Heaped>::Heap>,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::term_specialized_fib::Nat::NatLit(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    IdxBox<<Self as Heaped>::Heap, tsf::F>,
                >>::Tmf,
                (),
            ),
        > for tsf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        IdxBox<<Self as Heaped>::Heap, tsf::F>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_fib::Nat::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_fib::Nat::F(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    IdxBox<<Self as Heaped>::Heap, tsf::F>,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::term_specialized_fib::Nat::F(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    IdxBox<<Self as Heaped>::Heap, tsf::Plus>,
                >>::Tmf,
                (),
            ),
        > for tsf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        IdxBox<<Self as Heaped>::Heap, tsf::Plus>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_fib::Nat::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_fib::Nat::Plus(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    IdxBox<<Self as Heaped>::Heap, tsf::Plus>,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::term_specialized_fib::Nat::Plus(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (tsf::Sum, ()),
        > for tsf::Nat {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (tsf::Sum, ())) -> Self {
                crate::term_specialized_fib::Nat::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_fib::Nat::Sum(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (tsf::Sum, ()) {
                match self {
                    crate::term_specialized_fib::Nat::Sum(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
}
/// @generated by [term_specialized_impl_gen::gen_transitive_ccf_mod]
pub mod transitive_ccf {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::BoundedNat;
    use crate::term_specialized_fib as tsf;
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, tsf::Nat>
    for tsf::LeftOperand {
        type Intermediary = tsf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, tsf::Nat>
    for tsf::RightOperand {
        type Intermediary = tsf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, tsf::Nat> for tsf::F {
        type Intermediary = tsf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, Set<tsf::Heap, tsf::Nat>>
    for tsf::Sum {
        type Intermediary = Set<tsf::Heap, tsf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, tsf::Plus> for tsf::Nat {
        type Intermediary = IdxBox<tsf::Heap, tsf::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, tsf::F> for tsf::Nat {
        type Intermediary = IdxBox<tsf::Heap, tsf::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, tsf::Sum> for tsf::Nat {
        type Intermediary = tsf::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, BoundedNat<tsf::Heap>>
    for tsf::Nat {
        type Intermediary = BoundedNat<tsf::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, tsf::Plus>
    for IdxBox<tsf::Heap, tsf::Plus> {
        type Intermediary = tsf::Plus;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, tsf::F>
    for IdxBox<tsf::Heap, tsf::F> {
        type Intermediary = tsf::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsf::Heap, tsf::Nat>
    for IdxBox<tsf::Heap, tsf::F> {
        type Intermediary = tsf::F;
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsf::Heap,
        (tsf::LeftOperand, (tsf::RightOperand, ())),
    > for tsf::Plus {
        type Intermediary = tsf::Plus;
        type Intermediaries = (tsf::LeftOperand, (tsf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsf::Heap,
        (tsf::LeftOperand, (tsf::RightOperand, ())),
    > for tsf::Nat {
        type Intermediary = tsf::Plus;
        type Intermediaries = (tsf::LeftOperand, (tsf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsf::Heap,
        (tsf::LeftOperand, (tsf::Nat, ())),
    > for tsf::Plus {
        type Intermediary = tsf::Plus;
        type Intermediaries = (tsf::LeftOperand, (tsf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsf::Heap,
        (tsf::Nat, (tsf::RightOperand, ())),
    > for tsf::Plus {
        type Intermediary = tsf::Plus;
        type Intermediaries = (tsf::LeftOperand, (tsf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<tsf::Heap, (tsf::Nat, (tsf::Nat, ()))>
    for tsf::Plus {
        type Intermediary = tsf::Plus;
        type Intermediaries = (tsf::LeftOperand, (tsf::RightOperand, ()));
    }
}
/// @generated by [term_specialized_impl_gen::gen_ccf_auto_impls]
pub mod ccf_auto_impls {
    term::auto_impl_ccf!(
        crate ::term_specialized_fib::Heap, crate ::term_specialized_fib::Plus
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_fib::Heap, crate ::term_specialized_fib::LeftOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_fib::Heap, crate ::term_specialized_fib::RightOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_fib::Heap, crate ::term_specialized_fib::F
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_fib::Heap, crate ::term_specialized_fib::Sum
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_fib::Heap, crate ::term_specialized_fib::Nat
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_fib::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_fib::Heap, crate ::term_specialized_fib::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_fib::Heap, tymetafuncspec_core::BoundedNat < crate
        ::term_specialized_fib::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_fib::Heap, tymetafuncspec_core::IdxBox < crate
        ::term_specialized_fib::Heap, crate ::term_specialized_fib::F, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_fib::Heap, tymetafuncspec_core::IdxBox < crate
        ::term_specialized_fib::Heap, crate ::term_specialized_fib::Plus, >
    );
}
/// @generated by [term_specialized_impl_gen::gen_maps_tmf]
pub mod maps_tmf_impls {
    use fib::words_mod_fib::L;
    use crate::term_specialized_fib as tsf;
    use ccf::CanonicallyConstructibleFrom;
    impl<TmfMonomorphization> term::MapsTmf<L, TmfMonomorphization> for tsf::Heap
    where
        TmfMonomorphization: CanonicallyConstructibleFrom<
            Self,
            (TmfMonomorphization, ()),
        >,
    {
        type Tmf = TmfMonomorphization;
    }
}
