#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [words::words_impls]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::IdxBox;
use tymetafuncspec_core::BoundedNat;
use crate::l_words_mod_r_l_autoboxed_fib_r as lwmrlafr;
use crate::l_words_mod_r_l_autoboxed_fib_r::sorts as lwmrlafrs;
use crate::l_term_specialized_r_l_autoboxed_fib_r as ltsrlafr;
impl words::Implements<ltsrlafr::Heap, lwmrlafr::L> for ltsrlafr::F {
    type LWord = lwmrlafrs::F;
}
impl words::Implements<ltsrlafr::Heap, lwmrlafr::L> for ltsrlafr::Left_operand {
    type LWord = lwmrlafrs::Left_operand;
}
impl words::Implements<ltsrlafr::Heap, lwmrlafr::L> for ltsrlafr::Plus {
    type LWord = lwmrlafrs::Plus;
}
impl words::Implements<ltsrlafr::Heap, lwmrlafr::L> for ltsrlafr::Right_operand {
    type LWord = lwmrlafrs::Right_operand;
}
impl words::Implements<ltsrlafr::Heap, lwmrlafr::L> for ltsrlafr::Sum {
    type LWord = lwmrlafrs::Sum;
}
impl words::Implements<ltsrlafr::Heap, lwmrlafr::L> for ltsrlafr::Nat {
    type LWord = lwmrlafrs::Nat;
}
impl words::Implements<ltsrlafr::Heap, lwmrlafr::L>
for Set<ltsrlafr::Heap, ltsrlafr::Nat> {
    type LWord = Set<(), lwmrlafrs::Nat>;
}
impl words::Implements<ltsrlafr::Heap, lwmrlafr::L> for BoundedNat<ltsrlafr::Heap> {
    type LWord = BoundedNat<()>;
}
impl words::Implements<ltsrlafr::Heap, lwmrlafr::L>
for IdxBox<ltsrlafr::Heap, ltsrlafr::F> {
    type LWord = IdxBox<(), lwmrlafrs::F>;
}
impl words::Implements<ltsrlafr::Heap, lwmrlafr::L>
for IdxBox<ltsrlafr::Heap, ltsrlafr::Plus> {
    type LWord = IdxBox<(), lwmrlafrs::Plus>;
}
