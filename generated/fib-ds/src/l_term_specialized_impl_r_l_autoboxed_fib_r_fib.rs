#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_impl_gen::generate]
/// @generated by [term_specialized_impl_gen::gen_ccf_mod]
pub mod ccf_impls {
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod f {
        use words::InverseImplements;
        use term::Heaped;
        use crate::l_words_mod_r_l_autoboxed_fib_r as lwmrlafr;
        use crate::l_words_mod_r_l_autoboxed_fib_r::sorts as lwmrlafrs;
        use crate::l_term_specialized_r_l_autoboxed_fib_r as ltsrlafr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    lwmrlafrs::Nat,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlafr::F {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        lwmrlafrs::Nat,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_fib_r::F {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    lwmrlafrs::Nat,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod left_operand {
        use words::InverseImplements;
        use term::Heaped;
        use crate::l_words_mod_r_l_autoboxed_fib_r as lwmrlafr;
        use crate::l_words_mod_r_l_autoboxed_fib_r::sorts as lwmrlafrs;
        use crate::l_term_specialized_r_l_autoboxed_fib_r as ltsrlafr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    lwmrlafrs::Nat,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlafr::Left_operand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        lwmrlafrs::Nat,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_fib_r::Left_operand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    lwmrlafrs::Nat,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod plus {
        use words::InverseImplements;
        use term::Heaped;
        use crate::l_words_mod_r_l_autoboxed_fib_r as lwmrlafr;
        use crate::l_words_mod_r_l_autoboxed_fib_r::sorts as lwmrlafrs;
        use crate::l_term_specialized_r_l_autoboxed_fib_r as ltsrlafr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    lwmrlafrs::Left_operand,
                >>::StructuralImplementor,
                (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        lwmrlafrs::Right_operand,
                    >>::StructuralImplementor,
                    (),
                ),
            ),
        > for ltsrlafr::Plus {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        lwmrlafrs::Left_operand,
                    >>::StructuralImplementor,
                    (
                        <<Self as Heaped>::Heap as InverseImplements<
                            lwmrlafr::L,
                            lwmrlafrs::Right_operand,
                        >>::StructuralImplementor,
                        (),
                    ),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_fib_r::Plus {
                    left_operand: t.0,
                    right_operand: t.1.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    lwmrlafrs::Left_operand,
                >>::StructuralImplementor,
                (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        lwmrlafrs::Right_operand,
                    >>::StructuralImplementor,
                    (),
                ),
            ) {
                (self.left_operand, (self.right_operand, ()))
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod right_operand {
        use words::InverseImplements;
        use term::Heaped;
        use crate::l_words_mod_r_l_autoboxed_fib_r as lwmrlafr;
        use crate::l_words_mod_r_l_autoboxed_fib_r::sorts as lwmrlafrs;
        use crate::l_term_specialized_r_l_autoboxed_fib_r as ltsrlafr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    lwmrlafrs::Nat,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlafr::Right_operand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        lwmrlafrs::Nat,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_fib_r::Right_operand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    lwmrlafrs::Nat,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod sum {
        use words::InverseImplements;
        use tymetafuncspec_core::Set;
        use term::Heaped;
        use crate::l_words_mod_r_l_autoboxed_fib_r as lwmrlafr;
        use crate::l_words_mod_r_l_autoboxed_fib_r::sorts as lwmrlafrs;
        use crate::l_term_specialized_r_l_autoboxed_fib_r as ltsrlafr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    Set<(), lwmrlafrs::Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlafr::Sum {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        Set<(), lwmrlafrs::Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_fib_r::Sum {
                    set: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    Set<(), lwmrlafrs::Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.set, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod nat {
        use words::InverseImplements;
        use tymetafuncspec_core::IdxBox;
        use tymetafuncspec_core::BoundedNat;
        use term::Heaped;
        use crate::l_words_mod_r_l_autoboxed_fib_r as lwmrlafr;
        use crate::l_words_mod_r_l_autoboxed_fib_r::sorts as lwmrlafrs;
        use crate::l_term_specialized_r_l_autoboxed_fib_r as ltsrlafr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    BoundedNat<()>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlafr::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        BoundedNat<()>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::NatLit(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::NatLit(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    BoundedNat<()>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::NatLit(t) => {
                        (t, ())
                    }
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    IdxBox<(), lwmrlafrs::F>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlafr::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        IdxBox<(), lwmrlafrs::F>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::F(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    IdxBox<(), lwmrlafrs::F>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::F(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    IdxBox<(), lwmrlafrs::Plus>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlafr::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        IdxBox<(), lwmrlafrs::Plus>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::Plus(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    IdxBox<(), lwmrlafrs::Plus>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::Plus(t) => {
                        (t, ())
                    }
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    lwmrlafrs::Sum,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlafr::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlafr::L,
                        lwmrlafrs::Sum,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::Sum(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlafr::L,
                    lwmrlafrs::Sum,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_fib_r::Nat::Sum(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
}
/// @generated by [term_specialized_impl_gen::gen_transitive_ccf_mod]
pub mod transitive_ccf {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::BoundedNat;
    use crate::l_term_specialized_r_l_autoboxed_fib_r as ltsrlafr;
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlafr::Heap, ltsrlafr::Nat>
    for ltsrlafr::F {
        type Intermediary = ltsrlafr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlafr::Heap, ltsrlafr::Nat>
    for ltsrlafr::Left_operand {
        type Intermediary = ltsrlafr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlafr::Heap, ltsrlafr::Nat>
    for ltsrlafr::Right_operand {
        type Intermediary = ltsrlafr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlafr::Heap,
        Set<ltsrlafr::Heap, ltsrlafr::Nat>,
    > for ltsrlafr::Sum {
        type Intermediary = Set<ltsrlafr::Heap, ltsrlafr::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlafr::Heap, ltsrlafr::F>
    for ltsrlafr::Nat {
        type Intermediary = IdxBox<ltsrlafr::Heap, ltsrlafr::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlafr::Heap, ltsrlafr::Plus>
    for ltsrlafr::Nat {
        type Intermediary = IdxBox<ltsrlafr::Heap, ltsrlafr::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlafr::Heap, ltsrlafr::Sum>
    for ltsrlafr::Nat {
        type Intermediary = ltsrlafr::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlafr::Heap,
        BoundedNat<ltsrlafr::Heap>,
    > for ltsrlafr::Nat {
        type Intermediary = BoundedNat<ltsrlafr::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlafr::Heap,
        IdxBox<ltsrlafr::Heap, ltsrlafr::F>,
    > for ltsrlafr::Nat {
        type Intermediary = IdxBox<ltsrlafr::Heap, ltsrlafr::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlafr::Heap,
        IdxBox<ltsrlafr::Heap, ltsrlafr::Plus>,
    > for ltsrlafr::Nat {
        type Intermediary = IdxBox<ltsrlafr::Heap, ltsrlafr::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlafr::Heap, ltsrlafr::F>
    for IdxBox<ltsrlafr::Heap, ltsrlafr::F> {
        type Intermediary = ltsrlafr::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlafr::Heap, ltsrlafr::Nat>
    for IdxBox<ltsrlafr::Heap, ltsrlafr::F> {
        type Intermediary = ltsrlafr::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlafr::Heap, ltsrlafr::Plus>
    for IdxBox<ltsrlafr::Heap, ltsrlafr::Plus> {
        type Intermediary = ltsrlafr::Plus;
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlafr::Heap,
        (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ())),
    > for ltsrlafr::Plus {
        type Intermediary = ltsrlafr::Plus;
        type Intermediaries = (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlafr::Heap,
        (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ())),
    > for ltsrlafr::Nat {
        type Intermediary = ltsrlafr::Plus;
        type Intermediaries = (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlafr::Heap,
        (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ())),
    > for IdxBox<ltsrlafr::Heap, ltsrlafr::Plus> {
        type Intermediary = ltsrlafr::Plus;
        type Intermediaries = (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlafr::Heap,
        (ltsrlafr::Left_operand, (ltsrlafr::Nat, ())),
    > for ltsrlafr::Plus {
        type Intermediary = ltsrlafr::Plus;
        type Intermediaries = (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlafr::Heap,
        (ltsrlafr::Left_operand, (ltsrlafr::Nat, ())),
    > for IdxBox<ltsrlafr::Heap, ltsrlafr::Plus> {
        type Intermediary = ltsrlafr::Plus;
        type Intermediaries = (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlafr::Heap,
        (ltsrlafr::Nat, (ltsrlafr::Right_operand, ())),
    > for ltsrlafr::Plus {
        type Intermediary = ltsrlafr::Plus;
        type Intermediaries = (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlafr::Heap,
        (ltsrlafr::Nat, (ltsrlafr::Right_operand, ())),
    > for IdxBox<ltsrlafr::Heap, ltsrlafr::Plus> {
        type Intermediary = ltsrlafr::Plus;
        type Intermediaries = (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlafr::Heap,
        (ltsrlafr::Nat, (ltsrlafr::Nat, ())),
    > for ltsrlafr::Plus {
        type Intermediary = ltsrlafr::Plus;
        type Intermediaries = (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlafr::Heap,
        (ltsrlafr::Nat, (ltsrlafr::Nat, ())),
    > for IdxBox<ltsrlafr::Heap, ltsrlafr::Plus> {
        type Intermediary = ltsrlafr::Plus;
        type Intermediaries = (ltsrlafr::Left_operand, (ltsrlafr::Right_operand, ()));
    }
}
/// @generated by [term_specialized_impl_gen::gen_ccf_auto_impls]
pub mod ccf_auto_impls {
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_fib_r::F
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_fib_r::Left_operand
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_fib_r::Plus
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_fib_r::Right_operand
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_fib_r::Sum
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_fib_r::Nat
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, tymetafuncspec_core::Set <
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_fib_r::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap,
        tymetafuncspec_core::BoundedNat < crate
        ::l_term_specialized_r_l_autoboxed_fib_r::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, tymetafuncspec_core::IdxBox
        < crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_fib_r::F, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, tymetafuncspec_core::IdxBox
        < crate ::l_term_specialized_r_l_autoboxed_fib_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_fib_r::Plus, >
    );
}
