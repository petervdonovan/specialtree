#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
use crate::l_term_specialized_r_l_autoboxed_fib_r as ltsrlafr;
/// @generated by [term_bridge_gen::generate_heap]
impl fib::l_term_trait_r_fib::Heap for ltsrlafr::Heap {}
/// @generated by [words::words_inverse_impls]
pub mod words_inverse_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use fib::l_words_mod_r_fib::sorts::Sum;
    use fib::l_words_mod_r_fib::sorts::Right_operand;
    use fib::l_words_mod_r_fib::sorts::Plus;
    use fib::l_words_mod_r_fib::sorts::Nat;
    use fib::l_words_mod_r_fib::sorts::Left_operand;
    use fib::l_words_mod_r_fib::sorts::F;
    use fib::l_words_mod_r_fib::L;
    use crate::l_term_specialized_r_l_autoboxed_fib_r as ltsrlafr;
    impl words::InverseImplements<L, F> for ltsrlafr::Heap {
        type ExternBehavioralImplementor = ltsrlafr::F;
        type StructuralImplementor = ltsrlafr::F;
    }
    impl words::InverseImplements<L, Left_operand> for ltsrlafr::Heap {
        type ExternBehavioralImplementor = ltsrlafr::Left_operand;
        type StructuralImplementor = ltsrlafr::Left_operand;
    }
    impl words::InverseImplements<L, Plus> for ltsrlafr::Heap {
        type ExternBehavioralImplementor = ltsrlafr::Plus;
        type StructuralImplementor = ltsrlafr::Plus;
    }
    impl words::InverseImplements<L, Right_operand> for ltsrlafr::Heap {
        type ExternBehavioralImplementor = ltsrlafr::Right_operand;
        type StructuralImplementor = ltsrlafr::Right_operand;
    }
    impl words::InverseImplements<L, Sum> for ltsrlafr::Heap {
        type ExternBehavioralImplementor = ltsrlafr::Sum;
        type StructuralImplementor = ltsrlafr::Sum;
    }
    impl words::InverseImplements<L, Nat> for ltsrlafr::Heap {
        type ExternBehavioralImplementor = ltsrlafr::Nat;
        type StructuralImplementor = ltsrlafr::Nat;
    }
    impl words::InverseImplements<L, Set<(), Nat>> for ltsrlafr::Heap {
        type ExternBehavioralImplementor = Set<ltsrlafr::Heap, ltsrlafr::Nat>;
        type StructuralImplementor = Set<ltsrlafr::Heap, ltsrlafr::Nat>;
    }
    impl words::InverseImplements<L, BoundedNat<()>> for ltsrlafr::Heap {
        type ExternBehavioralImplementor = BoundedNat<ltsrlafr::Heap>;
        type StructuralImplementor = BoundedNat<ltsrlafr::Heap>;
    }
}
