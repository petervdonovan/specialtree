#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_impl_gen::generate]
/// @generated by [term_specialized_impl_gen::gen_ccf_mod]
pub mod ccf_impls {
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod plus {
        use words::InverseImplements;
        use term::Heaped;
        use crate::words_mod_autoboxed_fib as wmaf;
        use crate::words_mod_autoboxed_fib::sorts as wmafs;
        use crate::term_specialized_autoboxed_fib as tsaf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    wmafs::LeftOperand,
                >>::StructuralImplementor,
                (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        wmafs::RightOperand,
                    >>::StructuralImplementor,
                    (),
                ),
            ),
        > for tsaf::Plus {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        wmafs::LeftOperand,
                    >>::StructuralImplementor,
                    (
                        <<Self as Heaped>::Heap as InverseImplements<
                            wmaf::L,
                            wmafs::RightOperand,
                        >>::StructuralImplementor,
                        (),
                    ),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_fib::Plus {
                    left_operand: t.0,
                    right_operand: t.1.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    wmafs::LeftOperand,
                >>::StructuralImplementor,
                (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        wmafs::RightOperand,
                    >>::StructuralImplementor,
                    (),
                ),
            ) {
                (self.left_operand, (self.right_operand, ()))
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod left_operand {
        use words::InverseImplements;
        use term::Heaped;
        use crate::words_mod_autoboxed_fib as wmaf;
        use crate::words_mod_autoboxed_fib::sorts as wmafs;
        use crate::term_specialized_autoboxed_fib as tsaf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    wmafs::Nat,
                >>::StructuralImplementor,
                (),
            ),
        > for tsaf::LeftOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        wmafs::Nat,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_fib::LeftOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    wmafs::Nat,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod right_operand {
        use words::InverseImplements;
        use term::Heaped;
        use crate::words_mod_autoboxed_fib as wmaf;
        use crate::words_mod_autoboxed_fib::sorts as wmafs;
        use crate::term_specialized_autoboxed_fib as tsaf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    wmafs::Nat,
                >>::StructuralImplementor,
                (),
            ),
        > for tsaf::RightOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        wmafs::Nat,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_fib::RightOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    wmafs::Nat,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod f {
        use words::InverseImplements;
        use term::Heaped;
        use crate::words_mod_autoboxed_fib as wmaf;
        use crate::words_mod_autoboxed_fib::sorts as wmafs;
        use crate::term_specialized_autoboxed_fib as tsaf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    wmafs::Nat,
                >>::StructuralImplementor,
                (),
            ),
        > for tsaf::F {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        wmafs::Nat,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_fib::F {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    wmafs::Nat,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod sum {
        use words::InverseImplements;
        use tymetafuncspec_core::Set;
        use term::Heaped;
        use crate::words_mod_autoboxed_fib as wmaf;
        use crate::words_mod_autoboxed_fib::sorts as wmafs;
        use crate::term_specialized_autoboxed_fib as tsaf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    Set<(), wmafs::Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsaf::Sum {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        Set<(), wmafs::Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_fib::Sum {
                    set: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    Set<(), wmafs::Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.set, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod nat {
        use words::InverseImplements;
        use tymetafuncspec_core::IdxBox;
        use tymetafuncspec_core::BoundedNat;
        use term::Heaped;
        use crate::words_mod_autoboxed_fib as wmaf;
        use crate::words_mod_autoboxed_fib::sorts as wmafs;
        use crate::term_specialized_autoboxed_fib as tsaf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    BoundedNat<()>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsaf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        BoundedNat<()>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_fib::Nat::NatLit(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_fib::Nat::NatLit(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    BoundedNat<()>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_fib::Nat::NatLit(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    IdxBox<(), wmafs::F>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsaf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        IdxBox<(), wmafs::F>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_fib::Nat::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_fib::Nat::F(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    IdxBox<(), wmafs::F>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_fib::Nat::F(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    IdxBox<(), wmafs::Plus>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsaf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        IdxBox<(), wmafs::Plus>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_fib::Nat::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_fib::Nat::Plus(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    IdxBox<(), wmafs::Plus>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_fib::Nat::Plus(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    wmafs::Sum,
                >>::StructuralImplementor,
                (),
            ),
        > for tsaf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmaf::L,
                        wmafs::Sum,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_fib::Nat::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_fib::Nat::Sum(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmaf::L,
                    wmafs::Sum,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_fib::Nat::Sum(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
}
/// @generated by [term_specialized_impl_gen::gen_transitive_ccf_mod]
pub mod transitive_ccf {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::BoundedNat;
    use crate::term_specialized_autoboxed_fib as tsaf;
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, tsaf::Nat>
    for tsaf::LeftOperand {
        type Intermediary = tsaf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, tsaf::Nat>
    for tsaf::RightOperand {
        type Intermediary = tsaf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, tsaf::Nat> for tsaf::F {
        type Intermediary = tsaf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, Set<tsaf::Heap, tsaf::Nat>>
    for tsaf::Sum {
        type Intermediary = Set<tsaf::Heap, tsaf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, tsaf::Plus> for tsaf::Nat {
        type Intermediary = IdxBox<tsaf::Heap, tsaf::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, tsaf::F> for tsaf::Nat {
        type Intermediary = IdxBox<tsaf::Heap, tsaf::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, tsaf::Sum> for tsaf::Nat {
        type Intermediary = tsaf::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, BoundedNat<tsaf::Heap>>
    for tsaf::Nat {
        type Intermediary = BoundedNat<tsaf::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsaf::Heap,
        IdxBox<tsaf::Heap, tsaf::Plus>,
    > for tsaf::Nat {
        type Intermediary = IdxBox<tsaf::Heap, tsaf::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, IdxBox<tsaf::Heap, tsaf::F>>
    for tsaf::Nat {
        type Intermediary = IdxBox<tsaf::Heap, tsaf::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, tsaf::Plus>
    for IdxBox<tsaf::Heap, tsaf::Plus> {
        type Intermediary = tsaf::Plus;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, tsaf::F>
    for IdxBox<tsaf::Heap, tsaf::F> {
        type Intermediary = tsaf::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsaf::Heap, tsaf::Nat>
    for IdxBox<tsaf::Heap, tsaf::F> {
        type Intermediary = tsaf::F;
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsaf::Heap,
        (tsaf::LeftOperand, (tsaf::RightOperand, ())),
    > for tsaf::Plus {
        type Intermediary = tsaf::Plus;
        type Intermediaries = (tsaf::LeftOperand, (tsaf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsaf::Heap,
        (tsaf::LeftOperand, (tsaf::RightOperand, ())),
    > for tsaf::Nat {
        type Intermediary = tsaf::Plus;
        type Intermediaries = (tsaf::LeftOperand, (tsaf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsaf::Heap,
        (tsaf::LeftOperand, (tsaf::RightOperand, ())),
    > for IdxBox<tsaf::Heap, tsaf::Plus> {
        type Intermediary = tsaf::Plus;
        type Intermediaries = (tsaf::LeftOperand, (tsaf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsaf::Heap,
        (tsaf::LeftOperand, (tsaf::Nat, ())),
    > for tsaf::Plus {
        type Intermediary = tsaf::Plus;
        type Intermediaries = (tsaf::LeftOperand, (tsaf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsaf::Heap,
        (tsaf::LeftOperand, (tsaf::Nat, ())),
    > for IdxBox<tsaf::Heap, tsaf::Plus> {
        type Intermediary = tsaf::Plus;
        type Intermediaries = (tsaf::LeftOperand, (tsaf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsaf::Heap,
        (tsaf::Nat, (tsaf::RightOperand, ())),
    > for tsaf::Plus {
        type Intermediary = tsaf::Plus;
        type Intermediaries = (tsaf::LeftOperand, (tsaf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsaf::Heap,
        (tsaf::Nat, (tsaf::RightOperand, ())),
    > for IdxBox<tsaf::Heap, tsaf::Plus> {
        type Intermediary = tsaf::Plus;
        type Intermediaries = (tsaf::LeftOperand, (tsaf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<tsaf::Heap, (tsaf::Nat, (tsaf::Nat, ()))>
    for tsaf::Plus {
        type Intermediary = tsaf::Plus;
        type Intermediaries = (tsaf::LeftOperand, (tsaf::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<tsaf::Heap, (tsaf::Nat, (tsaf::Nat, ()))>
    for IdxBox<tsaf::Heap, tsaf::Plus> {
        type Intermediary = tsaf::Plus;
        type Intermediaries = (tsaf::LeftOperand, (tsaf::RightOperand, ()));
    }
}
/// @generated by [term_specialized_impl_gen::gen_ccf_auto_impls]
pub mod ccf_auto_impls {
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_fib::Heap, crate
        ::term_specialized_autoboxed_fib::Plus
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_fib::Heap, crate
        ::term_specialized_autoboxed_fib::LeftOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_fib::Heap, crate
        ::term_specialized_autoboxed_fib::RightOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_fib::Heap, crate
        ::term_specialized_autoboxed_fib::F
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_fib::Heap, crate
        ::term_specialized_autoboxed_fib::Sum
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_fib::Heap, crate
        ::term_specialized_autoboxed_fib::Nat
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_fib::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_autoboxed_fib::Heap, crate
        ::term_specialized_autoboxed_fib::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_fib::Heap, tymetafuncspec_core::BoundedNat <
        crate ::term_specialized_autoboxed_fib::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_fib::Heap, tymetafuncspec_core::IdxBox < crate
        ::term_specialized_autoboxed_fib::Heap, crate
        ::term_specialized_autoboxed_fib::F, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_fib::Heap, tymetafuncspec_core::IdxBox < crate
        ::term_specialized_autoboxed_fib::Heap, crate
        ::term_specialized_autoboxed_fib::Plus, >
    );
}
