#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
use crate::l_term_specialized_r_l_cst_l_autoboxed_fib_r_r as ltsrlclafrr;
/// @generated by [term_bridge_gen::generate_heap]
impl fib::l_term_trait_r_fib::Heap for ltsrlclafrr::Heap {}
/// @generated by [words::words_inverse_impls]
pub mod words_inverse_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::Pair;
    use tymetafuncspec_core::Maybe;
    use tymetafuncspec_core::Either;
    use tymetafuncspec_core::BoundedNat;
    use std_parse_metadata::ParseMetadata;
    use std_parse_error::ParseError;
    use fib::l_words_mod_r_fib::sorts::Sum;
    use fib::l_words_mod_r_fib::sorts::Right_operand;
    use fib::l_words_mod_r_fib::sorts::Plus;
    use fib::l_words_mod_r_fib::sorts::Nat;
    use fib::l_words_mod_r_fib::sorts::Left_operand;
    use fib::l_words_mod_r_fib::sorts::F;
    use fib::l_words_mod_r_fib::L;
    use crate::l_term_specialized_r_l_cst_l_autoboxed_fib_r_r as ltsrlclafrr;
    impl words::InverseImplements<L, F> for ltsrlclafrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::F,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::F,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Left_operand> for ltsrlclafrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::Left_operand,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::Left_operand,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Plus> for ltsrlclafrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::Plus,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::Plus,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Right_operand> for ltsrlclafrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::Right_operand,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::Right_operand,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Sum> for ltsrlclafrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::Sum,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::Sum,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Nat> for ltsrlclafrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::Nat,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                ltsrlclafrr::Nat,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Set<(), Nat>> for ltsrlclafrr::Heap {
        type ExternBehavioralImplementor = Set<
            ltsrlclafrr::Heap,
            Either<
                ltsrlclafrr::Heap,
                Pair<
                    ltsrlclafrr::Heap,
                    ltsrlclafrr::Nat,
                    Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
                >,
                ParseError<ltsrlclafrr::Heap>,
            >,
        >;
        type StructuralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                Set<
                    ltsrlclafrr::Heap,
                    Either<
                        ltsrlclafrr::Heap,
                        Pair<
                            ltsrlclafrr::Heap,
                            ltsrlclafrr::Nat,
                            Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
                        >,
                        ParseError<ltsrlclafrr::Heap>,
                    >,
                >,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, BoundedNat<()>> for ltsrlclafrr::Heap {
        type ExternBehavioralImplementor = BoundedNat<ltsrlclafrr::Heap>;
        type StructuralImplementor = Either<
            ltsrlclafrr::Heap,
            Pair<
                ltsrlclafrr::Heap,
                BoundedNat<ltsrlclafrr::Heap>,
                Maybe<ltsrlclafrr::Heap, ParseMetadata<ltsrlclafrr::Heap>>,
            >,
            ParseError<ltsrlclafrr::Heap>,
        >;
    }
}
