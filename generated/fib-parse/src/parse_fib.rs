#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [parse_gen::generate]
use words::AdtLike;
use parse_adt::cstfy::Cstfy;
use parse_adt::Parser;
use fib::l_words_mod_r_fib::sorts::Sum;
use fib::l_words_mod_r_fib::sorts::Right_operand;
use fib::l_words_mod_r_fib::sorts::Plus;
use fib::l_words_mod_r_fib::sorts::Nat;
use fib::l_words_mod_r_fib::sorts::Left_operand;
use fib::l_words_mod_r_fib::sorts::F;
use fib::l_words_mod_r_fib::L;
use crate::l_term_specialized_r_l_cst_l_autoboxed_fib_r_r as ltsrlclafrr;
/// @generated by [parse_gen::generate_parse]
pub fn f(source: &str) -> (ltsrlclafrr::Heap, Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::F>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::l_term_specialized_r_l_cst_l_autoboxed_fib_r_r::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        F,
        L,
        Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::F>,
        ltsrlclafrr::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn left_operand(
    source: &str,
) -> (ltsrlclafrr::Heap, Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::Left_operand>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::l_term_specialized_r_l_cst_l_autoboxed_fib_r_r::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Left_operand,
        L,
        Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::Left_operand>,
        ltsrlclafrr::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn plus(
    source: &str,
) -> (ltsrlclafrr::Heap, Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::Plus>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::l_term_specialized_r_l_cst_l_autoboxed_fib_r_r::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Plus,
        L,
        Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::Plus>,
        ltsrlclafrr::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn right_operand(
    source: &str,
) -> (ltsrlclafrr::Heap, Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::Right_operand>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::l_term_specialized_r_l_cst_l_autoboxed_fib_r_r::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Right_operand,
        L,
        Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::Right_operand>,
        ltsrlclafrr::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn sum(
    source: &str,
) -> (ltsrlclafrr::Heap, Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::Sum>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::l_term_specialized_r_l_cst_l_autoboxed_fib_r_r::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Sum,
        L,
        Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::Sum>,
        ltsrlclafrr::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn nat(
    source: &str,
) -> (ltsrlclafrr::Heap, Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::Nat>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::l_term_specialized_r_l_cst_l_autoboxed_fib_r_r::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Nat,
        L,
        Cstfy<ltsrlclafrr::Heap, ltsrlclafrr::Nat>,
        ltsrlclafrr::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
