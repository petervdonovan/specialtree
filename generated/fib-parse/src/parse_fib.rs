#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [parse_gen::generate]
use parse_adt::cstfy::Cstfy;
use parse_adt::Parser;
use fib::words_mod_fib::L;
use crate::term_specialized_cst as tsc;
/// @generated by [parse_gen::generate_parse]
pub fn plus(source: &str) -> (tsc::Heap, Cstfy<tsc::Heap, tsc::Plus>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Cstfy<tsc::Heap, tsc::Plus>,
        tsc::Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn left_operand(source: &str) -> (tsc::Heap, Cstfy<tsc::Heap, tsc::LeftOperand>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Cstfy<tsc::Heap, tsc::LeftOperand>,
        tsc::Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn right_operand(source: &str) -> (tsc::Heap, Cstfy<tsc::Heap, tsc::RightOperand>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Cstfy<tsc::Heap, tsc::RightOperand>,
        tsc::Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn f(source: &str) -> (tsc::Heap, Cstfy<tsc::Heap, tsc::F>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Cstfy<tsc::Heap, tsc::F>,
        tsc::Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn sum(source: &str) -> (tsc::Heap, Cstfy<tsc::Heap, tsc::Sum>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Cstfy<tsc::Heap, tsc::Sum>,
        tsc::Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn nat(source: &str) -> (tsc::Heap, Cstfy<tsc::Heap, tsc::Nat>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Cstfy<tsc::Heap, tsc::Nat>,
        tsc::Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
