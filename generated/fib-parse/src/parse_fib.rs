#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [parse_gen::generate]
use words::AdtLike;
use parse_adt::cstfy::Cstfy;
use parse_adt::Parser;
use fib::words_mod_fib::sorts::Sum;
use fib::words_mod_fib::sorts::RightOperand;
use fib::words_mod_fib::sorts::Plus;
use fib::words_mod_fib::sorts::Nat;
use fib::words_mod_fib::sorts::LeftOperand;
use fib::words_mod_fib::sorts::F;
use fib::words_mod_fib::L;
use crate::term_specialized_cst_autoboxed_fib as tscaf;
/// @generated by [parse_gen::generate_parse]
pub fn plus(source: &str) -> (tscaf::Heap, Cstfy<tscaf::Heap, tscaf::Plus>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst_autoboxed_fib::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Plus,
        L,
        Cstfy<tscaf::Heap, tscaf::Plus>,
        tscaf::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn left_operand(
    source: &str,
) -> (tscaf::Heap, Cstfy<tscaf::Heap, tscaf::LeftOperand>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst_autoboxed_fib::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        LeftOperand,
        L,
        Cstfy<tscaf::Heap, tscaf::LeftOperand>,
        tscaf::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn right_operand(
    source: &str,
) -> (tscaf::Heap, Cstfy<tscaf::Heap, tscaf::RightOperand>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst_autoboxed_fib::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        RightOperand,
        L,
        Cstfy<tscaf::Heap, tscaf::RightOperand>,
        tscaf::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn f(source: &str) -> (tscaf::Heap, Cstfy<tscaf::Heap, tscaf::F>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst_autoboxed_fib::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        F,
        L,
        Cstfy<tscaf::Heap, tscaf::F>,
        tscaf::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn sum(source: &str) -> (tscaf::Heap, Cstfy<tscaf::Heap, tscaf::Sum>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst_autoboxed_fib::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Sum,
        L,
        Cstfy<tscaf::Heap, tscaf::Sum>,
        tscaf::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn nat(source: &str) -> (tscaf::Heap, Cstfy<tscaf::Heap, tscaf::Nat>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = crate::term_specialized_cst_autoboxed_fib::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        Nat,
        L,
        Cstfy<tscaf::Heap, tscaf::Nat>,
        tscaf::Heap,
        AdtLike,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
