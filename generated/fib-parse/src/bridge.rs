#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
use tymetafuncspec_core::Pair;
use tymetafuncspec_core::Maybe;
use tymetafuncspec_core::Either;
use std_parse_metadata::ParseMetadata;
use std_parse_error::ParseError;
use crate::data_structure as ds;
/// @generated by [term_bridge_gen::generate_heap]
impl fib::term_trait::Heap for ds::Heap {
    type Plus = Either<
        ds::Heap,
        Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    >;
    type LeftOperand = Either<
        ds::Heap,
        Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    >;
    type RightOperand = Either<
        ds::Heap,
        Pair<ds::Heap, ds::RightOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    >;
    type F = Either<
        ds::Heap,
        Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    >;
    type Sum = Either<
        ds::Heap,
        Pair<ds::Heap, ds::Sum, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    >;
    type Nat = Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>;
}
/// @generated by [term_bridge_gen::generate_owned_impls]
pub mod owned_impls {
    use tymetafuncspec_core::Pair;
    use tymetafuncspec_core::Maybe;
    use tymetafuncspec_core::Either;
    use std_parse_metadata::ParseMetadata;
    use std_parse_error::ParseError;
    use crate::data_structure as ds;
    impl fib::term_trait::owned::Plus
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {}
    impl fib::term_trait::owned::LeftOperand
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {}
    impl fib::term_trait::owned::RightOperand
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::RightOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {}
    impl fib::term_trait::owned::F
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {}
    impl fib::term_trait::owned::Sum
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::Sum, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {}
    impl fib::term_trait::owned::Nat
    for Either<ds::Heap, ds::Nat, ParseError<ds::Heap>> {}
}
/// @generated by [term_bridge_gen::bridge_words_impls]
pub mod words_impls {
    use fib::term_trait::Heap;
    use crate::words as w;
    use crate::words::sorts as ws;
    use crate::data_structure as ds;
    impl words::Implements<w::L> for <ds::Heap as Heap>::Plus {
        type LWord = ws::Plus;
    }
    impl words::Implements<w::L> for <ds::Heap as Heap>::LeftOperand {
        type LWord = ws::LeftOperand;
    }
    impl words::Implements<w::L> for <ds::Heap as Heap>::RightOperand {
        type LWord = ws::RightOperand;
    }
    impl words::Implements<w::L> for <ds::Heap as Heap>::F {
        type LWord = ws::F;
    }
    impl words::Implements<w::L> for <ds::Heap as Heap>::Sum {
        type LWord = ws::Sum;
    }
    impl words::Implements<w::L> for <ds::Heap as Heap>::Nat {
        type LWord = ws::Nat;
    }
}
/// @generated by [term_bridge_gen::generate_maps_tmf_impls]
pub mod maps_tmf_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::Pair;
    use tymetafuncspec_core::Maybe;
    use tymetafuncspec_core::Either;
    use tymetafuncspec_core::BoundedNat;
    use std_parse_metadata::ParseMetadata;
    use std_parse_error::ParseError;
    use crate::words as w;
    use crate::data_structure as ds;
    impl term::MapsTmf<
        w::L,
        Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
    > for ds::Heap {
        type Tmf = Either<
            ds::Heap,
            Pair<
                ds::Heap,
                Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >;
    }
    impl term::MapsTmf<w::L, BoundedNat<ds::Heap>> for ds::Heap {
        type Tmf = Either<
            ds::Heap,
            Pair<
                ds::Heap,
                BoundedNat<ds::Heap>,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >;
    }
}
