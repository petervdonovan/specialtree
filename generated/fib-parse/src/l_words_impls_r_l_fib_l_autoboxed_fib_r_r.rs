#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [words::words_impls]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::BoundedNat;
use fib_ds::l_term_specialized_r_l_autoboxed_fib_r::Sum;
use fib_ds::l_term_specialized_r_l_autoboxed_fib_r::Right_operand;
use fib_ds::l_term_specialized_r_l_autoboxed_fib_r::Plus;
use fib_ds::l_term_specialized_r_l_autoboxed_fib_r::Nat;
use fib_ds::l_term_specialized_r_l_autoboxed_fib_r::Left_operand;
use fib_ds::l_term_specialized_r_l_autoboxed_fib_r::Heap;
use fib_ds::l_term_specialized_r_l_autoboxed_fib_r::F;
use fib::l_words_mod_r_fib::L;
impl words::Implements<Heap, L> for F {
    type LWord = F;
}
impl words::Implements<Heap, L> for Left_operand {
    type LWord = Left_operand;
}
impl words::Implements<Heap, L> for Plus {
    type LWord = Plus;
}
impl words::Implements<Heap, L> for Right_operand {
    type LWord = Right_operand;
}
impl words::Implements<Heap, L> for Sum {
    type LWord = Sum;
}
impl words::Implements<Heap, L> for Nat {
    type LWord = Nat;
}
impl words::Implements<Heap, L> for Set<Heap, Nat> {
    type LWord = Set<(), Nat>;
}
impl words::Implements<Heap, L> for BoundedNat<Heap> {
    type LWord = BoundedNat<()>;
}
