#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_impl_gen::generate]
use crate::data_structure as ds;
/// @generated by [term_specialized_impl_gen::gen_heap_impl]
impl crate::term_trait::Heap for ds::Heap {
    type Plus = ds::Plus;
    type LeftOperand = ds::LeftOperand;
    type RightOperand = ds::RightOperand;
    type F = ds::F;
    type Sum = ds::Sum;
    type Nat = ds::Nat;
}
/// @generated by [term_specialized_impl_gen::gen_owned_mod]
pub mod owned_impls {
    use crate::data_structure as ds;
    impl crate::term_trait::owned::Plus for ds::Plus {}
    impl crate::term_trait::owned::LeftOperand for ds::LeftOperand {}
    impl crate::term_trait::owned::RightOperand for ds::RightOperand {}
    impl crate::term_trait::owned::F for ds::F {}
    impl crate::term_trait::owned::Sum for ds::Sum {}
    impl crate::term_trait::owned::Nat for ds::Nat {}
}
/// @generated by [term_specialized_impl_gen::gen_ccf_mod]
pub mod ccf_impls {
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod plus {
        use tymetafuncspec_core::Pair;
        use tymetafuncspec_core::Maybe;
        use tymetafuncspec_core::Either;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_metadata::ParseMetadata;
        use std_parse_error::ParseError;
        use crate::words as w;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            ds::LeftOperand,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                ds::RightOperand,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ),
        > for ds::Plus {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                ds::LeftOperand,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (
                        <<Self as Heaped>::Heap as MapsTmf<
                            w::L,
                            Either<
                                <Self as Heaped>::Heap,
                                Pair<
                                    <Self as Heaped>::Heap,
                                    ds::RightOperand,
                                    Maybe<
                                        <Self as Heaped>::Heap,
                                        ParseMetadata<<Self as Heaped>::Heap>,
                                    >,
                                >,
                                ParseError<<Self as Heaped>::Heap>,
                            >,
                        >>::Tmf,
                        (),
                    ),
                ),
            ) -> Self {
                crate::data_structure::Plus {
                    left_operand: t.0,
                    right_operand: t.1.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            ds::LeftOperand,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                ds::RightOperand,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) {
                (self.left_operand, (self.right_operand, ()))
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod left_operand {
        use tymetafuncspec_core::Either;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_error::ParseError;
        use crate::words as w;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        ds::Nat,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for ds::LeftOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            ds::Nat,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::LeftOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        ds::Nat,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod right_operand {
        use tymetafuncspec_core::Either;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_error::ParseError;
        use crate::words as w;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        ds::Nat,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for ds::RightOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            ds::Nat,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::RightOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        ds::Nat,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod f {
        use tymetafuncspec_core::Either;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_error::ParseError;
        use crate::words as w;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        ds::Nat,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for ds::F {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            ds::Nat,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::F {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        ds::Nat,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod sum {
        use tymetafuncspec_core::Set;
        use tymetafuncspec_core::Pair;
        use tymetafuncspec_core::Maybe;
        use tymetafuncspec_core::Either;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_metadata::ParseMetadata;
        use std_parse_error::ParseError;
        use crate::words as w;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            Set<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    ds::Nat,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for ds::Sum {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                Set<
                                    <Self as Heaped>::Heap,
                                    Either<
                                        <Self as Heaped>::Heap,
                                        ds::Nat,
                                        ParseError<<Self as Heaped>::Heap>,
                                    >,
                                >,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::Sum {
                    set: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            Set<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    ds::Nat,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                (self.set, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod nat {
        use tymetafuncspec_core::Pair;
        use tymetafuncspec_core::Maybe;
        use tymetafuncspec_core::IdxBox;
        use tymetafuncspec_core::Either;
        use tymetafuncspec_core::BoundedNat;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_metadata::ParseMetadata;
        use std_parse_error::ParseError;
        use crate::words as w;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            BoundedNat<<Self as Heaped>::Heap>,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for ds::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                BoundedNat<<Self as Heaped>::Heap>,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::Nat::NatLit(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::data_structure::Nat::NatLit(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            BoundedNat<<Self as Heaped>::Heap>,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::data_structure::Nat::NatLit(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            IdxBox<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    Pair<
                                        <Self as Heaped>::Heap,
                                        ds::F,
                                        Maybe<
                                            <Self as Heaped>::Heap,
                                            ParseMetadata<<Self as Heaped>::Heap>,
                                        >,
                                    >,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for ds::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                IdxBox<
                                    <Self as Heaped>::Heap,
                                    Either<
                                        <Self as Heaped>::Heap,
                                        Pair<
                                            <Self as Heaped>::Heap,
                                            ds::F,
                                            Maybe<
                                                <Self as Heaped>::Heap,
                                                ParseMetadata<<Self as Heaped>::Heap>,
                                            >,
                                        >,
                                        ParseError<<Self as Heaped>::Heap>,
                                    >,
                                >,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::Nat::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::data_structure::Nat::F(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            IdxBox<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    Pair<
                                        <Self as Heaped>::Heap,
                                        ds::F,
                                        Maybe<
                                            <Self as Heaped>::Heap,
                                            ParseMetadata<<Self as Heaped>::Heap>,
                                        >,
                                    >,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::data_structure::Nat::F(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            IdxBox<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    Pair<
                                        <Self as Heaped>::Heap,
                                        ds::Plus,
                                        Maybe<
                                            <Self as Heaped>::Heap,
                                            ParseMetadata<<Self as Heaped>::Heap>,
                                        >,
                                    >,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for ds::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                IdxBox<
                                    <Self as Heaped>::Heap,
                                    Either<
                                        <Self as Heaped>::Heap,
                                        Pair<
                                            <Self as Heaped>::Heap,
                                            ds::Plus,
                                            Maybe<
                                                <Self as Heaped>::Heap,
                                                ParseMetadata<<Self as Heaped>::Heap>,
                                            >,
                                        >,
                                        ParseError<<Self as Heaped>::Heap>,
                                    >,
                                >,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::Nat::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::data_structure::Nat::Plus(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            IdxBox<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    Pair<
                                        <Self as Heaped>::Heap,
                                        ds::Plus,
                                        Maybe<
                                            <Self as Heaped>::Heap,
                                            ParseMetadata<<Self as Heaped>::Heap>,
                                        >,
                                    >,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::data_structure::Nat::Plus(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            ds::Sum,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for ds::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                ds::Sum,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::Nat::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::data_structure::Nat::Sum(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            ds::Sum,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::data_structure::Nat::Sum(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
}
/// @generated by [term_specialized_impl_gen::gen_transitive_ccf_mod]
pub mod transitive_ccf {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::Pair;
    use tymetafuncspec_core::Maybe;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::Either;
    use tymetafuncspec_core::BoundedNat;
    use std_parse_metadata::ParseMetadata;
    use std_parse_error::ParseError;
    use crate::data_structure as ds;
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
    > for ds::LeftOperand {
        type Intermediary = Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
    > for ds::RightOperand {
        type Intermediary = Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
    > for ds::F {
        type Intermediary = Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Either<
            ds::Heap,
            Pair<
                ds::Heap,
                Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >,
    > for ds::Sum {
        type Intermediary = Either<
            ds::Heap,
            Pair<
                ds::Heap,
                Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Either<
            ds::Heap,
            Pair<ds::Heap, ds::Sum, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            ParseError<ds::Heap>,
        >,
    > for ds::Nat {
        type Intermediary = Either<
            ds::Heap,
            Pair<ds::Heap, ds::Sum, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            ParseError<ds::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Either<
            ds::Heap,
            Pair<
                ds::Heap,
                BoundedNat<ds::Heap>,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >,
    > for ds::Nat {
        type Intermediary = Either<
            ds::Heap,
            Pair<
                ds::Heap,
                BoundedNat<ds::Heap>,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Either<
            ds::Heap,
            Pair<
                ds::Heap,
                IdxBox<
                    ds::Heap,
                    Either<
                        ds::Heap,
                        Pair<
                            ds::Heap,
                            ds::Plus,
                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                        >,
                        ParseError<ds::Heap>,
                    >,
                >,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >,
    > for ds::Nat {
        type Intermediary = Either<
            ds::Heap,
            Pair<
                ds::Heap,
                IdxBox<
                    ds::Heap,
                    Either<
                        ds::Heap,
                        Pair<
                            ds::Heap,
                            ds::Plus,
                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                        >,
                        ParseError<ds::Heap>,
                    >,
                >,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Either<
            ds::Heap,
            Pair<
                ds::Heap,
                IdxBox<
                    ds::Heap,
                    Either<
                        ds::Heap,
                        Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                        ParseError<ds::Heap>,
                    >,
                >,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >,
    > for ds::Nat {
        type Intermediary = Either<
            ds::Heap,
            Pair<
                ds::Heap,
                IdxBox<
                    ds::Heap,
                    Either<
                        ds::Heap,
                        Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                        ParseError<ds::Heap>,
                    >,
                >,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Either<
            ds::Heap,
            Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            ParseError<ds::Heap>,
        >,
    >
    for IdxBox<
        ds::Heap,
        Either<
            ds::Heap,
            Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            ParseError<ds::Heap>,
        >,
    > {
        type Intermediary = Either<
            ds::Heap,
            Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            ParseError<ds::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Either<
            ds::Heap,
            Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            ParseError<ds::Heap>,
        >,
    >
    for IdxBox<
        ds::Heap,
        Either<
            ds::Heap,
            Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            ParseError<ds::Heap>,
        >,
    > {
        type Intermediary = Either<
            ds::Heap,
            Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            ParseError<ds::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::Nat>
    for Either<ds::Heap, ds::Nat, ParseError<ds::Heap>> {
        type Intermediary = ds::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseError<ds::Heap>>
    for Either<ds::Heap, ds::Nat, ParseError<ds::Heap>> {
        type Intermediary = ParseError<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseError<ds::Heap>>
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = ParseError<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
    >
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = Pair<
            ds::Heap,
            ds::Plus,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseError<ds::Heap>>
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = ParseError<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
    >
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = Pair<
            ds::Heap,
            ds::LeftOperand,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseError<ds::Heap>>
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::RightOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = ParseError<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Pair<ds::Heap, ds::RightOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
    >
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::RightOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = Pair<
            ds::Heap,
            ds::RightOperand,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseError<ds::Heap>>
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = ParseError<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
    >
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = Pair<
            ds::Heap,
            ds::F,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseError<ds::Heap>>
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::Sum, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = ParseError<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Pair<ds::Heap, ds::Sum, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
    >
    for Either<
        ds::Heap,
        Pair<ds::Heap, ds::Sum, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = Pair<
            ds::Heap,
            ds::Sum,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseError<ds::Heap>>
    for Either<
        ds::Heap,
        Pair<ds::Heap, BoundedNat<ds::Heap>, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = ParseError<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Pair<ds::Heap, BoundedNat<ds::Heap>, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
    >
    for Either<
        ds::Heap,
        Pair<ds::Heap, BoundedNat<ds::Heap>, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    > {
        type Intermediary = Pair<
            ds::Heap,
            BoundedNat<ds::Heap>,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseError<ds::Heap>>
    for Either<
        ds::Heap,
        Pair<
            ds::Heap,
            Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >,
        ParseError<ds::Heap>,
    > {
        type Intermediary = ParseError<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Pair<
            ds::Heap,
            Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >,
    >
    for Either<
        ds::Heap,
        Pair<
            ds::Heap,
            Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >,
        ParseError<ds::Heap>,
    > {
        type Intermediary = Pair<
            ds::Heap,
            Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseError<ds::Heap>>
    for Either<
        ds::Heap,
        Pair<
            ds::Heap,
            IdxBox<
                ds::Heap,
                Either<
                    ds::Heap,
                    Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                    ParseError<ds::Heap>,
                >,
            >,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >,
        ParseError<ds::Heap>,
    > {
        type Intermediary = ParseError<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Pair<
            ds::Heap,
            IdxBox<
                ds::Heap,
                Either<
                    ds::Heap,
                    Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                    ParseError<ds::Heap>,
                >,
            >,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >,
    >
    for Either<
        ds::Heap,
        Pair<
            ds::Heap,
            IdxBox<
                ds::Heap,
                Either<
                    ds::Heap,
                    Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                    ParseError<ds::Heap>,
                >,
            >,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >,
        ParseError<ds::Heap>,
    > {
        type Intermediary = Pair<
            ds::Heap,
            IdxBox<
                ds::Heap,
                Either<
                    ds::Heap,
                    Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                    ParseError<ds::Heap>,
                >,
            >,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseError<ds::Heap>>
    for Either<
        ds::Heap,
        Pair<
            ds::Heap,
            IdxBox<
                ds::Heap,
                Either<
                    ds::Heap,
                    Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                    ParseError<ds::Heap>,
                >,
            >,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >,
        ParseError<ds::Heap>,
    > {
        type Intermediary = ParseError<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Pair<
            ds::Heap,
            IdxBox<
                ds::Heap,
                Either<
                    ds::Heap,
                    Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                    ParseError<ds::Heap>,
                >,
            >,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >,
    >
    for Either<
        ds::Heap,
        Pair<
            ds::Heap,
            IdxBox<
                ds::Heap,
                Either<
                    ds::Heap,
                    Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                    ParseError<ds::Heap>,
                >,
            >,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >,
        ParseError<ds::Heap>,
    > {
        type Intermediary = Pair<
            ds::Heap,
            IdxBox<
                ds::Heap,
                Either<
                    ds::Heap,
                    Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                    ParseError<ds::Heap>,
                >,
            >,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ParseMetadata<ds::Heap>>
    for Maybe<ds::Heap, ParseMetadata<ds::Heap>> {
        type Intermediary = ParseMetadata<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::Plus>
    for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Plus;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>
    for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = Maybe<ds::Heap, ParseMetadata<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::LeftOperand>
    for Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>
    for Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = Maybe<ds::Heap, ParseMetadata<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::RightOperand>
    for Pair<ds::Heap, ds::RightOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>
    for Pair<ds::Heap, ds::RightOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = Maybe<ds::Heap, ParseMetadata<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::F>
    for Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>
    for Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = Maybe<ds::Heap, ParseMetadata<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::Sum>
    for Pair<ds::Heap, ds::Sum, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>
    for Pair<ds::Heap, ds::Sum, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = Maybe<ds::Heap, ParseMetadata<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, BoundedNat<ds::Heap>>
    for Pair<ds::Heap, BoundedNat<ds::Heap>, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = BoundedNat<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>
    for Pair<ds::Heap, BoundedNat<ds::Heap>, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = Maybe<ds::Heap, ParseMetadata<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
    >
    for Pair<
        ds::Heap,
        Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
    > {
        type Intermediary = Set<
            ds::Heap,
            Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>
    for Pair<
        ds::Heap,
        Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
    > {
        type Intermediary = Maybe<ds::Heap, ParseMetadata<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        IdxBox<
            ds::Heap,
            Either<
                ds::Heap,
                Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                ParseError<ds::Heap>,
            >,
        >,
    >
    for Pair<
        ds::Heap,
        IdxBox<
            ds::Heap,
            Either<
                ds::Heap,
                Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                ParseError<ds::Heap>,
            >,
        >,
        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
    > {
        type Intermediary = IdxBox<
            ds::Heap,
            Either<
                ds::Heap,
                Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                ParseError<ds::Heap>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>
    for Pair<
        ds::Heap,
        IdxBox<
            ds::Heap,
            Either<
                ds::Heap,
                Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                ParseError<ds::Heap>,
            >,
        >,
        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
    > {
        type Intermediary = Maybe<ds::Heap, ParseMetadata<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<
        ds::Heap,
        IdxBox<
            ds::Heap,
            Either<
                ds::Heap,
                Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                ParseError<ds::Heap>,
            >,
        >,
    >
    for Pair<
        ds::Heap,
        IdxBox<
            ds::Heap,
            Either<
                ds::Heap,
                Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                ParseError<ds::Heap>,
            >,
        >,
        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
    > {
        type Intermediary = IdxBox<
            ds::Heap,
            Either<
                ds::Heap,
                Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                ParseError<ds::Heap>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>
    for Pair<
        ds::Heap,
        IdxBox<
            ds::Heap,
            Either<
                ds::Heap,
                Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                ParseError<ds::Heap>,
            >,
        >,
        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
    > {
        type Intermediary = Maybe<ds::Heap, ParseMetadata<ds::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (ParseError<ds::Heap>, (ParseError<ds::Heap>, ())),
    > for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (ParseError<ds::Heap>, (ParseError<ds::Heap>, ())),
    > for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            ParseError<ds::Heap>,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        ),
    > for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            ParseError<ds::Heap>,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        ),
    > for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            ParseError<ds::Heap>,
            (
                Pair<
                    ds::Heap,
                    ds::RightOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                (),
            ),
        ),
    > for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            ParseError<ds::Heap>,
            (
                Pair<
                    ds::Heap,
                    ds::RightOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                (),
            ),
        ),
    > for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (ParseError<ds::Heap>, ()),
        ),
    > for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (ParseError<ds::Heap>, ()),
        ),
    > for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        ),
    > for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        ),
    > for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Pair<
                    ds::Heap,
                    ds::RightOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                (),
            ),
        ),
    > for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Pair<
                    ds::Heap,
                    ds::RightOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                (),
            ),
        ),
    > for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            (ParseError<ds::Heap>, ()),
        ),
    > for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            (ParseError<ds::Heap>, ()),
        ),
    > for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        ),
    > for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        ),
    > for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            (
                Pair<
                    ds::Heap,
                    ds::RightOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                (),
            ),
        ),
    > for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<
        ds::Heap,
        (
            Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            (
                Pair<
                    ds::Heap,
                    ds::RightOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                (),
            ),
        ),
    > for Pair<ds::Heap, ds::Plus, Maybe<ds::Heap, ParseMetadata<ds::Heap>>> {
        type Intermediary = ds::Plus;
        type Intermediaries = (
            Either<
                ds::Heap,
                Pair<
                    ds::Heap,
                    ds::LeftOperand,
                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                >,
                ParseError<ds::Heap>,
            >,
            (
                Either<
                    ds::Heap,
                    Pair<
                        ds::Heap,
                        ds::RightOperand,
                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                    >,
                    ParseError<ds::Heap>,
                >,
                (),
            ),
        );
    }
}
/// @generated by [term_specialized_impl_gen::gen_ccf_auto_impls]
pub mod ccf_auto_impls {
    term::auto_impl_ccf!(crate ::data_structure::Heap, crate ::data_structure::Plus);
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, crate ::data_structure::LeftOperand
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, crate ::data_structure::RightOperand
    );
    term::auto_impl_ccf!(crate ::data_structure::Heap, crate ::data_structure::F);
    term::auto_impl_ccf!(crate ::data_structure::Heap, crate ::data_structure::Sum);
    term::auto_impl_ccf!(crate ::data_structure::Heap, crate ::data_structure::Nat);
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::LeftOperand, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Pair < crate
        ::data_structure::Heap, crate ::data_structure::LeftOperand,
        tymetafuncspec_core::Maybe < crate ::data_structure::Heap,
        std_parse_metadata::ParseMetadata < crate ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, std_parse_error::ParseError < crate
        ::data_structure::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::RightOperand, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Pair < crate
        ::data_structure::Heap, crate ::data_structure::RightOperand,
        tymetafuncspec_core::Maybe < crate ::data_structure::Heap,
        std_parse_metadata::ParseMetadata < crate ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, crate ::data_structure::Nat, std_parse_error::ParseError
        < crate ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        tymetafuncspec_core::Set < crate ::data_structure::Heap,
        tymetafuncspec_core::Either < crate ::data_structure::Heap, crate
        ::data_structure::Nat, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Pair < crate
        ::data_structure::Heap, tymetafuncspec_core::Set < crate ::data_structure::Heap,
        tymetafuncspec_core::Either < crate ::data_structure::Heap, crate
        ::data_structure::Nat, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Set < crate
        ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, crate ::data_structure::Nat, std_parse_error::ParseError
        < crate ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        tymetafuncspec_core::BoundedNat < crate ::data_structure::Heap, >,
        tymetafuncspec_core::Maybe < crate ::data_structure::Heap,
        std_parse_metadata::ParseMetadata < crate ::data_structure::Heap, >, >, >,
        std_parse_error::ParseError < crate ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Pair < crate
        ::data_structure::Heap, tymetafuncspec_core::BoundedNat < crate
        ::data_structure::Heap, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::BoundedNat < crate
        ::data_structure::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        tymetafuncspec_core::IdxBox < crate ::data_structure::Heap,
        tymetafuncspec_core::Either < crate ::data_structure::Heap,
        tymetafuncspec_core::Pair < crate ::data_structure::Heap, crate
        ::data_structure::F, tymetafuncspec_core::Maybe < crate ::data_structure::Heap,
        std_parse_metadata::ParseMetadata < crate ::data_structure::Heap, >, >, >,
        std_parse_error::ParseError < crate ::data_structure::Heap, >, >, >,
        tymetafuncspec_core::Maybe < crate ::data_structure::Heap,
        std_parse_metadata::ParseMetadata < crate ::data_structure::Heap, >, >, >,
        std_parse_error::ParseError < crate ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Pair < crate
        ::data_structure::Heap, tymetafuncspec_core::IdxBox < crate
        ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::F, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::IdxBox < crate
        ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::F, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::F, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Pair < crate
        ::data_structure::Heap, crate ::data_structure::F, tymetafuncspec_core::Maybe <
        crate ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        tymetafuncspec_core::IdxBox < crate ::data_structure::Heap,
        tymetafuncspec_core::Either < crate ::data_structure::Heap,
        tymetafuncspec_core::Pair < crate ::data_structure::Heap, crate
        ::data_structure::Plus, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Pair < crate
        ::data_structure::Heap, tymetafuncspec_core::IdxBox < crate
        ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::Plus, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::IdxBox < crate
        ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::Plus, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::Plus, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Pair < crate
        ::data_structure::Heap, crate ::data_structure::Plus, tymetafuncspec_core::Maybe
        < crate ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::Sum, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Pair < crate
        ::data_structure::Heap, crate ::data_structure::Sum, tymetafuncspec_core::Maybe <
        crate ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >
    );
}
/// @generated by [term_specialized_impl_gen::gen_maps_tmf]
pub mod maps_tmf_impls {
    use term::CanonicallyConstructibleFrom;
    use crate::words as w;
    use crate::data_structure as ds;
    impl<TmfMonomorphization> term::MapsTmf<w::L, TmfMonomorphization> for ds::Heap
    where
        TmfMonomorphization: CanonicallyConstructibleFrom<
            Self,
            (TmfMonomorphization, ()),
        >,
    {
        type Tmf = TmfMonomorphization;
    }
}
