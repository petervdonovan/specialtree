#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [words::words_impls]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::Pair;
use tymetafuncspec_core::Maybe;
use tymetafuncspec_core::Either;
use tymetafuncspec_core::BoundedNat;
use std_parse_metadata::ParseMetadata;
use std_parse_error::ParseError;
use fib::words_mod_fib::sorts::Sum;
use fib::words_mod_fib::sorts::RightOperand;
use fib::words_mod_fib::sorts::Plus;
use fib::words_mod_fib::sorts::Nat;
use fib::words_mod_fib::sorts::LeftOperand;
use fib::words_mod_fib::sorts::F;
use fib::words_mod_fib::L;
use crate::term_specialized_cst_autoboxed_fib as tscaf;
impl words::Implements<tscaf::Heap, L>
for Either<
    tscaf::Heap,
    Pair<tscaf::Heap, tscaf::Plus, Maybe<tscaf::Heap, ParseMetadata<tscaf::Heap>>>,
    ParseError<tscaf::Heap>,
> {
    type LWord = Plus;
}
impl words::Implements<tscaf::Heap, L>
for Either<
    tscaf::Heap,
    Pair<
        tscaf::Heap,
        tscaf::LeftOperand,
        Maybe<tscaf::Heap, ParseMetadata<tscaf::Heap>>,
    >,
    ParseError<tscaf::Heap>,
> {
    type LWord = LeftOperand;
}
impl words::Implements<tscaf::Heap, L>
for Either<
    tscaf::Heap,
    Pair<
        tscaf::Heap,
        tscaf::RightOperand,
        Maybe<tscaf::Heap, ParseMetadata<tscaf::Heap>>,
    >,
    ParseError<tscaf::Heap>,
> {
    type LWord = RightOperand;
}
impl words::Implements<tscaf::Heap, L>
for Either<
    tscaf::Heap,
    Pair<tscaf::Heap, tscaf::F, Maybe<tscaf::Heap, ParseMetadata<tscaf::Heap>>>,
    ParseError<tscaf::Heap>,
> {
    type LWord = F;
}
impl words::Implements<tscaf::Heap, L>
for Either<
    tscaf::Heap,
    Pair<tscaf::Heap, tscaf::Sum, Maybe<tscaf::Heap, ParseMetadata<tscaf::Heap>>>,
    ParseError<tscaf::Heap>,
> {
    type LWord = Sum;
}
impl words::Implements<tscaf::Heap, L>
for Either<
    tscaf::Heap,
    Pair<tscaf::Heap, tscaf::Nat, Maybe<tscaf::Heap, ParseMetadata<tscaf::Heap>>>,
    ParseError<tscaf::Heap>,
> {
    type LWord = Nat;
}
impl words::Implements<tscaf::Heap, L>
for Either<
    tscaf::Heap,
    Pair<
        tscaf::Heap,
        Set<
            tscaf::Heap,
            Either<
                tscaf::Heap,
                Pair<
                    tscaf::Heap,
                    tscaf::Nat,
                    Maybe<tscaf::Heap, ParseMetadata<tscaf::Heap>>,
                >,
                ParseError<tscaf::Heap>,
            >,
        >,
        Maybe<tscaf::Heap, ParseMetadata<tscaf::Heap>>,
    >,
    ParseError<tscaf::Heap>,
> {
    type LWord = Set<(), Nat>;
}
impl words::Implements<tscaf::Heap, L>
for Either<
    tscaf::Heap,
    Pair<
        tscaf::Heap,
        BoundedNat<tscaf::Heap>,
        Maybe<tscaf::Heap, ParseMetadata<tscaf::Heap>>,
    >,
    ParseError<tscaf::Heap>,
> {
    type LWord = BoundedNat<()>;
}
