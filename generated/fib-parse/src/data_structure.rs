#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_gen::generate]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::Pair;
use tymetafuncspec_core::Maybe;
use tymetafuncspec_core::IdxBox;
use tymetafuncspec_core::Either;
use tymetafuncspec_core::BoundedNat;
use std_parse_metadata::ParseMetadata;
use std_parse_error::ParseError;
use crate::data_structure as ds;
use crate::data_structure::heap::set as dshs;
use crate::data_structure::heap::parse_metadata as dshpm;
use crate::data_structure::heap::parse_error as dshpe;
use crate::data_structure::heap::pair as dshp;
use crate::data_structure::heap::nat_lit as dshnl;
use crate::data_structure::heap::maybe as dshm;
use crate::data_structure::heap::idx_box as dshib;
use crate::data_structure::heap::either as dshe;
/// @generated by [term_specialized_gen::gen_heap]
#[derive(Default)]
pub struct Heap {
    either: dshe::Bak,
    pair: dshp::Bak,
    maybe: dshm::Bak,
    parse_metadata: dshpm::Bak,
    parse_error: dshpe::Bak,
    set: dshs::Bak,
    nat_lit: dshnl::Bak,
    idx_box: dshib::Bak,
}
/// @generated by [term_specialized_gen::gen_heap]
pub mod heap {
    use crate::data_structure::heap::set as dshs;
    use crate::data_structure::heap::parse_metadata as dshpm;
    use crate::data_structure::heap::parse_error as dshpe;
    use crate::data_structure::heap::pair as dshp;
    use crate::data_structure::heap::nat_lit as dshnl;
    use crate::data_structure::heap::maybe as dshm;
    use crate::data_structure::heap::idx_box as dshib;
    use crate::data_structure::heap::either as dshe;
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    #[derive(Default)]
    pub struct Bak {
        pub either: dshe::Bak,
        pub pair: dshp::Bak,
        pub maybe: dshm::Bak,
        pub parse_metadata: dshpm::Bak,
        pub parse_error: dshpe::Bak,
        pub set: dshs::Bak,
        pub nat_lit: dshnl::Bak,
        pub idx_box: dshib::Bak,
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod either {
        use crate::data_structure::heap::either::pair as dshep;
        use crate::data_structure::heap::either::nat as dshen;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub pair: dshep::Bak,
            pub nat: dshen::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod pair {
            use crate::data_structure::heap::either::pair::set as dsheps;
            use crate::data_structure::heap::either::pair::right_operand as dshepro;
            use crate::data_structure::heap::either::pair::plus as dshepp;
            use crate::data_structure::heap::either::pair::nat_lit as dshepnl;
            use crate::data_structure::heap::either::pair::left_operand as dsheplo;
            use crate::data_structure::heap::either::pair::idx_box as dshepib;
            use crate::data_structure::heap::either::pair::f as dshepf;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub left_operand: dsheplo::Bak,
                pub right_operand: dshepro::Bak,
                pub set: dsheps::Bak,
                pub nat_lit: dshepnl::Bak,
                pub idx_box: dshepib::Bak,
                pub f: dshepf::Bak,
                pub plus: dshepp::Bak,
                pub sum: crate::data_structure::heap::either::pair::sum::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod left_operand {
                use crate::data_structure::heap::either::pair::left_operand::maybe as dsheplom;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub maybe: dsheplom::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod maybe {
                    use crate::data_structure::heap::either::pair::left_operand::maybe::parse_metadata as dsheplompm;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub parse_metadata: dsheplompm::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod parse_metadata {
                        use crate::data_structure::heap::either::pair::left_operand::maybe::parse_metadata::parse_error as dsheplompmpe;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub parse_error: dsheplompmpe::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod parse_error {
                            use tymetafuncspec_core::Pair;
                            use tymetafuncspec_core::Maybe;
                            use tymetafuncspec_core::EitherHeapBak;
                            use std_parse_metadata::ParseMetadata;
                            use std_parse_error::ParseError;
                            use crate::data_structure as ds;
                            /// @generated by [term_specialized_gen::gen_heapbak_module]
                            #[derive(Default)]
                            pub struct Bak(
                                pub EitherHeapBak<
                                    ds::Heap,
                                    Pair<
                                        ds::Heap,
                                        ds::LeftOperand,
                                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                    >,
                                    ParseError<ds::Heap>,
                                >,
                            );
                        }
                    }
                }
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod right_operand {
                use crate::data_structure::heap::either::pair::right_operand::maybe as dsheprom;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub maybe: dsheprom::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod maybe {
                    use crate::data_structure::heap::either::pair::right_operand::maybe::parse_metadata as dsheprompm;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub parse_metadata: dsheprompm::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod parse_metadata {
                        use crate::data_structure::heap::either::pair::right_operand::maybe::parse_metadata::parse_error as dsheprompmpe;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub parse_error: dsheprompmpe::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod parse_error {
                            use tymetafuncspec_core::Pair;
                            use tymetafuncspec_core::Maybe;
                            use tymetafuncspec_core::EitherHeapBak;
                            use std_parse_metadata::ParseMetadata;
                            use std_parse_error::ParseError;
                            use crate::data_structure as ds;
                            /// @generated by [term_specialized_gen::gen_heapbak_module]
                            #[derive(Default)]
                            pub struct Bak(
                                pub EitherHeapBak<
                                    ds::Heap,
                                    Pair<
                                        ds::Heap,
                                        ds::RightOperand,
                                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                    >,
                                    ParseError<ds::Heap>,
                                >,
                            );
                        }
                    }
                }
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod set {
                use crate::data_structure::heap::either::pair::set::either as dshepse;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub either: dshepse::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod either {
                    use crate::data_structure::heap::either::pair::set::either::nat as dshepsen;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub nat: dshepsen::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod nat {
                        use crate::data_structure::heap::either::pair::set::either::nat::parse_error as dshepsenpe;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub parse_error: dshepsenpe::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod parse_error {
                            use crate::data_structure::heap::either::pair::set::either::nat::parse_error::maybe as dshepsenpem;
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            #[derive(Default)]
                            pub struct Bak {
                                pub maybe: dshepsenpem::Bak,
                            }
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            pub mod maybe {
                                use crate::data_structure::heap::either::pair::set::either::nat::parse_error::maybe::parse_metadata as dshepsenpempm;
                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                #[derive(Default)]
                                pub struct Bak {
                                    pub parse_metadata: dshepsenpempm::Bak,
                                }
                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                pub mod parse_metadata {
                                    use crate::data_structure::heap::either::pair::set::either::nat::parse_error::maybe::parse_metadata::parse_error as dshepsenpempmpe;
                                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                    #[derive(Default)]
                                    pub struct Bak {
                                        pub parse_error: dshepsenpempmpe::Bak,
                                    }
                                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                    pub mod parse_error {
                                        use tymetafuncspec_core::Set;
                                        use tymetafuncspec_core::Pair;
                                        use tymetafuncspec_core::Maybe;
                                        use tymetafuncspec_core::EitherHeapBak;
                                        use tymetafuncspec_core::Either;
                                        use std_parse_metadata::ParseMetadata;
                                        use std_parse_error::ParseError;
                                        use crate::data_structure as ds;
                                        /// @generated by [term_specialized_gen::gen_heapbak_module]
                                        #[derive(Default)]
                                        pub struct Bak(
                                            pub EitherHeapBak<
                                                ds::Heap,
                                                Pair<
                                                    ds::Heap,
                                                    Set<
                                                        ds::Heap,
                                                        Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
                                                    >,
                                                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                                >,
                                                ParseError<ds::Heap>,
                                            >,
                                        );
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod nat_lit {
                use crate::data_structure::heap::either::pair::nat_lit::maybe as dshepnlm;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub maybe: dshepnlm::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod maybe {
                    use crate::data_structure::heap::either::pair::nat_lit::maybe::parse_metadata as dshepnlmpm;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub parse_metadata: dshepnlmpm::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod parse_metadata {
                        use crate::data_structure::heap::either::pair::nat_lit::maybe::parse_metadata::parse_error as dshepnlmpmpe;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub parse_error: dshepnlmpmpe::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod parse_error {
                            use tymetafuncspec_core::Pair;
                            use tymetafuncspec_core::Maybe;
                            use tymetafuncspec_core::EitherHeapBak;
                            use tymetafuncspec_core::BoundedNat;
                            use std_parse_metadata::ParseMetadata;
                            use std_parse_error::ParseError;
                            use crate::data_structure as ds;
                            /// @generated by [term_specialized_gen::gen_heapbak_module]
                            #[derive(Default)]
                            pub struct Bak(
                                pub EitherHeapBak<
                                    ds::Heap,
                                    Pair<
                                        ds::Heap,
                                        BoundedNat<ds::Heap>,
                                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                    >,
                                    ParseError<ds::Heap>,
                                >,
                            );
                        }
                    }
                }
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod idx_box {
                use crate::data_structure::heap::either::pair::idx_box::either as dshepibe;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub either: dshepibe::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod either {
                    use crate::data_structure::heap::either::pair::idx_box::either::pair as dshepibep;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub pair: dshepibep::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod pair {
                        use crate::data_structure::heap::either::pair::idx_box::either::pair::plus as dshepibepp;
                        use crate::data_structure::heap::either::pair::idx_box::either::pair::f as dshepibepf;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub f: dshepibepf::Bak,
                            pub plus: dshepibepp::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod f {
                            use crate::data_structure::heap::either::pair::idx_box::either::pair::f::maybe as dshepibepfm;
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            #[derive(Default)]
                            pub struct Bak {
                                pub maybe: dshepibepfm::Bak,
                            }
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            pub mod maybe {
                                use crate::data_structure::heap::either::pair::idx_box::either::pair::f::maybe::parse_metadata as dshepibepfmpm;
                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                #[derive(Default)]
                                pub struct Bak {
                                    pub parse_metadata: dshepibepfmpm::Bak,
                                }
                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                pub mod parse_metadata {
                                    use crate::data_structure::heap::either::pair::idx_box::either::pair::f::maybe::parse_metadata::parse_error as dshepibepfmpmpe;
                                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                    #[derive(Default)]
                                    pub struct Bak {
                                        pub parse_error: dshepibepfmpmpe::Bak,
                                    }
                                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                    pub mod parse_error {
                                        use crate::data_structure::heap::either::pair::idx_box::either::pair::f::maybe::parse_metadata::parse_error::maybe as dshepibepfmpmpem;
                                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                        #[derive(Default)]
                                        pub struct Bak {
                                            pub maybe: dshepibepfmpmpem::Bak,
                                        }
                                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                        pub mod maybe {
                                            use crate::data_structure::heap::either::pair::idx_box::either::pair::f::maybe::parse_metadata::parse_error::maybe::parse_metadata as dshepibepfmpmpempm;
                                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                            #[derive(Default)]
                                            pub struct Bak {
                                                pub parse_metadata: dshepibepfmpmpempm::Bak,
                                            }
                                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                            pub mod parse_metadata {
                                                use crate::data_structure::heap::either::pair::idx_box::either::pair::f::maybe::parse_metadata::parse_error::maybe::parse_metadata::parse_error as dshepibepfmpmpempmpe;
                                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                                #[derive(Default)]
                                                pub struct Bak {
                                                    pub parse_error: dshepibepfmpmpempmpe::Bak,
                                                }
                                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                                pub mod parse_error {
                                                    use tymetafuncspec_core::Pair;
                                                    use tymetafuncspec_core::Maybe;
                                                    use tymetafuncspec_core::IdxBox;
                                                    use tymetafuncspec_core::EitherHeapBak;
                                                    use tymetafuncspec_core::Either;
                                                    use std_parse_metadata::ParseMetadata;
                                                    use std_parse_error::ParseError;
                                                    use crate::data_structure as ds;
                                                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                                                    #[derive(Default)]
                                                    pub struct Bak(
                                                        pub EitherHeapBak<
                                                            ds::Heap,
                                                            Pair<
                                                                ds::Heap,
                                                                IdxBox<
                                                                    ds::Heap,
                                                                    Either<
                                                                        ds::Heap,
                                                                        Pair<
                                                                            ds::Heap,
                                                                            ds::F,
                                                                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                                                        >,
                                                                        ParseError<ds::Heap>,
                                                                    >,
                                                                >,
                                                                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                                            >,
                                                            ParseError<ds::Heap>,
                                                        >,
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod plus {
                            use crate::data_structure::heap::either::pair::idx_box::either::pair::plus::maybe as dshepibeppm;
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            #[derive(Default)]
                            pub struct Bak {
                                pub maybe: dshepibeppm::Bak,
                            }
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            pub mod maybe {
                                use crate::data_structure::heap::either::pair::idx_box::either::pair::plus::maybe::parse_metadata as dshepibeppmpm;
                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                #[derive(Default)]
                                pub struct Bak {
                                    pub parse_metadata: dshepibeppmpm::Bak,
                                }
                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                pub mod parse_metadata {
                                    use crate::data_structure::heap::either::pair::idx_box::either::pair::plus::maybe::parse_metadata::parse_error as dshepibeppmpmpe;
                                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                    #[derive(Default)]
                                    pub struct Bak {
                                        pub parse_error: dshepibeppmpmpe::Bak,
                                    }
                                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                    pub mod parse_error {
                                        use crate::data_structure::heap::either::pair::idx_box::either::pair::plus::maybe::parse_metadata::parse_error::maybe as dshepibeppmpmpem;
                                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                        #[derive(Default)]
                                        pub struct Bak {
                                            pub maybe: dshepibeppmpmpem::Bak,
                                        }
                                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                        pub mod maybe {
                                            use crate::data_structure::heap::either::pair::idx_box::either::pair::plus::maybe::parse_metadata::parse_error::maybe::parse_metadata as dshepibeppmpmpempm;
                                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                            #[derive(Default)]
                                            pub struct Bak {
                                                pub parse_metadata: dshepibeppmpmpempm::Bak,
                                            }
                                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                            pub mod parse_metadata {
                                                use crate::data_structure::heap::either::pair::idx_box::either::pair::plus::maybe::parse_metadata::parse_error::maybe::parse_metadata::parse_error as dshepibeppmpmpempmpe;
                                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                                #[derive(Default)]
                                                pub struct Bak {
                                                    pub parse_error: dshepibeppmpmpempmpe::Bak,
                                                }
                                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                                pub mod parse_error {
                                                    use tymetafuncspec_core::Pair;
                                                    use tymetafuncspec_core::Maybe;
                                                    use tymetafuncspec_core::IdxBox;
                                                    use tymetafuncspec_core::EitherHeapBak;
                                                    use tymetafuncspec_core::Either;
                                                    use std_parse_metadata::ParseMetadata;
                                                    use std_parse_error::ParseError;
                                                    use crate::data_structure as ds;
                                                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                                                    #[derive(Default)]
                                                    pub struct Bak(
                                                        pub EitherHeapBak<
                                                            ds::Heap,
                                                            Pair<
                                                                ds::Heap,
                                                                IdxBox<
                                                                    ds::Heap,
                                                                    Either<
                                                                        ds::Heap,
                                                                        Pair<
                                                                            ds::Heap,
                                                                            ds::Plus,
                                                                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                                                        >,
                                                                        ParseError<ds::Heap>,
                                                                    >,
                                                                >,
                                                                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                                            >,
                                                            ParseError<ds::Heap>,
                                                        >,
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod f {
                use crate::data_structure::heap::either::pair::f::maybe as dshepfm;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub maybe: dshepfm::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod maybe {
                    use crate::data_structure::heap::either::pair::f::maybe::parse_metadata as dshepfmpm;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub parse_metadata: dshepfmpm::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod parse_metadata {
                        use crate::data_structure::heap::either::pair::f::maybe::parse_metadata::parse_error as dshepfmpmpe;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub parse_error: dshepfmpmpe::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod parse_error {
                            use tymetafuncspec_core::Pair;
                            use tymetafuncspec_core::Maybe;
                            use tymetafuncspec_core::EitherHeapBak;
                            use std_parse_metadata::ParseMetadata;
                            use std_parse_error::ParseError;
                            use crate::data_structure as ds;
                            /// @generated by [term_specialized_gen::gen_heapbak_module]
                            #[derive(Default)]
                            pub struct Bak(
                                pub EitherHeapBak<
                                    ds::Heap,
                                    Pair<
                                        ds::Heap,
                                        ds::F,
                                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                    >,
                                    ParseError<ds::Heap>,
                                >,
                            );
                        }
                    }
                }
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod plus {
                use crate::data_structure::heap::either::pair::plus::maybe as dsheppm;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub maybe: dsheppm::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod maybe {
                    use crate::data_structure::heap::either::pair::plus::maybe::parse_metadata as dsheppmpm;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub parse_metadata: dsheppmpm::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod parse_metadata {
                        use crate::data_structure::heap::either::pair::plus::maybe::parse_metadata::parse_error as dsheppmpmpe;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub parse_error: dsheppmpmpe::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod parse_error {
                            use tymetafuncspec_core::Pair;
                            use tymetafuncspec_core::Maybe;
                            use tymetafuncspec_core::EitherHeapBak;
                            use std_parse_metadata::ParseMetadata;
                            use std_parse_error::ParseError;
                            use crate::data_structure as ds;
                            /// @generated by [term_specialized_gen::gen_heapbak_module]
                            #[derive(Default)]
                            pub struct Bak(
                                pub EitherHeapBak<
                                    ds::Heap,
                                    Pair<
                                        ds::Heap,
                                        ds::Plus,
                                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                    >,
                                    ParseError<ds::Heap>,
                                >,
                            );
                        }
                    }
                }
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod sum {
                use crate::data_structure::heap::either::pair::sum::maybe as dshepsm;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub maybe: dshepsm::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod maybe {
                    use crate::data_structure::heap::either::pair::sum::maybe::parse_metadata as dshepsmpm;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub parse_metadata: dshepsmpm::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod parse_metadata {
                        use crate::data_structure::heap::either::pair::sum::maybe::parse_metadata::parse_error as dshepsmpmpe;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub parse_error: dshepsmpmpe::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod parse_error {
                            use tymetafuncspec_core::Pair;
                            use tymetafuncspec_core::Maybe;
                            use tymetafuncspec_core::EitherHeapBak;
                            use std_parse_metadata::ParseMetadata;
                            use std_parse_error::ParseError;
                            use crate::data_structure as ds;
                            /// @generated by [term_specialized_gen::gen_heapbak_module]
                            #[derive(Default)]
                            pub struct Bak(
                                pub EitherHeapBak<
                                    ds::Heap,
                                    Pair<
                                        ds::Heap,
                                        ds::Sum,
                                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                    >,
                                    ParseError<ds::Heap>,
                                >,
                            );
                        }
                    }
                }
            }
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod nat {
            use crate::data_structure::heap::either::nat::parse_error as dshenpe;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub parse_error: dshenpe::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod parse_error {
                use tymetafuncspec_core::EitherHeapBak;
                use std_parse_error::ParseError;
                use crate::data_structure as ds;
                /// @generated by [term_specialized_gen::gen_heapbak_module]
                #[derive(Default)]
                pub struct Bak(
                    pub EitherHeapBak<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
                );
            }
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod pair {
        use crate::data_structure::heap::pair::set as dshps;
        use crate::data_structure::heap::pair::right_operand as dshpro;
        use crate::data_structure::heap::pair::plus as dshpp;
        use crate::data_structure::heap::pair::nat_lit as dshpnl;
        use crate::data_structure::heap::pair::left_operand as dshplo;
        use crate::data_structure::heap::pair::idx_box as dshpib;
        use crate::data_structure::heap::pair::f as dshpf;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub left_operand: dshplo::Bak,
            pub right_operand: dshpro::Bak,
            pub set: dshps::Bak,
            pub nat_lit: dshpnl::Bak,
            pub idx_box: dshpib::Bak,
            pub f: dshpf::Bak,
            pub plus: dshpp::Bak,
            pub sum: crate::data_structure::heap::pair::sum::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod left_operand {
            use crate::data_structure::heap::pair::left_operand::maybe as dshplom;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub maybe: dshplom::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod maybe {
                use crate::data_structure::heap::pair::left_operand::maybe::parse_metadata as dshplompm;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub parse_metadata: dshplompm::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod parse_metadata {
                    use tymetafuncspec_core::PairHeapBak;
                    use tymetafuncspec_core::Maybe;
                    use std_parse_metadata::ParseMetadata;
                    use crate::data_structure as ds;
                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                    #[derive(Default)]
                    pub struct Bak(
                        pub PairHeapBak<
                            ds::Heap,
                            ds::LeftOperand,
                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                        >,
                    );
                }
            }
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod right_operand {
            use crate::data_structure::heap::pair::right_operand::maybe as dshprom;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub maybe: dshprom::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod maybe {
                use crate::data_structure::heap::pair::right_operand::maybe::parse_metadata as dshprompm;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub parse_metadata: dshprompm::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod parse_metadata {
                    use tymetafuncspec_core::PairHeapBak;
                    use tymetafuncspec_core::Maybe;
                    use std_parse_metadata::ParseMetadata;
                    use crate::data_structure as ds;
                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                    #[derive(Default)]
                    pub struct Bak(
                        pub PairHeapBak<
                            ds::Heap,
                            ds::RightOperand,
                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                        >,
                    );
                }
            }
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod set {
            use crate::data_structure::heap::pair::set::either as dshpse;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub either: dshpse::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod either {
                use crate::data_structure::heap::pair::set::either::nat as dshpsen;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub nat: dshpsen::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod nat {
                    use crate::data_structure::heap::pair::set::either::nat::parse_error as dshpsenpe;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub parse_error: dshpsenpe::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod parse_error {
                        use crate::data_structure::heap::pair::set::either::nat::parse_error::maybe as dshpsenpem;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub maybe: dshpsenpem::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod maybe {
                            use crate::data_structure::heap::pair::set::either::nat::parse_error::maybe::parse_metadata as dshpsenpempm;
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            #[derive(Default)]
                            pub struct Bak {
                                pub parse_metadata: dshpsenpempm::Bak,
                            }
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            pub mod parse_metadata {
                                use tymetafuncspec_core::Set;
                                use tymetafuncspec_core::PairHeapBak;
                                use tymetafuncspec_core::Maybe;
                                use tymetafuncspec_core::Either;
                                use std_parse_metadata::ParseMetadata;
                                use std_parse_error::ParseError;
                                use crate::data_structure as ds;
                                /// @generated by [term_specialized_gen::gen_heapbak_module]
                                #[derive(Default)]
                                pub struct Bak(
                                    pub PairHeapBak<
                                        ds::Heap,
                                        Set<
                                            ds::Heap,
                                            Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
                                        >,
                                        Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                    >,
                                );
                            }
                        }
                    }
                }
            }
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod nat_lit {
            use crate::data_structure::heap::pair::nat_lit::maybe as dshpnlm;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub maybe: dshpnlm::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod maybe {
                use crate::data_structure::heap::pair::nat_lit::maybe::parse_metadata as dshpnlmpm;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub parse_metadata: dshpnlmpm::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod parse_metadata {
                    use tymetafuncspec_core::PairHeapBak;
                    use tymetafuncspec_core::Maybe;
                    use tymetafuncspec_core::BoundedNat;
                    use std_parse_metadata::ParseMetadata;
                    use crate::data_structure as ds;
                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                    #[derive(Default)]
                    pub struct Bak(
                        pub PairHeapBak<
                            ds::Heap,
                            BoundedNat<ds::Heap>,
                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                        >,
                    );
                }
            }
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod idx_box {
            use crate::data_structure::heap::pair::idx_box::either as dshpibe;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub either: dshpibe::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod either {
                use crate::data_structure::heap::pair::idx_box::either::pair as dshpibep;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub pair: dshpibep::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod pair {
                    use crate::data_structure::heap::pair::idx_box::either::pair::plus as dshpibepp;
                    use crate::data_structure::heap::pair::idx_box::either::pair::f as dshpibepf;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub f: dshpibepf::Bak,
                        pub plus: dshpibepp::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod f {
                        use crate::data_structure::heap::pair::idx_box::either::pair::f::maybe as dshpibepfm;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub maybe: dshpibepfm::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod maybe {
                            use crate::data_structure::heap::pair::idx_box::either::pair::f::maybe::parse_metadata as dshpibepfmpm;
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            #[derive(Default)]
                            pub struct Bak {
                                pub parse_metadata: dshpibepfmpm::Bak,
                            }
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            pub mod parse_metadata {
                                use crate::data_structure::heap::pair::idx_box::either::pair::f::maybe::parse_metadata::parse_error as dshpibepfmpmpe;
                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                #[derive(Default)]
                                pub struct Bak {
                                    pub parse_error: dshpibepfmpmpe::Bak,
                                }
                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                pub mod parse_error {
                                    use crate::data_structure::heap::pair::idx_box::either::pair::f::maybe::parse_metadata::parse_error::maybe as dshpibepfmpmpem;
                                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                    #[derive(Default)]
                                    pub struct Bak {
                                        pub maybe: dshpibepfmpmpem::Bak,
                                    }
                                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                    pub mod maybe {
                                        use crate::data_structure::heap::pair::idx_box::either::pair::f::maybe::parse_metadata::parse_error::maybe::parse_metadata as dshpibepfmpmpempm;
                                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                        #[derive(Default)]
                                        pub struct Bak {
                                            pub parse_metadata: dshpibepfmpmpempm::Bak,
                                        }
                                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                        pub mod parse_metadata {
                                            use tymetafuncspec_core::PairHeapBak;
                                            use tymetafuncspec_core::Pair;
                                            use tymetafuncspec_core::Maybe;
                                            use tymetafuncspec_core::IdxBox;
                                            use tymetafuncspec_core::Either;
                                            use std_parse_metadata::ParseMetadata;
                                            use std_parse_error::ParseError;
                                            use crate::data_structure as ds;
                                            /// @generated by [term_specialized_gen::gen_heapbak_module]
                                            #[derive(Default)]
                                            pub struct Bak(
                                                pub PairHeapBak<
                                                    ds::Heap,
                                                    IdxBox<
                                                        ds::Heap,
                                                        Either<
                                                            ds::Heap,
                                                            Pair<
                                                                ds::Heap,
                                                                ds::F,
                                                                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                                            >,
                                                            ParseError<ds::Heap>,
                                                        >,
                                                    >,
                                                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                                >,
                                            );
                                        }
                                    }
                                }
                            }
                        }
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod plus {
                        use crate::data_structure::heap::pair::idx_box::either::pair::plus::maybe as dshpibeppm;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub maybe: dshpibeppm::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod maybe {
                            use crate::data_structure::heap::pair::idx_box::either::pair::plus::maybe::parse_metadata as dshpibeppmpm;
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            #[derive(Default)]
                            pub struct Bak {
                                pub parse_metadata: dshpibeppmpm::Bak,
                            }
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            pub mod parse_metadata {
                                use crate::data_structure::heap::pair::idx_box::either::pair::plus::maybe::parse_metadata::parse_error as dshpibeppmpmpe;
                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                #[derive(Default)]
                                pub struct Bak {
                                    pub parse_error: dshpibeppmpmpe::Bak,
                                }
                                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                pub mod parse_error {
                                    use crate::data_structure::heap::pair::idx_box::either::pair::plus::maybe::parse_metadata::parse_error::maybe as dshpibeppmpmpem;
                                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                    #[derive(Default)]
                                    pub struct Bak {
                                        pub maybe: dshpibeppmpmpem::Bak,
                                    }
                                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                    pub mod maybe {
                                        use crate::data_structure::heap::pair::idx_box::either::pair::plus::maybe::parse_metadata::parse_error::maybe::parse_metadata as dshpibeppmpmpempm;
                                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                        #[derive(Default)]
                                        pub struct Bak {
                                            pub parse_metadata: dshpibeppmpmpempm::Bak,
                                        }
                                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                                        pub mod parse_metadata {
                                            use tymetafuncspec_core::PairHeapBak;
                                            use tymetafuncspec_core::Pair;
                                            use tymetafuncspec_core::Maybe;
                                            use tymetafuncspec_core::IdxBox;
                                            use tymetafuncspec_core::Either;
                                            use std_parse_metadata::ParseMetadata;
                                            use std_parse_error::ParseError;
                                            use crate::data_structure as ds;
                                            /// @generated by [term_specialized_gen::gen_heapbak_module]
                                            #[derive(Default)]
                                            pub struct Bak(
                                                pub PairHeapBak<
                                                    ds::Heap,
                                                    IdxBox<
                                                        ds::Heap,
                                                        Either<
                                                            ds::Heap,
                                                            Pair<
                                                                ds::Heap,
                                                                ds::Plus,
                                                                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                                            >,
                                                            ParseError<ds::Heap>,
                                                        >,
                                                    >,
                                                    Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                                >,
                                            );
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod f {
            use crate::data_structure::heap::pair::f::maybe as dshpfm;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub maybe: dshpfm::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod maybe {
                use crate::data_structure::heap::pair::f::maybe::parse_metadata as dshpfmpm;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub parse_metadata: dshpfmpm::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod parse_metadata {
                    use tymetafuncspec_core::PairHeapBak;
                    use tymetafuncspec_core::Maybe;
                    use std_parse_metadata::ParseMetadata;
                    use crate::data_structure as ds;
                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                    #[derive(Default)]
                    pub struct Bak(
                        pub PairHeapBak<
                            ds::Heap,
                            ds::F,
                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                        >,
                    );
                }
            }
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod plus {
            use crate::data_structure::heap::pair::plus::maybe as dshppm;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub maybe: dshppm::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod maybe {
                use crate::data_structure::heap::pair::plus::maybe::parse_metadata as dshppmpm;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub parse_metadata: dshppmpm::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod parse_metadata {
                    use tymetafuncspec_core::PairHeapBak;
                    use tymetafuncspec_core::Maybe;
                    use std_parse_metadata::ParseMetadata;
                    use crate::data_structure as ds;
                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                    #[derive(Default)]
                    pub struct Bak(
                        pub PairHeapBak<
                            ds::Heap,
                            ds::Plus,
                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                        >,
                    );
                }
            }
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod sum {
            use crate::data_structure::heap::pair::sum::maybe as dshpsm;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub maybe: dshpsm::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod maybe {
                use crate::data_structure::heap::pair::sum::maybe::parse_metadata as dshpsmpm;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub parse_metadata: dshpsmpm::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod parse_metadata {
                    use tymetafuncspec_core::PairHeapBak;
                    use tymetafuncspec_core::Maybe;
                    use std_parse_metadata::ParseMetadata;
                    use crate::data_structure as ds;
                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                    #[derive(Default)]
                    pub struct Bak(
                        pub PairHeapBak<
                            ds::Heap,
                            ds::Sum,
                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                        >,
                    );
                }
            }
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod maybe {
        use crate::data_structure::heap::maybe::parse_metadata as dshmpm;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub parse_metadata: dshmpm::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod parse_metadata {
            use tymetafuncspec_core::MaybeHeapBak;
            use std_parse_metadata::ParseMetadata;
            use crate::data_structure as ds;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub MaybeHeapBak<ds::Heap, ParseMetadata<ds::Heap>>);
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod parse_metadata {
        use std_parse_metadata::ParseMetadataBak;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_gen::gen_heapbak_module]
        #[derive(Default)]
        pub struct Bak(pub ParseMetadataBak<ds::Heap>);
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod parse_error {
        use std_parse_error::ParseErrorBak;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_gen::gen_heapbak_module]
        #[derive(Default)]
        pub struct Bak(pub ParseErrorBak<ds::Heap>);
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod set {
        use crate::data_structure::heap::set::either as dshse;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub either: dshse::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod either {
            use crate::data_structure::heap::set::either::nat as dshsen;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub nat: dshsen::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod nat {
                use crate::data_structure::heap::set::either::nat::parse_error as dshsenpe;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub parse_error: dshsenpe::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod parse_error {
                    use tymetafuncspec_core::SetHeapBak;
                    use tymetafuncspec_core::Either;
                    use std_parse_error::ParseError;
                    use crate::data_structure as ds;
                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                    #[derive(Default)]
                    pub struct Bak(
                        pub SetHeapBak<
                            ds::Heap,
                            Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
                        >,
                    );
                }
            }
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod nat_lit {
        use tymetafuncspec_core::BoundedNatHeapBak;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_gen::gen_heapbak_module]
        #[derive(Default)]
        pub struct Bak(pub BoundedNatHeapBak<ds::Heap>);
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod idx_box {
        use crate::data_structure::heap::idx_box::either as dshibe;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub either: dshibe::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod either {
            use crate::data_structure::heap::idx_box::either::pair as dshibep;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub pair: dshibep::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod pair {
                use crate::data_structure::heap::idx_box::either::pair::plus as dshibepp;
                use crate::data_structure::heap::idx_box::either::pair::f as dshibepf;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub f: dshibepf::Bak,
                    pub plus: dshibepp::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod f {
                    use crate::data_structure::heap::idx_box::either::pair::f::maybe as dshibepfm;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub maybe: dshibepfm::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod maybe {
                        use crate::data_structure::heap::idx_box::either::pair::f::maybe::parse_metadata as dshibepfmpm;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub parse_metadata: dshibepfmpm::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod parse_metadata {
                            use crate::data_structure::heap::idx_box::either::pair::f::maybe::parse_metadata::parse_error as dshibepfmpmpe;
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            #[derive(Default)]
                            pub struct Bak {
                                pub parse_error: dshibepfmpmpe::Bak,
                            }
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            pub mod parse_error {
                                use tymetafuncspec_core::Pair;
                                use tymetafuncspec_core::Maybe;
                                use tymetafuncspec_core::IdxBoxHeapBak;
                                use tymetafuncspec_core::Either;
                                use std_parse_metadata::ParseMetadata;
                                use std_parse_error::ParseError;
                                use crate::data_structure as ds;
                                /// @generated by [term_specialized_gen::gen_heapbak_module]
                                #[derive(Default)]
                                pub struct Bak(
                                    pub IdxBoxHeapBak<
                                        ds::Heap,
                                        Either<
                                            ds::Heap,
                                            Pair<
                                                ds::Heap,
                                                ds::F,
                                                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                            >,
                                            ParseError<ds::Heap>,
                                        >,
                                    >,
                                );
                            }
                        }
                    }
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod plus {
                    use crate::data_structure::heap::idx_box::either::pair::plus::maybe as dshibeppm;
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    #[derive(Default)]
                    pub struct Bak {
                        pub maybe: dshibeppm::Bak,
                    }
                    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                    pub mod maybe {
                        use crate::data_structure::heap::idx_box::either::pair::plus::maybe::parse_metadata as dshibeppmpm;
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        #[derive(Default)]
                        pub struct Bak {
                            pub parse_metadata: dshibeppmpm::Bak,
                        }
                        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                        pub mod parse_metadata {
                            use crate::data_structure::heap::idx_box::either::pair::plus::maybe::parse_metadata::parse_error as dshibeppmpmpe;
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            #[derive(Default)]
                            pub struct Bak {
                                pub parse_error: dshibeppmpmpe::Bak,
                            }
                            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                            pub mod parse_error {
                                use tymetafuncspec_core::Pair;
                                use tymetafuncspec_core::Maybe;
                                use tymetafuncspec_core::IdxBoxHeapBak;
                                use tymetafuncspec_core::Either;
                                use std_parse_metadata::ParseMetadata;
                                use std_parse_error::ParseError;
                                use crate::data_structure as ds;
                                /// @generated by [term_specialized_gen::gen_heapbak_module]
                                #[derive(Default)]
                                pub struct Bak(
                                    pub IdxBoxHeapBak<
                                        ds::Heap,
                                        Either<
                                            ds::Heap,
                                            Pair<
                                                ds::Heap,
                                                ds::Plus,
                                                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                                            >,
                                            ParseError<ds::Heap>,
                                        >,
                                    >,
                                );
                            }
                        }
                    }
                }
            }
        }
    }
}
/// @generated by [term_specialized_gen::gen_heap]
pub mod superheap {
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::EitherHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::LeftOperand, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, > >; either pair left_operand maybe parse_metadata
        parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::PairHeapBak < crate
        ::data_structure::Heap, crate ::data_structure::LeftOperand,
        tymetafuncspec_core::Maybe < crate ::data_structure::Heap,
        std_parse_metadata::ParseMetadata < crate ::data_structure::Heap, >, > >; pair
        left_operand maybe parse_metadata
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::MaybeHeapBak < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, > >; maybe parse_metadata
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; std_parse_metadata::ParseMetadataBak < crate
        ::data_structure::Heap, >; parse_metadata
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; std_parse_error::ParseErrorBak < crate
        ::data_structure::Heap, >; parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::EitherHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::RightOperand, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, > >; either pair right_operand maybe parse_metadata
        parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::PairHeapBak < crate
        ::data_structure::Heap, crate ::data_structure::RightOperand,
        tymetafuncspec_core::Maybe < crate ::data_structure::Heap,
        std_parse_metadata::ParseMetadata < crate ::data_structure::Heap, >, > >; pair
        right_operand maybe parse_metadata
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::EitherHeapBak < crate
        ::data_structure::Heap, crate ::data_structure::Nat, std_parse_error::ParseError
        < crate ::data_structure::Heap, > >; either nat parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::EitherHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        tymetafuncspec_core::Set < crate ::data_structure::Heap,
        tymetafuncspec_core::Either < crate ::data_structure::Heap, crate
        ::data_structure::Nat, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, > >; either pair set either nat parse_error maybe
        parse_metadata parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::PairHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Set < crate ::data_structure::Heap,
        tymetafuncspec_core::Either < crate ::data_structure::Heap, crate
        ::data_structure::Nat, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, > >; pair set either nat parse_error maybe
        parse_metadata
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::SetHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, crate ::data_structure::Nat, std_parse_error::ParseError
        < crate ::data_structure::Heap, >, > >; set either nat parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::EitherHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        tymetafuncspec_core::BoundedNat < crate ::data_structure::Heap, >,
        tymetafuncspec_core::Maybe < crate ::data_structure::Heap,
        std_parse_metadata::ParseMetadata < crate ::data_structure::Heap, >, >, >,
        std_parse_error::ParseError < crate ::data_structure::Heap, > >; either pair
        nat_lit maybe parse_metadata parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::PairHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::BoundedNat < crate
        ::data_structure::Heap, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, > >; pair nat_lit maybe parse_metadata
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::BoundedNatHeapBak < crate
        ::data_structure::Heap, >; nat_lit
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::EitherHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        tymetafuncspec_core::IdxBox < crate ::data_structure::Heap,
        tymetafuncspec_core::Either < crate ::data_structure::Heap,
        tymetafuncspec_core::Pair < crate ::data_structure::Heap, crate
        ::data_structure::F, tymetafuncspec_core::Maybe < crate ::data_structure::Heap,
        std_parse_metadata::ParseMetadata < crate ::data_structure::Heap, >, >, >,
        std_parse_error::ParseError < crate ::data_structure::Heap, >, >, >,
        tymetafuncspec_core::Maybe < crate ::data_structure::Heap,
        std_parse_metadata::ParseMetadata < crate ::data_structure::Heap, >, >, >,
        std_parse_error::ParseError < crate ::data_structure::Heap, > >; either pair
        idx_box either pair f maybe parse_metadata parse_error maybe parse_metadata
        parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::PairHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::IdxBox < crate
        ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::F, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, > >; pair idx_box either pair f maybe parse_metadata
        parse_error maybe parse_metadata
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::IdxBoxHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::F, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, > >; idx_box either pair f maybe parse_metadata
        parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::EitherHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::F, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, > >; either pair f maybe parse_metadata parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::PairHeapBak < crate
        ::data_structure::Heap, crate ::data_structure::F, tymetafuncspec_core::Maybe <
        crate ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, > >; pair f maybe parse_metadata
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::EitherHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        tymetafuncspec_core::IdxBox < crate ::data_structure::Heap,
        tymetafuncspec_core::Either < crate ::data_structure::Heap,
        tymetafuncspec_core::Pair < crate ::data_structure::Heap, crate
        ::data_structure::Plus, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, > >; either pair idx_box either pair plus maybe
        parse_metadata parse_error maybe parse_metadata parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::PairHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::IdxBox < crate
        ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::Plus, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, >, >, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, > >; pair idx_box either pair plus maybe
        parse_metadata parse_error maybe parse_metadata
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::IdxBoxHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Either < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::Plus, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, >, > >; idx_box either pair plus maybe parse_metadata
        parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::EitherHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::Plus, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, > >; either pair plus maybe parse_metadata parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::PairHeapBak < crate
        ::data_structure::Heap, crate ::data_structure::Plus, tymetafuncspec_core::Maybe
        < crate ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, > >; pair plus maybe parse_metadata
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::EitherHeapBak < crate
        ::data_structure::Heap, tymetafuncspec_core::Pair < crate ::data_structure::Heap,
        crate ::data_structure::Sum, tymetafuncspec_core::Maybe < crate
        ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, >, >, std_parse_error::ParseError < crate
        ::data_structure::Heap, > >; either pair sum maybe parse_metadata parse_error
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::PairHeapBak < crate
        ::data_structure::Heap, crate ::data_structure::Sum, tymetafuncspec_core::Maybe <
        crate ::data_structure::Heap, std_parse_metadata::ParseMetadata < crate
        ::data_structure::Heap, >, > >; pair sum maybe parse_metadata
    );
}
#[derive(Clone, Copy)]
pub struct Plus {
    pub left_operand: Either<
        ds::Heap,
        Pair<ds::Heap, ds::LeftOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    >,
    pub right_operand: Either<
        ds::Heap,
        Pair<ds::Heap, ds::RightOperand, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
        ParseError<ds::Heap>,
    >,
}
#[derive(Clone, Copy)]
pub struct LeftOperand {
    pub nat: Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
}
#[derive(Clone, Copy)]
pub struct RightOperand {
    pub nat: Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
}
#[derive(Clone, Copy)]
pub struct F {
    pub nat: Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>,
}
#[derive(Clone, Copy)]
pub struct Sum {
    pub set: Either<
        ds::Heap,
        Pair<
            ds::Heap,
            Set<ds::Heap, Either<ds::Heap, ds::Nat, ParseError<ds::Heap>>>,
            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
        >,
        ParseError<ds::Heap>,
    >,
}
#[derive(Clone, Copy)]
pub enum Nat {
    NatLit(
        Either<
            ds::Heap,
            Pair<
                ds::Heap,
                BoundedNat<ds::Heap>,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >,
    ),
    F(
        Either<
            ds::Heap,
            Pair<
                ds::Heap,
                IdxBox<
                    ds::Heap,
                    Either<
                        ds::Heap,
                        Pair<ds::Heap, ds::F, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
                        ParseError<ds::Heap>,
                    >,
                >,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >,
    ),
    Plus(
        Either<
            ds::Heap,
            Pair<
                ds::Heap,
                IdxBox<
                    ds::Heap,
                    Either<
                        ds::Heap,
                        Pair<
                            ds::Heap,
                            ds::Plus,
                            Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
                        >,
                        ParseError<ds::Heap>,
                    >,
                >,
                Maybe<ds::Heap, ParseMetadata<ds::Heap>>,
            >,
            ParseError<ds::Heap>,
        >,
    ),
    Sum(
        Either<
            ds::Heap,
            Pair<ds::Heap, ds::Sum, Maybe<ds::Heap, ParseMetadata<ds::Heap>>>,
            ParseError<ds::Heap>,
        >,
    ),
}
/// @generated by [term_specialized_gen::gen_heaped_impls]
pub mod heaped {
    use crate::data_structure as ds;
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::Plus {
        type Heap = ds::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::LeftOperand {
        type Heap = ds::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::RightOperand {
        type Heap = ds::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::F {
        type Heap = ds::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::Sum {
        type Heap = ds::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::Nat {
        type Heap = ds::Heap;
    }
}
