#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
use tymetafuncspec_core::Pair;
use tymetafuncspec_core::Maybe;
use tymetafuncspec_core::Either;
use std_parse_metadata::ParseMetadata;
use std_parse_error::ParseError;
use crate::term_specialized_gen_cst as tsgc;
/// @generated by [term_bridge_gen::generate_heap]
impl fib::term_trait_gen_fib::Heap for tsgc::Heap {
    type Plus = Either<
        tsgc::Heap,
        Pair<tsgc::Heap, tsgc::Plus, Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>>,
        ParseError<tsgc::Heap>,
    >;
    type LeftOperand = Either<
        tsgc::Heap,
        Pair<
            tsgc::Heap,
            tsgc::LeftOperand,
            Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>,
        >,
        ParseError<tsgc::Heap>,
    >;
    type RightOperand = Either<
        tsgc::Heap,
        Pair<
            tsgc::Heap,
            tsgc::RightOperand,
            Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>,
        >,
        ParseError<tsgc::Heap>,
    >;
    type F = Either<
        tsgc::Heap,
        Pair<tsgc::Heap, tsgc::F, Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>>,
        ParseError<tsgc::Heap>,
    >;
    type Sum = Either<
        tsgc::Heap,
        Pair<tsgc::Heap, tsgc::Sum, Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>>,
        ParseError<tsgc::Heap>,
    >;
    type Nat = Either<tsgc::Heap, tsgc::Nat, ParseError<tsgc::Heap>>;
}
/// @generated by [term_bridge_gen::generate_owned_impls]
pub mod owned_impls {
    use tymetafuncspec_core::Pair;
    use tymetafuncspec_core::Maybe;
    use tymetafuncspec_core::Either;
    use std_parse_metadata::ParseMetadata;
    use std_parse_error::ParseError;
    use crate::term_specialized_gen_cst as tsgc;
    impl fib::term_trait_gen_fib::owned::Plus<tsgc::Heap>
    for Either<
        tsgc::Heap,
        Pair<tsgc::Heap, tsgc::Plus, Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>>,
        ParseError<tsgc::Heap>,
    > {}
    impl fib::term_trait_gen_fib::owned::LeftOperand<tsgc::Heap>
    for Either<
        tsgc::Heap,
        Pair<
            tsgc::Heap,
            tsgc::LeftOperand,
            Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>,
        >,
        ParseError<tsgc::Heap>,
    > {}
    impl fib::term_trait_gen_fib::owned::RightOperand<tsgc::Heap>
    for Either<
        tsgc::Heap,
        Pair<
            tsgc::Heap,
            tsgc::RightOperand,
            Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>,
        >,
        ParseError<tsgc::Heap>,
    > {}
    impl fib::term_trait_gen_fib::owned::F<tsgc::Heap>
    for Either<
        tsgc::Heap,
        Pair<tsgc::Heap, tsgc::F, Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>>,
        ParseError<tsgc::Heap>,
    > {}
    impl fib::term_trait_gen_fib::owned::Sum<tsgc::Heap>
    for Either<
        tsgc::Heap,
        Pair<tsgc::Heap, tsgc::Sum, Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>>,
        ParseError<tsgc::Heap>,
    > {}
    impl fib::term_trait_gen_fib::owned::Nat<tsgc::Heap>
    for Either<tsgc::Heap, tsgc::Nat, ParseError<tsgc::Heap>> {}
}
/// @generated by [term_bridge_gen::bridge_words_impls]
pub mod words_impls {
    use fib::words_mod_fib::sorts::Sum;
    use fib::words_mod_fib::sorts::RightOperand;
    use fib::words_mod_fib::sorts::Plus;
    use fib::words_mod_fib::sorts::Nat;
    use fib::words_mod_fib::sorts::LeftOperand;
    use fib::words_mod_fib::sorts::F;
    use fib::words_mod_fib::L;
    use fib::term_trait_gen_fib::Heap;
    use crate::term_specialized_gen_cst as tsgc;
    impl words::Implements<tsgc::Heap, L> for <tsgc::Heap as Heap>::Plus {
        type LWord = Plus;
    }
    impl words::Implements<tsgc::Heap, L> for <tsgc::Heap as Heap>::LeftOperand {
        type LWord = LeftOperand;
    }
    impl words::Implements<tsgc::Heap, L> for <tsgc::Heap as Heap>::RightOperand {
        type LWord = RightOperand;
    }
    impl words::Implements<tsgc::Heap, L> for <tsgc::Heap as Heap>::F {
        type LWord = F;
    }
    impl words::Implements<tsgc::Heap, L> for <tsgc::Heap as Heap>::Sum {
        type LWord = Sum;
    }
    impl words::Implements<tsgc::Heap, L> for <tsgc::Heap as Heap>::Nat {
        type LWord = Nat;
    }
}
/// @generated by [term_bridge_gen::generate_maps_tmf_impls]
pub mod maps_tmf_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::Pair;
    use tymetafuncspec_core::Maybe;
    use tymetafuncspec_core::Either;
    use tymetafuncspec_core::BoundedNat;
    use std_parse_metadata::ParseMetadata;
    use std_parse_error::ParseError;
    use fib::words_mod_fib::L;
    use crate::term_specialized_gen_cst as tsgc;
    impl term::MapsTmf<
        L,
        Set<tsgc::Heap, Either<tsgc::Heap, tsgc::Nat, ParseError<tsgc::Heap>>>,
    > for tsgc::Heap {
        type Tmf = Either<
            tsgc::Heap,
            Pair<
                tsgc::Heap,
                Set<tsgc::Heap, Either<tsgc::Heap, tsgc::Nat, ParseError<tsgc::Heap>>>,
                Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>,
            >,
            ParseError<tsgc::Heap>,
        >;
    }
    impl term::MapsTmf<L, BoundedNat<tsgc::Heap>> for tsgc::Heap {
        type Tmf = Either<
            tsgc::Heap,
            Pair<
                tsgc::Heap,
                BoundedNat<tsgc::Heap>,
                Maybe<tsgc::Heap, ParseMetadata<tsgc::Heap>>,
            >,
            ParseError<tsgc::Heap>,
        >;
    }
}
