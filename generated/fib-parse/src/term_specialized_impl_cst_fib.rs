#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_impl_gen::generate]
use crate::term_specialized_cst as tsc;
/// @generated by [term_specialized_impl_gen::gen_heap_impl]
impl crate::term_trait_cst::Heap for tsc::Heap {
    type Plus = tsc::Plus;
    type LeftOperand = tsc::LeftOperand;
    type RightOperand = tsc::RightOperand;
    type F = tsc::F;
    type Sum = tsc::Sum;
    type Nat = tsc::Nat;
}
/// @generated by [term_specialized_impl_gen::gen_owned_mod]
pub mod owned_impls {
    use crate::term_specialized_cst as tsc;
    impl crate::term_trait_cst::owned::Plus<tsc::Heap> for tsc::Plus {}
    impl crate::term_trait_cst::owned::LeftOperand<tsc::Heap> for tsc::LeftOperand {}
    impl crate::term_trait_cst::owned::RightOperand<tsc::Heap> for tsc::RightOperand {}
    impl crate::term_trait_cst::owned::F<tsc::Heap> for tsc::F {}
    impl crate::term_trait_cst::owned::Sum<tsc::Heap> for tsc::Sum {}
    impl crate::term_trait_cst::owned::Nat<tsc::Heap> for tsc::Nat {}
}
/// @generated by [term_specialized_impl_gen::gen_ccf_mod]
pub mod ccf_impls {
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod plus {
        use tymetafuncspec_core::Pair;
        use tymetafuncspec_core::Maybe;
        use tymetafuncspec_core::Either;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_metadata::ParseMetadata;
        use std_parse_error::ParseError;
        use crate::words_mod_cst as wmc;
        use crate::term_specialized_cst as tsc;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            tsc::LeftOperand,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                tsc::RightOperand,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ),
        > for tsc::Plus {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                tsc::LeftOperand,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (
                        <<Self as Heaped>::Heap as MapsTmf<
                            wmc::L,
                            Either<
                                <Self as Heaped>::Heap,
                                Pair<
                                    <Self as Heaped>::Heap,
                                    tsc::RightOperand,
                                    Maybe<
                                        <Self as Heaped>::Heap,
                                        ParseMetadata<<Self as Heaped>::Heap>,
                                    >,
                                >,
                                ParseError<<Self as Heaped>::Heap>,
                            >,
                        >>::Tmf,
                        (),
                    ),
                ),
            ) -> Self {
                crate::term_specialized_cst::Plus {
                    left_operand: t.0,
                    right_operand: t.1.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            tsc::LeftOperand,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                tsc::RightOperand,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) {
                (self.left_operand, (self.right_operand, ()))
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod left_operand {
        use tymetafuncspec_core::Pair;
        use tymetafuncspec_core::Maybe;
        use tymetafuncspec_core::Either;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_metadata::ParseMetadata;
        use std_parse_error::ParseError;
        use crate::words_mod_cst as wmc;
        use crate::term_specialized_cst as tsc;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            tsc::Nat,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for tsc::LeftOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                tsc::Nat,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_cst::LeftOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            tsc::Nat,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod right_operand {
        use tymetafuncspec_core::Pair;
        use tymetafuncspec_core::Maybe;
        use tymetafuncspec_core::Either;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_metadata::ParseMetadata;
        use std_parse_error::ParseError;
        use crate::words_mod_cst as wmc;
        use crate::term_specialized_cst as tsc;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            tsc::Nat,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for tsc::RightOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                tsc::Nat,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_cst::RightOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            tsc::Nat,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod f {
        use tymetafuncspec_core::Pair;
        use tymetafuncspec_core::Maybe;
        use tymetafuncspec_core::Either;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_metadata::ParseMetadata;
        use std_parse_error::ParseError;
        use crate::words_mod_cst as wmc;
        use crate::term_specialized_cst as tsc;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            tsc::Nat,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for tsc::F {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                tsc::Nat,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_cst::F {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            tsc::Nat,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod sum {
        use tymetafuncspec_core::Set;
        use tymetafuncspec_core::Pair;
        use tymetafuncspec_core::Maybe;
        use tymetafuncspec_core::Either;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_metadata::ParseMetadata;
        use std_parse_error::ParseError;
        use crate::words_mod_cst as wmc;
        use crate::term_specialized_cst as tsc;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            Set<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    Pair<
                                        <Self as Heaped>::Heap,
                                        tsc::Nat,
                                        Maybe<
                                            <Self as Heaped>::Heap,
                                            ParseMetadata<<Self as Heaped>::Heap>,
                                        >,
                                    >,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for tsc::Sum {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                Set<
                                    <Self as Heaped>::Heap,
                                    Either<
                                        <Self as Heaped>::Heap,
                                        Pair<
                                            <Self as Heaped>::Heap,
                                            tsc::Nat,
                                            Maybe<
                                                <Self as Heaped>::Heap,
                                                ParseMetadata<<Self as Heaped>::Heap>,
                                            >,
                                        >,
                                        ParseError<<Self as Heaped>::Heap>,
                                    >,
                                >,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_cst::Sum {
                    set: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            Set<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    Pair<
                                        <Self as Heaped>::Heap,
                                        tsc::Nat,
                                        Maybe<
                                            <Self as Heaped>::Heap,
                                            ParseMetadata<<Self as Heaped>::Heap>,
                                        >,
                                    >,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                (self.set, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod nat {
        use tymetafuncspec_core::Pair;
        use tymetafuncspec_core::Maybe;
        use tymetafuncspec_core::IdxBox;
        use tymetafuncspec_core::Either;
        use tymetafuncspec_core::BoundedNat;
        use term::MapsTmf;
        use term::Heaped;
        use std_parse_metadata::ParseMetadata;
        use std_parse_error::ParseError;
        use crate::words_mod_cst as wmc;
        use crate::term_specialized_cst as tsc;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            BoundedNat<<Self as Heaped>::Heap>,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for tsc::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                BoundedNat<<Self as Heaped>::Heap>,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_cst::Nat::NatLit(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_cst::Nat::NatLit(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            BoundedNat<<Self as Heaped>::Heap>,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::term_specialized_cst::Nat::NatLit(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            IdxBox<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    Pair<
                                        <Self as Heaped>::Heap,
                                        tsc::F,
                                        Maybe<
                                            <Self as Heaped>::Heap,
                                            ParseMetadata<<Self as Heaped>::Heap>,
                                        >,
                                    >,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for tsc::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                IdxBox<
                                    <Self as Heaped>::Heap,
                                    Either<
                                        <Self as Heaped>::Heap,
                                        Pair<
                                            <Self as Heaped>::Heap,
                                            tsc::F,
                                            Maybe<
                                                <Self as Heaped>::Heap,
                                                ParseMetadata<<Self as Heaped>::Heap>,
                                            >,
                                        >,
                                        ParseError<<Self as Heaped>::Heap>,
                                    >,
                                >,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_cst::Nat::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_cst::Nat::F(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            IdxBox<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    Pair<
                                        <Self as Heaped>::Heap,
                                        tsc::F,
                                        Maybe<
                                            <Self as Heaped>::Heap,
                                            ParseMetadata<<Self as Heaped>::Heap>,
                                        >,
                                    >,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::term_specialized_cst::Nat::F(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            IdxBox<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    Pair<
                                        <Self as Heaped>::Heap,
                                        tsc::Plus,
                                        Maybe<
                                            <Self as Heaped>::Heap,
                                            ParseMetadata<<Self as Heaped>::Heap>,
                                        >,
                                    >,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for tsc::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                IdxBox<
                                    <Self as Heaped>::Heap,
                                    Either<
                                        <Self as Heaped>::Heap,
                                        Pair<
                                            <Self as Heaped>::Heap,
                                            tsc::Plus,
                                            Maybe<
                                                <Self as Heaped>::Heap,
                                                ParseMetadata<<Self as Heaped>::Heap>,
                                            >,
                                        >,
                                        ParseError<<Self as Heaped>::Heap>,
                                    >,
                                >,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_cst::Nat::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_cst::Nat::Plus(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            IdxBox<
                                <Self as Heaped>::Heap,
                                Either<
                                    <Self as Heaped>::Heap,
                                    Pair<
                                        <Self as Heaped>::Heap,
                                        tsc::Plus,
                                        Maybe<
                                            <Self as Heaped>::Heap,
                                            ParseMetadata<<Self as Heaped>::Heap>,
                                        >,
                                    >,
                                    ParseError<<Self as Heaped>::Heap>,
                                >,
                            >,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::term_specialized_cst::Nat::Plus(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            tsc::Sum,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ),
        > for tsc::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        wmc::L,
                        Either<
                            <Self as Heaped>::Heap,
                            Pair<
                                <Self as Heaped>::Heap,
                                tsc::Sum,
                                Maybe<
                                    <Self as Heaped>::Heap,
                                    ParseMetadata<<Self as Heaped>::Heap>,
                                >,
                            >,
                            ParseError<<Self as Heaped>::Heap>,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_cst::Nat::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_cst::Nat::Sum(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    wmc::L,
                    Either<
                        <Self as Heaped>::Heap,
                        Pair<
                            <Self as Heaped>::Heap,
                            tsc::Sum,
                            Maybe<
                                <Self as Heaped>::Heap,
                                ParseMetadata<<Self as Heaped>::Heap>,
                            >,
                        >,
                        ParseError<<Self as Heaped>::Heap>,
                    >,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::term_specialized_cst::Nat::Sum(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
}
/// @generated by [term_specialized_impl_gen::gen_transitive_ccf_mod]
pub mod transitive_ccf {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::Pair;
    use tymetafuncspec_core::Maybe;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::Either;
    use tymetafuncspec_core::BoundedNat;
    use std_parse_metadata::ParseMetadata;
    use std_parse_error::ParseError;
    use crate::term_specialized_cst as tsc;
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::LeftOperand {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::LeftOperand {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::LeftOperand {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::LeftOperand {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for tsc::LeftOperand {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::RightOperand {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::RightOperand {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::RightOperand {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::RightOperand {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for tsc::RightOperand {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::F {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::F {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::F {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::F {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for tsc::F {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                Set<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Nat,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for tsc::Sum {
        type Intermediary = Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                Set<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Nat,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::Plus> for tsc::Nat {
        type Intermediary = Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                IdxBox<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Plus,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::Nat {
        type Intermediary = Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                IdxBox<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Plus,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::Nat {
        type Intermediary = Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                IdxBox<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::F,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::Nat {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for tsc::Nat {
        type Intermediary = Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                IdxBox<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::F,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for tsc::Nat {
        type Intermediary = Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                Set<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Nat,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for tsc::Nat {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                IdxBox<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Plus,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for tsc::Nat {
        type Intermediary = Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                IdxBox<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Plus,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                IdxBox<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::F,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for tsc::Nat {
        type Intermediary = Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                IdxBox<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::F,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::Plus>
    for IdxBox<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for IdxBox<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for IdxBox<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for IdxBox<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > {
        type Intermediary = Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::Plus>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::Plus,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseError<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = ParseError<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::Plus,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseError<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = ParseError<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::LeftOperand,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::LeftOperand,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseError<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = ParseError<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::RightOperand,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::RightOperand,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseError<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = ParseError<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::F,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::F,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseError<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = ParseError<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                Set<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Nat,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::Sum,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::Sum,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseError<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = ParseError<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::Nat,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::Nat,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::Nat,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::Nat,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            tsc::Nat,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, BoundedNat<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            BoundedNat<tsc::Heap>,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            BoundedNat<tsc::Heap>,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseError<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            BoundedNat<tsc::Heap>,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = ParseError<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Pair<
            tsc::Heap,
            BoundedNat<tsc::Heap>,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            BoundedNat<tsc::Heap>,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            BoundedNat<tsc::Heap>,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Set<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            Set<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Nat,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            Set<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Nat,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseError<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            Set<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Nat,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = ParseError<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Pair<
            tsc::Heap,
            Set<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Nat,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            Set<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Nat,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            Set<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Nat,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::Plus>
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Plus,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Plus,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseError<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Plus,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = ParseError<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Plus,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Plus,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Plus,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Plus,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Plus,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseError<tsc::Heap>>
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = ParseError<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
    >
    for Either<
        tsc::Heap,
        Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = Pair<
            tsc::Heap,
            IdxBox<
                tsc::Heap,
                Either<
                    tsc::Heap,
                    Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                    ParseError<tsc::Heap>,
                >,
            >,
            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, ParseMetadata<tsc::Heap>>
    for Maybe<tsc::Heap, ParseMetadata<tsc::Heap>> {
        type Intermediary = ParseMetadata<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::Plus>
    for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Plus;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::LeftOperand>
    for Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > for Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::RightOperand>
    for Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    >
    for Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    >
    for Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::F>
    for Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > for Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::Sum>
    for Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                Set<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Nat,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > for Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::Plus>
    for Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::Nat>
    for Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                Set<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Nat,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >,
    > for Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > for Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, BoundedNat<tsc::Heap>>
    for Pair<
        tsc::Heap,
        BoundedNat<tsc::Heap>,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = BoundedNat<tsc::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    >
    for Pair<
        tsc::Heap,
        BoundedNat<tsc::Heap>,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Set<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
    >
    for Pair<
        tsc::Heap,
        Set<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = Set<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    >
    for Pair<
        tsc::Heap,
        Set<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsc::Heap, tsc::Plus>
    for Pair<
        tsc::Heap,
        IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
    >
    for Pair<
        tsc::Heap,
        IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Pair<
        tsc::Heap,
        IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    >
    for Pair<
        tsc::Heap,
        IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
    >
    for Pair<
        tsc::Heap,
        IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Pair<
        tsc::Heap,
        IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Either<
            tsc::Heap,
            Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
            ParseError<tsc::Heap>,
        >,
    >
    for Pair<
        tsc::Heap,
        IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsc::Heap,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    >
    for Pair<
        tsc::Heap,
        IdxBox<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
    > {
        type Intermediary = Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>;
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (ParseError<tsc::Heap>, (ParseError<tsc::Heap>, ())),
    > for tsc::Plus {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (ParseError<tsc::Heap>, (ParseError<tsc::Heap>, ())),
    > for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            ParseError<tsc::Heap>,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        ),
    > for tsc::Plus {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            ParseError<tsc::Heap>,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        ),
    > for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            ParseError<tsc::Heap>,
            (
                Pair<
                    tsc::Heap,
                    tsc::RightOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                (),
            ),
        ),
    > for tsc::Plus {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            ParseError<tsc::Heap>,
            (
                Pair<
                    tsc::Heap,
                    tsc::RightOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                (),
            ),
        ),
    > for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (ParseError<tsc::Heap>, ()),
        ),
    > for tsc::Plus {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (ParseError<tsc::Heap>, ()),
        ),
    > for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        ),
    > for tsc::Plus {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        ),
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        ),
    > for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Nat,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        ),
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Pair<
                    tsc::Heap,
                    tsc::RightOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                (),
            ),
        ),
    > for tsc::Plus {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Pair<
                    tsc::Heap,
                    tsc::RightOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                (),
            ),
        ),
    > for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        ),
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::Nat,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        ),
    >
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Pair<
                tsc::Heap,
                tsc::LeftOperand,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            (ParseError<tsc::Heap>, ()),
        ),
    > for tsc::Plus {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Pair<
                tsc::Heap,
                tsc::LeftOperand,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            (ParseError<tsc::Heap>, ()),
        ),
    > for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Pair<
                tsc::Heap,
                tsc::LeftOperand,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        ),
    > for tsc::Plus {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Pair<
                tsc::Heap,
                tsc::LeftOperand,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        ),
    > for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Pair<
                tsc::Heap,
                tsc::LeftOperand,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            (
                Pair<
                    tsc::Heap,
                    tsc::RightOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                (),
            ),
        ),
    > for tsc::Plus {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsc::Heap,
        (
            Pair<
                tsc::Heap,
                tsc::LeftOperand,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            (
                Pair<
                    tsc::Heap,
                    tsc::RightOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                (),
            ),
        ),
    > for Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>> {
        type Intermediary = tsc::Plus;
        type Intermediaries = (
            Either<
                tsc::Heap,
                Pair<
                    tsc::Heap,
                    tsc::LeftOperand,
                    Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                >,
                ParseError<tsc::Heap>,
            >,
            (
                Either<
                    tsc::Heap,
                    Pair<
                        tsc::Heap,
                        tsc::RightOperand,
                        Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                    >,
                    ParseError<tsc::Heap>,
                >,
                (),
            ),
        );
    }
}
/// @generated by [term_specialized_impl_gen::gen_ccf_auto_impls]
pub mod ccf_auto_impls {
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, crate ::term_specialized_cst::Plus
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, crate ::term_specialized_cst::LeftOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, crate ::term_specialized_cst::RightOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, crate ::term_specialized_cst::F
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, crate ::term_specialized_cst::Sum
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, crate ::term_specialized_cst::Nat
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::LeftOperand,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::LeftOperand,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Maybe < crate
        ::term_specialized_cst::Heap, std_parse_metadata::ParseMetadata < crate
        ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, std_parse_metadata::ParseMetadata < crate
        ::term_specialized_cst::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, std_parse_error::ParseError < crate
        ::term_specialized_cst::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::RightOperand,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::RightOperand,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Nat,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Nat,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Nat,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >, >,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Nat,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >, >,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Nat,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::BoundedNat < crate
        ::term_specialized_cst::Heap, >, tymetafuncspec_core::Maybe < crate
        ::term_specialized_cst::Heap, std_parse_metadata::ParseMetadata < crate
        ::term_specialized_cst::Heap, >, >, >, std_parse_error::ParseError < crate
        ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::BoundedNat < crate
        ::term_specialized_cst::Heap, >, tymetafuncspec_core::Maybe < crate
        ::term_specialized_cst::Heap, std_parse_metadata::ParseMetadata < crate
        ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::BoundedNat < crate
        ::term_specialized_cst::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::IdxBox < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::F,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >, >,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::IdxBox < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::F,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >, >,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::IdxBox < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::F,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::F,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::F,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::IdxBox < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Plus,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >, >,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::IdxBox < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Plus,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >, >,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::IdxBox < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Plus,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Plus,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Plus,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Either < crate
        ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Sum,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >,
        std_parse_error::ParseError < crate ::term_specialized_cst::Heap, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_cst::Heap, tymetafuncspec_core::Pair < crate
        ::term_specialized_cst::Heap, crate ::term_specialized_cst::Sum,
        tymetafuncspec_core::Maybe < crate ::term_specialized_cst::Heap,
        std_parse_metadata::ParseMetadata < crate ::term_specialized_cst::Heap, >, >, >
    );
}
/// @generated by [term_specialized_impl_gen::gen_maps_tmf]
pub mod maps_tmf_impls {
    use crate::words_mod_cst as wmc;
    use crate::term_specialized_cst as tsc;
    use ccf::CanonicallyConstructibleFrom;
    impl<TmfMonomorphization> term::MapsTmf<wmc::L, TmfMonomorphization> for tsc::Heap
    where
        TmfMonomorphization: CanonicallyConstructibleFrom<
            Self,
            (TmfMonomorphization, ()),
        >,
    {
        type Tmf = TmfMonomorphization;
    }
}
