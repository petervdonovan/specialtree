#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
use tymetafuncspec_core::Pair;
use tymetafuncspec_core::Maybe;
use tymetafuncspec_core::Either;
use std_parse_metadata::ParseMetadata;
use std_parse_error::ParseError;
use crate::term_specialized_cst as tsc;
/// @generated by [term_bridge_gen::generate_heap]
impl fib::term_trait_fib::Heap for tsc::Heap {
    type Plus = Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    >;
    type LeftOperand = Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    >;
    type RightOperand = Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    >;
    type F = Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    >;
    type Sum = Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    >;
    type Nat = Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    >;
}
/// @generated by [term_bridge_gen::generate_owned_impls]
pub mod owned_impls {
    use tymetafuncspec_core::Pair;
    use tymetafuncspec_core::Maybe;
    use tymetafuncspec_core::Either;
    use std_parse_metadata::ParseMetadata;
    use std_parse_error::ParseError;
    use crate::term_specialized_cst as tsc;
    impl fib::term_trait_fib::owned::Plus<tsc::Heap>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Plus, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {}
    impl fib::term_trait_fib::owned::LeftOperand<tsc::Heap>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::LeftOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {}
    impl fib::term_trait_fib::owned::RightOperand<tsc::Heap>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::RightOperand, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {}
    impl fib::term_trait_fib::owned::F<tsc::Heap>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::F, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {}
    impl fib::term_trait_fib::owned::Sum<tsc::Heap>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Sum, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {}
    impl fib::term_trait_fib::owned::Nat<tsc::Heap>
    for Either<
        tsc::Heap,
        Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
        ParseError<tsc::Heap>,
    > {}
}
/// @generated by [term_bridge_gen::bridge_words_impls]
pub mod words_impls {
    use fib::words_mod_fib::sorts::Sum;
    use fib::words_mod_fib::sorts::RightOperand;
    use fib::words_mod_fib::sorts::Plus;
    use fib::words_mod_fib::sorts::Nat;
    use fib::words_mod_fib::sorts::LeftOperand;
    use fib::words_mod_fib::sorts::F;
    use fib::words_mod_fib::L;
    use fib::term_trait_fib::Heap;
    use crate::term_specialized_cst as tsc;
    impl words::Implements<tsc::Heap, L> for <tsc::Heap as Heap>::Plus {
        type LWord = Plus;
    }
    impl words::Implements<tsc::Heap, L> for <tsc::Heap as Heap>::LeftOperand {
        type LWord = LeftOperand;
    }
    impl words::Implements<tsc::Heap, L> for <tsc::Heap as Heap>::RightOperand {
        type LWord = RightOperand;
    }
    impl words::Implements<tsc::Heap, L> for <tsc::Heap as Heap>::F {
        type LWord = F;
    }
    impl words::Implements<tsc::Heap, L> for <tsc::Heap as Heap>::Sum {
        type LWord = Sum;
    }
    impl words::Implements<tsc::Heap, L> for <tsc::Heap as Heap>::Nat {
        type LWord = Nat;
    }
}
/// @generated by [term_bridge_gen::generate_maps_tmf_impls]
pub mod maps_tmf_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::Pair;
    use tymetafuncspec_core::Maybe;
    use tymetafuncspec_core::Either;
    use tymetafuncspec_core::BoundedNat;
    use std_parse_metadata::ParseMetadata;
    use std_parse_error::ParseError;
    use fib::words_mod_fib::L;
    use crate::term_specialized_cst as tsc;
    impl term::MapsTmf<
        L,
        Set<
            tsc::Heap,
            Either<
                tsc::Heap,
                Pair<tsc::Heap, tsc::Nat, Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>>,
                ParseError<tsc::Heap>,
            >,
        >,
    > for tsc::Heap {
        type Tmf = Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                Set<
                    tsc::Heap,
                    Either<
                        tsc::Heap,
                        Pair<
                            tsc::Heap,
                            tsc::Nat,
                            Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
                        >,
                        ParseError<tsc::Heap>,
                    >,
                >,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >;
    }
    impl term::MapsTmf<L, BoundedNat<tsc::Heap>> for tsc::Heap {
        type Tmf = Either<
            tsc::Heap,
            Pair<
                tsc::Heap,
                BoundedNat<tsc::Heap>,
                Maybe<tsc::Heap, ParseMetadata<tsc::Heap>>,
            >,
            ParseError<tsc::Heap>,
        >;
    }
}
