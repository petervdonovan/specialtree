#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_trait_gen::generate]
use tymetafuncspec_core::SetHeapBak;
use tymetafuncspec_core::Set;
use tymetafuncspec_core::BoundedNatHeapBak;
use tymetafuncspec_core::BoundedNat;
use term::SuperHeap;
use term::MapsTmf;
use crate::words_mod_fib as wmf;
use crate::term_trait_gen_fib::owned as ttgfo;
/// @generated by [term_trait_gen::heap_trait]
pub trait Heap: Sized + MapsTmf<
        wmf::L,
        Set<Self, Self::Nat>,
    > + MapsTmf<
        wmf::L,
        BoundedNat<Self>,
    > + SuperHeap<SetHeapBak<Self, Self::Nat>> + SuperHeap<BoundedNatHeapBak<Self>> {
    type Plus: ttgfo::Plus<Self>;
    type LeftOperand: ttgfo::LeftOperand<Self>;
    type RightOperand: ttgfo::RightOperand<Self>;
    type F: ttgfo::F<Self>;
    type Sum: ttgfo::Sum<Self>;
    type Nat: ttgfo::Nat<Self>;
}
/// @generated by [term_trait_gen::owned::generate]
pub mod owned {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use term::MapsTmf;
    use term::CanonicallyConstructibleFrom;
    use crate::words_mod_fib as wmf;
    use crate::term_trait_gen_fib as ttgf;
    pub trait Plus<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as ttgf::Heap>::LeftOperand, (<Heap as ttgf::Heap>::RightOperand, ())),
        >
    where
        Heap: ttgf::Heap,
    {}
    pub trait LeftOperand<
        Heap,
    >: CanonicallyConstructibleFrom<Heap, (<Heap as ttgf::Heap>::Nat, ())>
    where
        Heap: ttgf::Heap,
    {}
    pub trait RightOperand<
        Heap,
    >: CanonicallyConstructibleFrom<Heap, (<Heap as ttgf::Heap>::Nat, ())>
    where
        Heap: ttgf::Heap,
    {}
    pub trait F<
        Heap,
    >: CanonicallyConstructibleFrom<Heap, (<Heap as ttgf::Heap>::Nat, ())>
    where
        Heap: ttgf::Heap,
    {}
    pub trait Sum<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as MapsTmf<wmf::L, Set<Heap, <Heap as ttgf::Heap>::Nat>>>::Tmf, ()),
        >
    where
        Heap: ttgf::Heap,
    {}
    pub trait Nat<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as MapsTmf<wmf::L, BoundedNat<Heap>>>::Tmf, ()),
        > + CanonicallyConstructibleFrom<
            Heap,
            (<Heap as ttgf::Heap>::F, ()),
        > + CanonicallyConstructibleFrom<
            Heap,
            (<Heap as ttgf::Heap>::Plus, ()),
        > + CanonicallyConstructibleFrom<Heap, (<Heap as ttgf::Heap>::Sum, ())>
    where
        Heap: ttgf::Heap,
    {}
}
