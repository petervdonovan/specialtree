#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_gen::generate]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::IdxBox;
use tymetafuncspec_core::BoundedNat;
use crate::data_structure as ds;
use crate::data_structure::heap::set as dshs;
use crate::data_structure::heap::nat_lit as dshnl;
use crate::data_structure::heap::idx_box as dshib;
/// @generated by [term_specialized_gen::gen_heap]
#[derive(Default)]
pub struct Heap {
    set: dshs::Bak,
    nat_lit: dshnl::Bak,
    idx_box: dshib::Bak,
}
/// @generated by [term_specialized_gen::gen_heap]
pub mod heap {
    use crate::data_structure::heap::set as dshs;
    use crate::data_structure::heap::nat_lit as dshnl;
    use crate::data_structure::heap::idx_box as dshib;
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    #[derive(Default)]
    pub struct Bak {
        pub set: dshs::Bak,
        pub nat_lit: dshnl::Bak,
        pub idx_box: dshib::Bak,
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod set {
        use crate::data_structure::heap::set::nat as dshsn;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub nat: dshsn::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod nat {
            use tymetafuncspec_core::SetHeapBak;
            use crate::data_structure as ds;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub SetHeapBak<ds::Heap, ds::Nat>);
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod nat_lit {
        use tymetafuncspec_core::BoundedNatHeapBak;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_gen::gen_heapbak_module]
        #[derive(Default)]
        pub struct Bak(pub BoundedNatHeapBak<ds::Heap>);
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod idx_box {
        use crate::data_structure::heap::idx_box::plus as dshibp;
        use crate::data_structure::heap::idx_box::f as dshibf;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub f: dshibf::Bak,
            pub plus: dshibp::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod f {
            use tymetafuncspec_core::IdxBoxHeapBak;
            use crate::data_structure as ds;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub IdxBoxHeapBak<ds::Heap, ds::F>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod plus {
            use tymetafuncspec_core::IdxBoxHeapBak;
            use crate::data_structure as ds;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub IdxBoxHeapBak<ds::Heap, ds::Plus>);
        }
    }
}
/// @generated by [term_specialized_gen::gen_heap]
pub mod superheap {
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::SetHeapBak < crate
        ::data_structure::Heap, crate ::data_structure::Nat >; set nat
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::BoundedNatHeapBak < crate
        ::data_structure::Heap, >; nat_lit
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::IdxBoxHeapBak < crate
        ::data_structure::Heap, crate ::data_structure::F >; idx_box f
    );
    term::impl_superheap!(
        crate ::data_structure::Heap; tymetafuncspec_core::IdxBoxHeapBak < crate
        ::data_structure::Heap, crate ::data_structure::Plus >; idx_box plus
    );
}
#[derive(Clone, Copy)]
pub struct Plus {
    pub left_operand: ds::LeftOperand,
    pub right_operand: ds::RightOperand,
}
#[derive(Clone, Copy)]
pub struct LeftOperand {
    pub nat: ds::Nat,
}
#[derive(Clone, Copy)]
pub struct RightOperand {
    pub nat: ds::Nat,
}
#[derive(Clone, Copy)]
pub struct F {
    pub nat: ds::Nat,
}
#[derive(Clone, Copy)]
pub struct Sum {
    pub set: Set<ds::Heap, ds::Nat>,
}
#[derive(Clone, Copy)]
pub enum Nat {
    NatLit(BoundedNat<ds::Heap>),
    F(IdxBox<ds::Heap, ds::F>),
    Plus(IdxBox<ds::Heap, ds::Plus>),
    Sum(ds::Sum),
}
/// @generated by [term_specialized_gen::gen_heaped_impls]
pub mod heaped {
    use crate::data_structure as ds;
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::Plus {
        type Heap = ds::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::LeftOperand {
        type Heap = ds::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::RightOperand {
        type Heap = ds::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::F {
        type Heap = ds::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::Sum {
        type Heap = ds::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for ds::Nat {
        type Heap = ds::Heap;
    }
}
