#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_trait_gen::generate]
use tymetafuncspec_core::SetHeapBak;
use tymetafuncspec_core::Set;
use tymetafuncspec_core::BoundedNatHeapBak;
use tymetafuncspec_core::BoundedNat;
use term::SuperHeap;
use term::MapsTmf;
use crate::words_mod_fib as wmf;
use crate::term_trait_fib::owned as ttfo;
/// @generated by [term_trait_gen::heap_trait]
pub trait Heap: Sized + MapsTmf<
        wmf::L,
        Set<Self, Self::Nat>,
    > + MapsTmf<
        wmf::L,
        BoundedNat<Self>,
    > + SuperHeap<SetHeapBak<Self, Self::Nat>> + SuperHeap<BoundedNatHeapBak<Self>> {
    type Plus: ttfo::Plus<Self>;
    type LeftOperand: ttfo::LeftOperand<Self>;
    type RightOperand: ttfo::RightOperand<Self>;
    type F: ttfo::F<Self>;
    type Sum: ttfo::Sum<Self>;
    type Nat: ttfo::Nat<Self>;
}
/// @generated by [term_trait_gen::owned::generate]
pub mod owned {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use term::MapsTmf;
    use crate::words_mod_fib as wmf;
    use crate::term_trait_fib as ttf;
    use ccf::CanonicallyConstructibleFrom;
    pub trait Plus<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as ttf::Heap>::LeftOperand, (<Heap as ttf::Heap>::RightOperand, ())),
        >
    where
        Heap: crate::term_trait_fib::Heap,
    {}
    pub trait LeftOperand<
        Heap,
    >: CanonicallyConstructibleFrom<Heap, (<Heap as ttf::Heap>::Nat, ())>
    where
        Heap: crate::term_trait_fib::Heap,
    {}
    pub trait RightOperand<
        Heap,
    >: CanonicallyConstructibleFrom<Heap, (<Heap as ttf::Heap>::Nat, ())>
    where
        Heap: crate::term_trait_fib::Heap,
    {}
    pub trait F<Heap>: CanonicallyConstructibleFrom<Heap, (<Heap as ttf::Heap>::Nat, ())>
    where
        Heap: crate::term_trait_fib::Heap,
    {}
    pub trait Sum<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as MapsTmf<wmf::L, Set<Heap, <Heap as ttf::Heap>::Nat>>>::TmfTo, ()),
        >
    where
        Heap: crate::term_trait_fib::Heap,
    {}
    pub trait Nat<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as MapsTmf<wmf::L, BoundedNat<Heap>>>::TmfTo, ()),
        > + CanonicallyConstructibleFrom<
            Heap,
            (<Heap as ttf::Heap>::F, ()),
        > + CanonicallyConstructibleFrom<
            Heap,
            (<Heap as ttf::Heap>::Plus, ()),
        > + CanonicallyConstructibleFrom<Heap, (<Heap as ttf::Heap>::Sum, ())>
    where
        Heap: crate::term_trait_fib::Heap,
    {}
}
