#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_trait_gen::generate]
use tymetafuncspec_core::SetHeapBak;
use tymetafuncspec_core::BoundedNatHeapBak;
use term::SuperHeap;
use helpers::Helper2161132b5c2a0cBoundedNat;
use crate::term_trait_fib::owned as ttfo;
/// @generated by [term_trait_gen::heap_trait]
pub trait Heap: Sized + Helper2161132b5c2a0cBoundedNat<
        Self::Plus,
        Self::LeftOperand,
        Self::RightOperand,
        Self::F,
        Self::Sum,
        Self::Nat,
    > + SuperHeap<SetHeapBak<Self, Self::Nat>> + SuperHeap<BoundedNatHeapBak<Self>> {
    type Plus: crate::term_trait_fib::owned::Plus<Self>;
    type LeftOperand: crate::term_trait_fib::owned::LeftOperand<Self>;
    type RightOperand: crate::term_trait_fib::owned::RightOperand<Self>;
    type F: crate::term_trait_fib::owned::F<Self>;
    type Sum: crate::term_trait_fib::owned::Sum<Self>;
    type Nat: crate::term_trait_fib::owned::Nat<Self>;
}
/// @generated by [term_trait_gen::owned::generate]
pub mod owned {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use term::MapsTmf;
    use crate::words_mod_fib as wmf;
    use crate::term_trait_fib as ttf;
    use ccf::CanonicallyConstructibleFrom;
    pub trait Plus<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (
                <Heap as crate::term_trait_fib::Heap>::LeftOperand,
                (<Heap as crate::term_trait_fib::Heap>::RightOperand, ()),
            ),
        >
    where
        Heap: crate::term_trait_fib::Heap,
    {}
    pub trait LeftOperand<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as crate::term_trait_fib::Heap>::Nat, ()),
        >
    where
        Heap: crate::term_trait_fib::Heap,
    {}
    pub trait RightOperand<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as crate::term_trait_fib::Heap>::Nat, ()),
        >
    where
        Heap: crate::term_trait_fib::Heap,
    {}
    pub trait F<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as crate::term_trait_fib::Heap>::Nat, ()),
        >
    where
        Heap: crate::term_trait_fib::Heap,
    {}
    pub trait Sum<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (
                <Heap as MapsTmf<
                    wmf::L,
                    Set<Heap, <Heap as crate::term_trait_fib::Heap>::Nat>,
                >>::Tmf,
                (),
            ),
        >
    where
        Heap: crate::term_trait_fib::Heap,
    {}
    pub trait Nat<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as MapsTmf<wmf::L, BoundedNat<Heap>>>::Tmf, ()),
        > + CanonicallyConstructibleFrom<
            Heap,
            (<Heap as crate::term_trait_fib::Heap>::F, ()),
        > + CanonicallyConstructibleFrom<
            Heap,
            (<Heap as crate::term_trait_fib::Heap>::Plus, ()),
        > + CanonicallyConstructibleFrom<
            Heap,
            (<Heap as crate::term_trait_fib::Heap>::Sum, ()),
        >
    where
        Heap: crate::term_trait_fib::Heap,
    {}
}
pub mod helpers {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use term::MapsTmf;
    use crate::words_mod_fib as wmf;
    pub trait Helper2161132b5c2a0cSetNat<
        Plus,
        LeftOperand,
        RightOperand,
        F,
        Sum,
        Nat,
    >: MapsTmf<wmf::L, Set<Self, Nat>> {}
    pub trait Helper2161132b5c2a0cBoundedNat<
        Plus,
        LeftOperand,
        RightOperand,
        F,
        Sum,
        Nat,
    >: Helper2161132b5c2a0cSetNat<
            Plus,
            LeftOperand,
            RightOperand,
            F,
            Sum,
            Nat,
        > + MapsTmf<wmf::L, BoundedNat<Self>> {}
    impl<
        T,
        Plus,
        LeftOperand,
        RightOperand,
        F,
        Sum,
        Nat,
    > Helper2161132b5c2a0cSetNat<Plus, LeftOperand, RightOperand, F, Sum, Nat> for T
    where
        T: MapsTmf<wmf::L, Set<Self, Nat>>,
    {}
    impl<
        T,
        Plus,
        LeftOperand,
        RightOperand,
        F,
        Sum,
        Nat,
    > Helper2161132b5c2a0cBoundedNat<Plus, LeftOperand, RightOperand, F, Sum, Nat> for T
    where
        T: Helper2161132b5c2a0cSetNat<Plus, LeftOperand, RightOperand, F, Sum, Nat>
            + MapsTmf<wmf::L, BoundedNat<Self>>,
    {}
}
