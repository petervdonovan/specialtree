#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_impl_gen::generate]
use crate::data_structure as ds;
/// @generated by [term_specialized_impl_gen::gen_heap_impl]
impl crate::term_trait::Heap for ds::Heap {
    type Plus = ds::Plus;
    type LeftOperand = ds::LeftOperand;
    type RightOperand = ds::RightOperand;
    type F = ds::F;
    type Sum = ds::Sum;
    type Nat = ds::Nat;
}
/// @generated by [term_specialized_impl_gen::gen_owned_mod]
pub mod owned_impls {
    use crate::data_structure as ds;
    impl crate::term_trait::owned::Plus for ds::Plus {}
    impl crate::term_trait::owned::LeftOperand for ds::LeftOperand {}
    impl crate::term_trait::owned::RightOperand for ds::RightOperand {}
    impl crate::term_trait::owned::F for ds::F {}
    impl crate::term_trait::owned::Sum for ds::Sum {}
    impl crate::term_trait::owned::Nat for ds::Nat {}
}
/// @generated by [term_specialized_impl_gen::gen_ccf_mod]
pub mod ccf_impls {
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod plus {
        use term::Heaped;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (ds::LeftOperand, (ds::RightOperand, ())),
        > for ds::Plus {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (ds::LeftOperand, (ds::RightOperand, ())),
            ) -> Self {
                crate::data_structure::Plus {
                    left_operand: t.0,
                    right_operand: t.1.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (ds::LeftOperand, (ds::RightOperand, ())) {
                (self.left_operand, (self.right_operand, ()))
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod left_operand {
        use term::Heaped;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (ds::Nat, ()),
        > for ds::LeftOperand {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (ds::Nat, ())) -> Self {
                crate::data_structure::LeftOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (ds::Nat, ()) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod right_operand {
        use term::Heaped;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (ds::Nat, ()),
        > for ds::RightOperand {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (ds::Nat, ())) -> Self {
                crate::data_structure::RightOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (ds::Nat, ()) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod f {
        use term::Heaped;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (ds::Nat, ()),
        > for ds::F {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (ds::Nat, ())) -> Self {
                crate::data_structure::F {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (ds::Nat, ()) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod sum {
        use tymetafuncspec_core::Set;
        use term::MapsTmf;
        use term::Heaped;
        use crate::words as w;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Set<<Self as Heaped>::Heap, ds::Nat>,
                >>::Tmf,
                (),
            ),
        > for ds::Sum {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        Set<<Self as Heaped>::Heap, ds::Nat>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::Sum {
                    set: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Set<<Self as Heaped>::Heap, ds::Nat>,
                >>::Tmf,
                (),
            ) {
                (self.set, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod nat {
        use tymetafuncspec_core::IdxBox;
        use tymetafuncspec_core::BoundedNat;
        use term::MapsTmf;
        use term::Heaped;
        use crate::words as w;
        use crate::data_structure as ds;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    BoundedNat<<Self as Heaped>::Heap>,
                >>::Tmf,
                (),
            ),
        > for ds::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        BoundedNat<<Self as Heaped>::Heap>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::Nat::NatLit(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::data_structure::Nat::NatLit(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    BoundedNat<<Self as Heaped>::Heap>,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::data_structure::Nat::NatLit(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    IdxBox<<Self as Heaped>::Heap, ds::F>,
                >>::Tmf,
                (),
            ),
        > for ds::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        IdxBox<<Self as Heaped>::Heap, ds::F>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::Nat::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::data_structure::Nat::F(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    IdxBox<<Self as Heaped>::Heap, ds::F>,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::data_structure::Nat::F(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    IdxBox<<Self as Heaped>::Heap, ds::Plus>,
                >>::Tmf,
                (),
            ),
        > for ds::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        w::L,
                        IdxBox<<Self as Heaped>::Heap, ds::Plus>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::data_structure::Nat::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::data_structure::Nat::Plus(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    IdxBox<<Self as Heaped>::Heap, ds::Plus>,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::data_structure::Nat::Plus(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl term::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (ds::Sum, ()),
        > for ds::Nat {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (ds::Sum, ())) -> Self {
                crate::data_structure::Nat::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::data_structure::Nat::Sum(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (ds::Sum, ()) {
                match self {
                    crate::data_structure::Nat::Sum(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
}
/// @generated by [term_specialized_impl_gen::gen_transitive_ccf_mod]
pub mod transitive_ccf {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::BoundedNat;
    use crate::data_structure as ds;
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::Nat> for ds::LeftOperand {
        type Intermediary = ds::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::Nat> for ds::RightOperand {
        type Intermediary = ds::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::Nat> for ds::F {
        type Intermediary = ds::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, Set<ds::Heap, ds::Nat>> for ds::Sum {
        type Intermediary = Set<ds::Heap, ds::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::Plus> for ds::Nat {
        type Intermediary = IdxBox<ds::Heap, ds::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::F> for ds::Nat {
        type Intermediary = IdxBox<ds::Heap, ds::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::Sum> for ds::Nat {
        type Intermediary = ds::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, BoundedNat<ds::Heap>> for ds::Nat {
        type Intermediary = BoundedNat<ds::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::Plus> for IdxBox<ds::Heap, ds::Plus> {
        type Intermediary = ds::Plus;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::F> for IdxBox<ds::Heap, ds::F> {
        type Intermediary = ds::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl term::TransitivelyUnitCcf<ds::Heap, ds::Nat> for IdxBox<ds::Heap, ds::F> {
        type Intermediary = ds::F;
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<ds::Heap, (ds::LeftOperand, (ds::RightOperand, ()))>
    for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (ds::LeftOperand, (ds::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<ds::Heap, (ds::LeftOperand, (ds::RightOperand, ()))>
    for ds::Nat {
        type Intermediary = ds::Plus;
        type Intermediaries = (ds::LeftOperand, (ds::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<ds::Heap, (ds::LeftOperand, (ds::Nat, ()))>
    for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (ds::LeftOperand, (ds::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<ds::Heap, (ds::Nat, (ds::RightOperand, ()))>
    for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (ds::LeftOperand, (ds::RightOperand, ()));
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl term::TransitivelyAllCcf<ds::Heap, (ds::Nat, (ds::Nat, ()))> for ds::Plus {
        type Intermediary = ds::Plus;
        type Intermediaries = (ds::LeftOperand, (ds::RightOperand, ()));
    }
}
/// @generated by [term_specialized_impl_gen::gen_ccf_auto_impls]
pub mod ccf_auto_impls {
    term::auto_impl_ccf!(crate ::data_structure::Heap, crate ::data_structure::Plus);
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, crate ::data_structure::LeftOperand
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, crate ::data_structure::RightOperand
    );
    term::auto_impl_ccf!(crate ::data_structure::Heap, crate ::data_structure::F);
    term::auto_impl_ccf!(crate ::data_structure::Heap, crate ::data_structure::Sum);
    term::auto_impl_ccf!(crate ::data_structure::Heap, crate ::data_structure::Nat);
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::Set < crate
        ::data_structure::Heap, crate ::data_structure::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::BoundedNat < crate
        ::data_structure::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::IdxBox < crate
        ::data_structure::Heap, crate ::data_structure::F, >
    );
    term::auto_impl_ccf!(
        crate ::data_structure::Heap, tymetafuncspec_core::IdxBox < crate
        ::data_structure::Heap, crate ::data_structure::Plus, >
    );
}
/// @generated by [term_specialized_impl_gen::gen_maps_tmf]
pub mod maps_tmf_impls {
    use term::CanonicallyConstructibleFrom;
    use crate::words as w;
    use crate::data_structure as ds;
    impl<TmfMonomorphization> term::MapsTmf<w::L, TmfMonomorphization> for ds::Heap
    where
        TmfMonomorphization: CanonicallyConstructibleFrom<
            Self,
            (TmfMonomorphization, ()),
        >,
    {
        type Tmf = TmfMonomorphization;
    }
}
