#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_trait_gen::generate]
use tymetafuncspec_core::SetHeapBak;
use tymetafuncspec_core::Set;
use tymetafuncspec_core::BoundedNatHeapBak;
use tymetafuncspec_core::BoundedNat;
use term::SuperHeap;
use term::MapsTmf;
use crate::words as w;
use crate::term_trait::owned as tto;
/// @generated by [term_trait_gen::heap_trait]
pub trait Heap: Sized + MapsTmf<
        w::L,
        Set<Self, Self::Nat>,
    > + MapsTmf<
        w::L,
        BoundedNat<Self>,
    > + SuperHeap<SetHeapBak<Self, Self::Nat>> + SuperHeap<BoundedNatHeapBak<Self>> {
    type Plus: tto::Plus<Heap = Self>;
    type LeftOperand: tto::LeftOperand<Heap = Self>;
    type RightOperand: tto::RightOperand<Heap = Self>;
    type F: tto::F<Heap = Self>;
    type Sum: tto::Sum<Heap = Self>;
    type Nat: tto::Nat<Heap = Self>;
}
/// @generated by [term_trait_gen::owned::generate]
pub mod owned {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use term::MapsTmf;
    use term::Heaped;
    use term::CanonicallyConstructibleFrom;
    use crate::words as w;
    use crate::term_trait as tt;
    pub trait Plus: Heaped + CanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as tt::Heap>::LeftOperand,
                (<<Self as Heaped>::Heap as tt::Heap>::RightOperand, ()),
            ),
        >
    where
        <Self as Heaped>::Heap: tt::Heap,
    {}
    pub trait LeftOperand: Heaped + CanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (<<Self as Heaped>::Heap as tt::Heap>::Nat, ()),
        >
    where
        <Self as Heaped>::Heap: tt::Heap,
    {}
    pub trait RightOperand: Heaped + CanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (<<Self as Heaped>::Heap as tt::Heap>::Nat, ()),
        >
    where
        <Self as Heaped>::Heap: tt::Heap,
    {}
    pub trait F: Heaped + CanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (<<Self as Heaped>::Heap as tt::Heap>::Nat, ()),
        >
    where
        <Self as Heaped>::Heap: tt::Heap,
    {}
    pub trait Sum: Heaped + CanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    Set<
                        <Self as Heaped>::Heap,
                        <<Self as Heaped>::Heap as tt::Heap>::Nat,
                    >,
                >>::Tmf,
                (),
            ),
        >
    where
        <Self as Heaped>::Heap: tt::Heap,
    {}
    pub trait Nat: Heaped + CanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    w::L,
                    BoundedNat<<Self as Heaped>::Heap>,
                >>::Tmf,
                (),
            ),
        > + CanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (<<Self as Heaped>::Heap as tt::Heap>::F, ()),
        > + CanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (<<Self as Heaped>::Heap as tt::Heap>::Plus, ()),
        > + CanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (<<Self as Heaped>::Heap as tt::Heap>::Sum, ()),
        >
    where
        <Self as Heaped>::Heap: tt::Heap,
    {}
}
