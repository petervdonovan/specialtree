#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_pattern_match_strategy_provider_impl_gen::generate]
use crate::pattern_match_strategy as pms;
use crate::data_structure as ds;
/// @generated by [term_pattern_match_strategy_provider_impl_gen::impl_adt_for]
impl term::case_split::Adt for ds::Plus {
    type PatternMatchStrategyProvider = pms::PatternMatchStrategyProvider<ds::Heap>;
}
/// @generated by [term_pattern_match_strategy_provider_impl_gen::impl_adt_for]
impl term::case_split::Adt for ds::LeftOperand {
    type PatternMatchStrategyProvider = pms::PatternMatchStrategyProvider<ds::Heap>;
}
/// @generated by [term_pattern_match_strategy_provider_impl_gen::impl_adt_for]
impl term::case_split::Adt for ds::RightOperand {
    type PatternMatchStrategyProvider = pms::PatternMatchStrategyProvider<ds::Heap>;
}
/// @generated by [term_pattern_match_strategy_provider_impl_gen::impl_adt_for]
impl term::case_split::Adt for ds::F {
    type PatternMatchStrategyProvider = pms::PatternMatchStrategyProvider<ds::Heap>;
}
/// @generated by [term_pattern_match_strategy_provider_impl_gen::impl_adt_for]
impl term::case_split::Adt for ds::Sum {
    type PatternMatchStrategyProvider = pms::PatternMatchStrategyProvider<ds::Heap>;
}
/// @generated by [term_pattern_match_strategy_provider_impl_gen::impl_adt_for]
impl term::case_split::Adt for ds::Nat {
    type PatternMatchStrategyProvider = pms::PatternMatchStrategyProvider<ds::Heap>;
}
