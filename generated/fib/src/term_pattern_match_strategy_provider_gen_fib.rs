#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_pattern_match_strategy_provider_gen::generate]
use words::Implements;
use tymetafuncspec_core::Set;
use tymetafuncspec_core::BoundedNat;
use term::case_split::HasPatternMatchStrategyForWord;
use term::MapsTmf;
use std::marker::PhantomData;
use crate::words_mod_fib as wmf;
use crate::words_mod_fib::sorts as wmfs;
use crate::term_trait_gen_fib as ttgf;
impl<Heap: ttgf::Heap, T> term::case_split::HasPatternMatchStrategyFor<T>
for PatternMatchStrategyProvider<Heap>
where
    T: Implements<Heap, wmf::L>,
    PatternMatchStrategyProvider<Heap>: HasPatternMatchStrategyForWord<T::LWord>,
{
    type Strategy = <PatternMatchStrategyProvider<
        Heap,
    > as HasPatternMatchStrategyForWord<T::LWord>>::Strategy;
}
pub struct PatternMatchStrategyProvider<Heap>(PhantomData<Heap>);
/// @generated by [term_pattern_match_strategy_provider_gen::impl_has_pattern_match_strategy_for]
impl<Heap: ttgf::Heap> term::case_split::HasPatternMatchStrategyForWord<wmfs::Plus>
for PatternMatchStrategyProvider<Heap> {
    type Strategy = ((Heap::LeftOperand, (Heap::RightOperand, ())), ());
}
/// @generated by [term_pattern_match_strategy_provider_gen::impl_has_pattern_match_strategy_for]
impl<
    Heap: ttgf::Heap,
> term::case_split::HasPatternMatchStrategyForWord<wmfs::LeftOperand>
for PatternMatchStrategyProvider<Heap> {
    type Strategy = ((Heap::Nat, ()), ());
}
/// @generated by [term_pattern_match_strategy_provider_gen::impl_has_pattern_match_strategy_for]
impl<
    Heap: ttgf::Heap,
> term::case_split::HasPatternMatchStrategyForWord<wmfs::RightOperand>
for PatternMatchStrategyProvider<Heap> {
    type Strategy = ((Heap::Nat, ()), ());
}
/// @generated by [term_pattern_match_strategy_provider_gen::impl_has_pattern_match_strategy_for]
impl<Heap: ttgf::Heap> term::case_split::HasPatternMatchStrategyForWord<wmfs::F>
for PatternMatchStrategyProvider<Heap> {
    type Strategy = ((Heap::Nat, ()), ());
}
/// @generated by [term_pattern_match_strategy_provider_gen::impl_has_pattern_match_strategy_for]
impl<Heap: ttgf::Heap> term::case_split::HasPatternMatchStrategyForWord<wmfs::Sum>
for PatternMatchStrategyProvider<Heap> {
    type Strategy = ((<Heap as MapsTmf<wmf::L, Set<Heap, Heap::Nat>>>::Tmf, ()), ());
}
/// @generated by [term_pattern_match_strategy_provider_gen::impl_has_pattern_match_strategy_for]
impl<Heap: ttgf::Heap> term::case_split::HasPatternMatchStrategyForWord<wmfs::Nat>
for PatternMatchStrategyProvider<Heap> {
    type Strategy = (
        (<Heap as MapsTmf<wmf::L, BoundedNat<Heap>>>::Tmf, ()),
        ((Heap::F, ()), ((Heap::Plus, ()), ((Heap::Sum, ()), ()))),
    );
}
