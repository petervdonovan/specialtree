#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [words::words_impls]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::Pair;
use tymetafuncspec_core::Maybe;
use tymetafuncspec_core::Either;
use tymetafuncspec_core::BoundedNat;
use std_parse_metadata::ParseMetadata;
use std_parse_error::ParseError;
use pattern_tmf::OrVariableZeroOrMore;
use fib::l_words_mod_r_fib::sorts::Sum;
use fib::l_words_mod_r_fib::sorts::Right_operand;
use fib::l_words_mod_r_fib::sorts::Plus;
use fib::l_words_mod_r_fib::sorts::Nat;
use fib::l_words_mod_r_fib::sorts::Left_operand;
use fib::l_words_mod_r_fib::sorts::F;
use fib::l_words_mod_r_fib::L;
use crate::l_term_specialized_r_l_cst_l_autoboxed_l_file_l_pattern_fib_r_r_r_r as ltsrlclalflpfrrrr;
impl words::Implements<ltsrlclalflpfrrrr::Heap, L>
for Either<
    ltsrlclalflpfrrrr::Heap,
    Pair<
        ltsrlclalflpfrrrr::Heap,
        ltsrlclalflpfrrrr::F,
        Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
    >,
    ParseError<ltsrlclalflpfrrrr::Heap>,
> {
    type LWord = F;
}
impl words::Implements<ltsrlclalflpfrrrr::Heap, L>
for Either<
    ltsrlclalflpfrrrr::Heap,
    Pair<
        ltsrlclalflpfrrrr::Heap,
        ltsrlclalflpfrrrr::Left_operand,
        Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
    >,
    ParseError<ltsrlclalflpfrrrr::Heap>,
> {
    type LWord = Left_operand;
}
impl words::Implements<ltsrlclalflpfrrrr::Heap, L>
for Either<
    ltsrlclalflpfrrrr::Heap,
    Pair<
        ltsrlclalflpfrrrr::Heap,
        ltsrlclalflpfrrrr::Plus,
        Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
    >,
    ParseError<ltsrlclalflpfrrrr::Heap>,
> {
    type LWord = Plus;
}
impl words::Implements<ltsrlclalflpfrrrr::Heap, L>
for Either<
    ltsrlclalflpfrrrr::Heap,
    Pair<
        ltsrlclalflpfrrrr::Heap,
        ltsrlclalflpfrrrr::Right_operand,
        Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
    >,
    ParseError<ltsrlclalflpfrrrr::Heap>,
> {
    type LWord = Right_operand;
}
impl words::Implements<ltsrlclalflpfrrrr::Heap, L>
for Either<
    ltsrlclalflpfrrrr::Heap,
    Pair<
        ltsrlclalflpfrrrr::Heap,
        ltsrlclalflpfrrrr::Sum,
        Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
    >,
    ParseError<ltsrlclalflpfrrrr::Heap>,
> {
    type LWord = Sum;
}
impl words::Implements<ltsrlclalflpfrrrr::Heap, L>
for Either<
    ltsrlclalflpfrrrr::Heap,
    Pair<
        ltsrlclalflpfrrrr::Heap,
        ltsrlclalflpfrrrr::Nat,
        Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
    >,
    ParseError<ltsrlclalflpfrrrr::Heap>,
> {
    type LWord = Nat;
}
impl words::Implements<ltsrlclalflpfrrrr::Heap, L>
for Either<
    ltsrlclalflpfrrrr::Heap,
    Pair<
        ltsrlclalflpfrrrr::Heap,
        Set<
            ltsrlclalflpfrrrr::Heap,
            Either<
                ltsrlclalflpfrrrr::Heap,
                Pair<
                    ltsrlclalflpfrrrr::Heap,
                    OrVariableZeroOrMore<
                        ltsrlclalflpfrrrr::Heap,
                        Either<
                            ltsrlclalflpfrrrr::Heap,
                            Pair<
                                ltsrlclalflpfrrrr::Heap,
                                ltsrlclalflpfrrrr::Nat,
                                Maybe<
                                    ltsrlclalflpfrrrr::Heap,
                                    ParseMetadata<ltsrlclalflpfrrrr::Heap>,
                                >,
                            >,
                            ParseError<ltsrlclalflpfrrrr::Heap>,
                        >,
                    >,
                    Maybe<
                        ltsrlclalflpfrrrr::Heap,
                        ParseMetadata<ltsrlclalflpfrrrr::Heap>,
                    >,
                >,
                ParseError<ltsrlclalflpfrrrr::Heap>,
            >,
        >,
        Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
    >,
    ParseError<ltsrlclalflpfrrrr::Heap>,
> {
    type LWord = Set<(), Nat>;
}
impl words::Implements<ltsrlclalflpfrrrr::Heap, L>
for Either<
    ltsrlclalflpfrrrr::Heap,
    Pair<
        ltsrlclalflpfrrrr::Heap,
        BoundedNat<ltsrlclalflpfrrrr::Heap>,
        Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
    >,
    ParseError<ltsrlclalflpfrrrr::Heap>,
> {
    type LWord = BoundedNat<()>;
}
