#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [words::words_impls]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::BoundedNat;
use pattern_tmf::OrVariableZeroOrMore;
use pattern_tmf::OrVariable;
use pattern_tmf::NamedPattern;
use file_tmf::File;
use fib_pat_ds::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Sum;
use fib_pat_ds::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Right_operand;
use fib_pat_ds::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Plus;
use fib_pat_ds::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat;
use fib_pat_ds::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Left_operand;
use fib_pat_ds::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap;
use fib_pat_ds::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem;
use fib_pat_ds::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::F;
use fib_pat::l_words_mod_r_l_file_l_pattern_fib_r_r::L;
impl words::Implements<Heap, L> for F {
    type LWord = F;
}
impl words::Implements<Heap, L> for Left_operand {
    type LWord = Left_operand;
}
impl words::Implements<Heap, L> for Plus {
    type LWord = Plus;
}
impl words::Implements<Heap, L> for Right_operand {
    type LWord = Right_operand;
}
impl words::Implements<Heap, L> for Sum {
    type LWord = Sum;
}
impl words::Implements<Heap, L> for Nat {
    type LWord = Nat;
}
impl words::Implements<Heap, L> for FileItem {
    type LWord = FileItem;
}
impl words::Implements<Heap, L> for OrVariable<Heap, Nat> {
    type LWord = OrVariable<(), Nat>;
}
impl words::Implements<Heap, L> for OrVariable<Heap, Left_operand> {
    type LWord = OrVariable<(), Left_operand>;
}
impl words::Implements<Heap, L> for OrVariable<Heap, Right_operand> {
    type LWord = OrVariable<(), Right_operand>;
}
impl words::Implements<Heap, L>
for OrVariable<Heap, Set<Heap, OrVariableZeroOrMore<Heap, Nat>>> {
    type LWord = OrVariable<(), Set<(), OrVariableZeroOrMore<(), Nat>>>;
}
impl words::Implements<Heap, L> for Set<Heap, OrVariableZeroOrMore<Heap, Nat>> {
    type LWord = Set<(), OrVariableZeroOrMore<(), Nat>>;
}
impl words::Implements<Heap, L> for OrVariableZeroOrMore<Heap, Nat> {
    type LWord = OrVariableZeroOrMore<(), Nat>;
}
impl words::Implements<Heap, L> for BoundedNat<Heap> {
    type LWord = BoundedNat<()>;
}
impl words::Implements<Heap, L> for NamedPattern<Heap, F> {
    type LWord = NamedPattern<(), F>;
}
impl words::Implements<Heap, L> for NamedPattern<Heap, Left_operand> {
    type LWord = NamedPattern<(), Left_operand>;
}
impl words::Implements<Heap, L> for NamedPattern<Heap, Plus> {
    type LWord = NamedPattern<(), Plus>;
}
impl words::Implements<Heap, L> for NamedPattern<Heap, Right_operand> {
    type LWord = NamedPattern<(), Right_operand>;
}
impl words::Implements<Heap, L> for NamedPattern<Heap, Sum> {
    type LWord = NamedPattern<(), Sum>;
}
impl words::Implements<Heap, L> for File<Heap, FileItem> {
    type LWord = File<(), FileItem>;
}
