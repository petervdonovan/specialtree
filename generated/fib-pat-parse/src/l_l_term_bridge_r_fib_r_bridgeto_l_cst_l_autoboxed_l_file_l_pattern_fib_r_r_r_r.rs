#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
use crate::l_term_specialized_r_l_cst_l_autoboxed_l_file_l_pattern_fib_r_r_r_r as ltsrlclalflpfrrrr;
/// @generated by [term_bridge_gen::generate_heap]
impl fib::l_term_trait_r_fib::Heap for ltsrlclalflpfrrrr::Heap {}
/// @generated by [words::words_inverse_impls]
pub mod words_inverse_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::Pair;
    use tymetafuncspec_core::Maybe;
    use tymetafuncspec_core::Either;
    use tymetafuncspec_core::BoundedNat;
    use std_parse_metadata::ParseMetadata;
    use std_parse_error::ParseError;
    use pattern_tmf::OrVariableZeroOrMore;
    use fib::l_words_mod_r_fib::sorts::Sum;
    use fib::l_words_mod_r_fib::sorts::Right_operand;
    use fib::l_words_mod_r_fib::sorts::Plus;
    use fib::l_words_mod_r_fib::sorts::Nat;
    use fib::l_words_mod_r_fib::sorts::Left_operand;
    use fib::l_words_mod_r_fib::sorts::F;
    use fib::l_words_mod_r_fib::L;
    use crate::l_term_specialized_r_l_cst_l_autoboxed_l_file_l_pattern_fib_r_r_r_r as ltsrlclalflpfrrrr;
    impl words::InverseImplements<L, F> for ltsrlclalflpfrrrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::F,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::F,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Left_operand> for ltsrlclalflpfrrrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::Left_operand,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::Left_operand,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Plus> for ltsrlclalflpfrrrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::Plus,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::Plus,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Right_operand> for ltsrlclalflpfrrrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::Right_operand,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::Right_operand,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Sum> for ltsrlclalflpfrrrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::Sum,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::Sum,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Nat> for ltsrlclalflpfrrrr::Heap {
        type ExternBehavioralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::Nat,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
        type StructuralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                ltsrlclalflpfrrrr::Nat,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, Set<(), Nat>> for ltsrlclalflpfrrrr::Heap {
        type ExternBehavioralImplementor = Set<
            ltsrlclalflpfrrrr::Heap,
            Either<
                ltsrlclalflpfrrrr::Heap,
                Pair<
                    ltsrlclalflpfrrrr::Heap,
                    OrVariableZeroOrMore<
                        ltsrlclalflpfrrrr::Heap,
                        Either<
                            ltsrlclalflpfrrrr::Heap,
                            Pair<
                                ltsrlclalflpfrrrr::Heap,
                                ltsrlclalflpfrrrr::Nat,
                                Maybe<
                                    ltsrlclalflpfrrrr::Heap,
                                    ParseMetadata<ltsrlclalflpfrrrr::Heap>,
                                >,
                            >,
                            ParseError<ltsrlclalflpfrrrr::Heap>,
                        >,
                    >,
                    Maybe<
                        ltsrlclalflpfrrrr::Heap,
                        ParseMetadata<ltsrlclalflpfrrrr::Heap>,
                    >,
                >,
                ParseError<ltsrlclalflpfrrrr::Heap>,
            >,
        >;
        type StructuralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                Set<
                    ltsrlclalflpfrrrr::Heap,
                    Either<
                        ltsrlclalflpfrrrr::Heap,
                        Pair<
                            ltsrlclalflpfrrrr::Heap,
                            OrVariableZeroOrMore<
                                ltsrlclalflpfrrrr::Heap,
                                Either<
                                    ltsrlclalflpfrrrr::Heap,
                                    Pair<
                                        ltsrlclalflpfrrrr::Heap,
                                        ltsrlclalflpfrrrr::Nat,
                                        Maybe<
                                            ltsrlclalflpfrrrr::Heap,
                                            ParseMetadata<ltsrlclalflpfrrrr::Heap>,
                                        >,
                                    >,
                                    ParseError<ltsrlclalflpfrrrr::Heap>,
                                >,
                            >,
                            Maybe<
                                ltsrlclalflpfrrrr::Heap,
                                ParseMetadata<ltsrlclalflpfrrrr::Heap>,
                            >,
                        >,
                        ParseError<ltsrlclalflpfrrrr::Heap>,
                    >,
                >,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
    }
    impl words::InverseImplements<L, BoundedNat<()>> for ltsrlclalflpfrrrr::Heap {
        type ExternBehavioralImplementor = BoundedNat<ltsrlclalflpfrrrr::Heap>;
        type StructuralImplementor = Either<
            ltsrlclalflpfrrrr::Heap,
            Pair<
                ltsrlclalflpfrrrr::Heap,
                BoundedNat<ltsrlclalflpfrrrr::Heap>,
                Maybe<ltsrlclalflpfrrrr::Heap, ParseMetadata<ltsrlclalflpfrrrr::Heap>>,
            >,
            ParseError<ltsrlclalflpfrrrr::Heap>,
        >;
    }
}
