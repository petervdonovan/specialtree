#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [parse_gen::generate]
use pmsp::AdtMetadata;
use parse_adt::cstfy::Cstfy;
use parse_adt::Parser;
use fib_pat::words_mod_pattern::L;
use fib_parse::term_specialized_cst::Sum;
use fib_parse::term_specialized_cst::RightOperand;
use fib_parse::term_specialized_cst::Plus;
use fib_parse::term_specialized_cst::Nat;
use fib_parse::term_specialized_cst::LeftOperand;
use fib_parse::term_specialized_cst::Heap;
use fib_parse::term_specialized_cst::F;
/// @generated by [parse_gen::generate_parse]
pub fn plus(source: &str) -> (Heap, Cstfy<Heap, Plus>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = fib_parse::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        AdtMetadata,
        Cstfy<Heap, Plus>,
        Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn left_operand(source: &str) -> (Heap, Cstfy<Heap, LeftOperand>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = fib_parse::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        AdtMetadata,
        Cstfy<Heap, LeftOperand>,
        Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn right_operand(source: &str) -> (Heap, Cstfy<Heap, RightOperand>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = fib_parse::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        AdtMetadata,
        Cstfy<Heap, RightOperand>,
        Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn f(source: &str) -> (Heap, Cstfy<Heap, F>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = fib_parse::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        AdtMetadata,
        Cstfy<Heap, F>,
        Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn sum(source: &str) -> (Heap, Cstfy<Heap, Sum>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = fib_parse::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        AdtMetadata,
        Cstfy<Heap, Sum>,
        Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
/// @generated by [parse_gen::generate_parse]
pub fn nat(source: &str) -> (Heap, Cstfy<Heap, Nat>) {
    let mut parser = parse_adt::Parser::new(source);
    let mut heap = fib_parse::term_specialized_cst::Heap::default();
    let ret = <Parser<
        '_,
        L,
    > as covisit::Covisit<
        AdtMetadata,
        Cstfy<Heap, Nat>,
        Heap,
        L,
    >>::covisit(&mut parser, &mut heap);
    (heap, ret)
}
