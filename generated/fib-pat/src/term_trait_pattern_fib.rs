#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_trait_gen::generate]
use tymetafuncspec_core::SetHeapBak;
use tymetafuncspec_core::Set;
use tymetafuncspec_core::BoundedNatHeapBak;
use tymetafuncspec_core::BoundedNat;
use term::SuperHeap;
use term::MapsTmf;
use pattern_tmf::OrVariableZeroOrMoreHeapBak;
use pattern_tmf::OrVariableZeroOrMore;
use pattern_tmf::OrVariableHeapBak;
use pattern_tmf::OrVariable;
use crate::words_mod_pattern_fib as wmpf;
use crate::term_trait_pattern_fib::owned as ttpfo;
/// @generated by [term_trait_gen::heap_trait]
pub trait Heap: Sized + MapsTmf<
        wmpf::L,
        OrVariable<Self, Self::LeftOperand>,
    > + MapsTmf<
        wmpf::L,
        OrVariable<Self, Self::RightOperand>,
    > + MapsTmf<
        wmpf::L,
        OrVariable<Self, Self::Nat>,
    > + MapsTmf<
        wmpf::L,
        OrVariable<Self, Set<Self, OrVariableZeroOrMore<Self, Self::Nat>>>,
    > + MapsTmf<
        wmpf::L,
        Set<Self, OrVariableZeroOrMore<Self, Self::Nat>>,
    > + MapsTmf<
        wmpf::L,
        OrVariableZeroOrMore<Self, Self::Nat>,
    > + MapsTmf<
        wmpf::L,
        BoundedNat<Self>,
    > + SuperHeap<
        OrVariableHeapBak<Self, Self::LeftOperand>,
    > + SuperHeap<
        OrVariableHeapBak<Self, Self::RightOperand>,
    > + SuperHeap<
        OrVariableHeapBak<Self, Self::Nat>,
    > + SuperHeap<
        OrVariableHeapBak<Self, Set<Self, OrVariableZeroOrMore<Self, Self::Nat>>>,
    > + SuperHeap<
        SetHeapBak<Self, OrVariableZeroOrMore<Self, Self::Nat>>,
    > + SuperHeap<
        OrVariableZeroOrMoreHeapBak<Self, Self::Nat>,
    > + SuperHeap<BoundedNatHeapBak<Self>> {
    type Plus: ttpfo::Plus<Self>;
    type LeftOperand: ttpfo::LeftOperand<Self>;
    type RightOperand: ttpfo::RightOperand<Self>;
    type F: ttpfo::F<Self>;
    type Sum: ttpfo::Sum<Self>;
    type Nat: ttpfo::Nat<Self>;
}
/// @generated by [term_trait_gen::owned::generate]
pub mod owned {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use term::MapsTmf;
    use pattern_tmf::OrVariableZeroOrMore;
    use pattern_tmf::OrVariable;
    use crate::words_mod_pattern_fib as wmpf;
    use crate::term_trait_pattern_fib as ttpf;
    use ccf::CanonicallyConstructibleFrom;
    pub trait Plus<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (
                <Heap as MapsTmf<
                    wmpf::L,
                    OrVariable<Heap, <Heap as ttpf::Heap>::LeftOperand>,
                >>::TmfTo,
                (
                    <Heap as MapsTmf<
                        wmpf::L,
                        OrVariable<Heap, <Heap as ttpf::Heap>::RightOperand>,
                    >>::TmfTo,
                    (),
                ),
            ),
        >
    where
        Heap: crate::term_trait_pattern_fib::Heap,
    {}
    pub trait LeftOperand<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (
                <Heap as MapsTmf<
                    wmpf::L,
                    OrVariable<Heap, <Heap as ttpf::Heap>::Nat>,
                >>::TmfTo,
                (),
            ),
        >
    where
        Heap: crate::term_trait_pattern_fib::Heap,
    {}
    pub trait RightOperand<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (
                <Heap as MapsTmf<
                    wmpf::L,
                    OrVariable<Heap, <Heap as ttpf::Heap>::Nat>,
                >>::TmfTo,
                (),
            ),
        >
    where
        Heap: crate::term_trait_pattern_fib::Heap,
    {}
    pub trait F<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (
                <Heap as MapsTmf<
                    wmpf::L,
                    OrVariable<Heap, <Heap as ttpf::Heap>::Nat>,
                >>::TmfTo,
                (),
            ),
        >
    where
        Heap: crate::term_trait_pattern_fib::Heap,
    {}
    pub trait Sum<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (
                <Heap as MapsTmf<
                    wmpf::L,
                    OrVariable<
                        Heap,
                        Set<Heap, OrVariableZeroOrMore<Heap, <Heap as ttpf::Heap>::Nat>>,
                    >,
                >>::TmfTo,
                (),
            ),
        >
    where
        Heap: crate::term_trait_pattern_fib::Heap,
    {}
    pub trait Nat<
        Heap,
    >: CanonicallyConstructibleFrom<
            Heap,
            (<Heap as MapsTmf<wmpf::L, BoundedNat<Heap>>>::TmfTo, ()),
        > + CanonicallyConstructibleFrom<
            Heap,
            (<Heap as ttpf::Heap>::F, ()),
        > + CanonicallyConstructibleFrom<
            Heap,
            (<Heap as ttpf::Heap>::Plus, ()),
        > + CanonicallyConstructibleFrom<Heap, (<Heap as ttpf::Heap>::Sum, ())>
    where
        Heap: crate::term_trait_pattern_fib::Heap,
    {}
}
