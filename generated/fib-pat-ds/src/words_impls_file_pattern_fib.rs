#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [words::words_impls]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::BoundedNat;
use pattern_tmf::OrVariableZeroOrMore;
use pattern_tmf::OrVariable;
use pattern_tmf::NamedPattern;
use file_tmf::File;
use fib_pat::words_mod_file_pattern_fib::sorts::Sum;
use fib_pat::words_mod_file_pattern_fib::sorts::RightOperand;
use fib_pat::words_mod_file_pattern_fib::sorts::Plus;
use fib_pat::words_mod_file_pattern_fib::sorts::Nat;
use fib_pat::words_mod_file_pattern_fib::sorts::LeftOperand;
use fib_pat::words_mod_file_pattern_fib::sorts::FileItem;
use fib_pat::words_mod_file_pattern_fib::sorts::F;
use fib_pat::words_mod_file_pattern_fib::L;
use crate::term_specialized_file_pattern_fib as tsfpf;
impl words::Implements<tsfpf::Heap, L> for tsfpf::Plus {
    type LWord = Plus;
}
impl words::Implements<tsfpf::Heap, L> for tsfpf::LeftOperand {
    type LWord = LeftOperand;
}
impl words::Implements<tsfpf::Heap, L> for tsfpf::RightOperand {
    type LWord = RightOperand;
}
impl words::Implements<tsfpf::Heap, L> for tsfpf::F {
    type LWord = F;
}
impl words::Implements<tsfpf::Heap, L> for tsfpf::Sum {
    type LWord = Sum;
}
impl words::Implements<tsfpf::Heap, L> for tsfpf::Nat {
    type LWord = Nat;
}
impl words::Implements<tsfpf::Heap, L> for tsfpf::FileItem {
    type LWord = FileItem;
}
impl words::Implements<tsfpf::Heap, L> for OrVariable<tsfpf::Heap, tsfpf::LeftOperand> {
    type LWord = OrVariable<(), LeftOperand>;
}
impl words::Implements<tsfpf::Heap, L> for OrVariable<tsfpf::Heap, tsfpf::RightOperand> {
    type LWord = OrVariable<(), RightOperand>;
}
impl words::Implements<tsfpf::Heap, L> for OrVariable<tsfpf::Heap, tsfpf::Nat> {
    type LWord = OrVariable<(), Nat>;
}
impl words::Implements<tsfpf::Heap, L>
for OrVariable<
    tsfpf::Heap,
    Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>,
> {
    type LWord = OrVariable<(), Set<(), OrVariableZeroOrMore<(), Nat>>>;
}
impl words::Implements<tsfpf::Heap, L>
for Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>> {
    type LWord = Set<(), OrVariableZeroOrMore<(), Nat>>;
}
impl words::Implements<tsfpf::Heap, L>
for OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat> {
    type LWord = OrVariableZeroOrMore<(), Nat>;
}
impl words::Implements<tsfpf::Heap, L> for BoundedNat<tsfpf::Heap> {
    type LWord = BoundedNat<()>;
}
impl words::Implements<tsfpf::Heap, L> for NamedPattern<tsfpf::Heap, tsfpf::Plus> {
    type LWord = NamedPattern<(), Plus>;
}
impl words::Implements<tsfpf::Heap, L>
for NamedPattern<tsfpf::Heap, tsfpf::LeftOperand> {
    type LWord = NamedPattern<(), LeftOperand>;
}
impl words::Implements<tsfpf::Heap, L>
for NamedPattern<tsfpf::Heap, tsfpf::RightOperand> {
    type LWord = NamedPattern<(), RightOperand>;
}
impl words::Implements<tsfpf::Heap, L> for NamedPattern<tsfpf::Heap, tsfpf::F> {
    type LWord = NamedPattern<(), F>;
}
impl words::Implements<tsfpf::Heap, L> for NamedPattern<tsfpf::Heap, tsfpf::Sum> {
    type LWord = NamedPattern<(), Sum>;
}
impl words::Implements<tsfpf::Heap, L> for File<tsfpf::Heap, tsfpf::FileItem> {
    type LWord = File<(), FileItem>;
}
