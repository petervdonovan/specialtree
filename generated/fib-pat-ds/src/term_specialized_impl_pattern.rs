#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_impl_gen::generate]
use crate::term_specialized_pattern as tsp;
/// @generated by [term_specialized_impl_gen::gen_heap_impl]
impl fib_pat::term_trait_pattern::Heap for tsp::Heap {
    type Plus = tsp::Plus;
    type LeftOperand = tsp::LeftOperand;
    type RightOperand = tsp::RightOperand;
    type F = tsp::F;
    type Sum = tsp::Sum;
    type Nat = tsp::Nat;
}
/// @generated by [term_specialized_impl_gen::gen_owned_mod]
pub mod owned_impls {
    use crate::term_specialized_pattern as tsp;
    impl fib_pat::term_trait_pattern::owned::Plus<tsp::Heap> for tsp::Plus {}
    impl fib_pat::term_trait_pattern::owned::LeftOperand<tsp::Heap>
    for tsp::LeftOperand {}
    impl fib_pat::term_trait_pattern::owned::RightOperand<tsp::Heap>
    for tsp::RightOperand {}
    impl fib_pat::term_trait_pattern::owned::F<tsp::Heap> for tsp::F {}
    impl fib_pat::term_trait_pattern::owned::Sum<tsp::Heap> for tsp::Sum {}
    impl fib_pat::term_trait_pattern::owned::Nat<tsp::Heap> for tsp::Nat {}
}
/// @generated by [term_specialized_impl_gen::gen_ccf_mod]
pub mod ccf_impls {
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod plus {
        use term::MapsTmf;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use fib_pat::words_mod_pattern::L;
        use crate::term_specialized_pattern as tsp;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    OrVariable<<Self as Heaped>::Heap, tsp::LeftOperand>,
                >>::Tmf,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        OrVariable<<Self as Heaped>::Heap, tsp::RightOperand>,
                    >>::Tmf,
                    (),
                ),
            ),
        > for tsp::Plus {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        OrVariable<<Self as Heaped>::Heap, tsp::LeftOperand>,
                    >>::Tmf,
                    (
                        <<Self as Heaped>::Heap as MapsTmf<
                            L,
                            OrVariable<<Self as Heaped>::Heap, tsp::RightOperand>,
                        >>::Tmf,
                        (),
                    ),
                ),
            ) -> Self {
                crate::term_specialized_pattern::Plus {
                    ignored: t.0,
                    ignored: t.1.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    OrVariable<<Self as Heaped>::Heap, tsp::LeftOperand>,
                >>::Tmf,
                (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        OrVariable<<Self as Heaped>::Heap, tsp::RightOperand>,
                    >>::Tmf,
                    (),
                ),
            ) {
                (self.ignored, (self.ignored, ()))
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod left_operand {
        use term::MapsTmf;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use fib_pat::words_mod_pattern::L;
        use crate::term_specialized_pattern as tsp;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                >>::Tmf,
                (),
            ),
        > for tsp::LeftOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_pattern::LeftOperand {
                    ignored: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                >>::Tmf,
                (),
            ) {
                (self.ignored, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod right_operand {
        use term::MapsTmf;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use fib_pat::words_mod_pattern::L;
        use crate::term_specialized_pattern as tsp;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                >>::Tmf,
                (),
            ),
        > for tsp::RightOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_pattern::RightOperand {
                    ignored: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                >>::Tmf,
                (),
            ) {
                (self.ignored, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod f {
        use term::MapsTmf;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use fib_pat::words_mod_pattern::L;
        use crate::term_specialized_pattern as tsp;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                >>::Tmf,
                (),
            ),
        > for tsp::F {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_pattern::F {
                    ignored: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                >>::Tmf,
                (),
            ) {
                (self.ignored, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod sum {
        use tymetafuncspec_core::Set;
        use term::MapsTmf;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use fib_pat::words_mod_pattern::L;
        use crate::term_specialized_pattern as tsp;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    OrVariable<
                        <Self as Heaped>::Heap,
                        Set<
                            <Self as Heaped>::Heap,
                            OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                        >,
                    >,
                >>::Tmf,
                (),
            ),
        > for tsp::Sum {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        OrVariable<
                            <Self as Heaped>::Heap,
                            Set<
                                <Self as Heaped>::Heap,
                                OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                            >,
                        >,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_pattern::Sum {
                    ignored: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    OrVariable<
                        <Self as Heaped>::Heap,
                        Set<
                            <Self as Heaped>::Heap,
                            OrVariable<<Self as Heaped>::Heap, tsp::Nat>,
                        >,
                    >,
                >>::Tmf,
                (),
            ) {
                (self.ignored, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod nat {
        use tymetafuncspec_core::BoundedNat;
        use term::MapsTmf;
        use term::Heaped;
        use fib_pat::words_mod_pattern::L;
        use crate::term_specialized_pattern as tsp;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    BoundedNat<<Self as Heaped>::Heap>,
                >>::Tmf,
                (),
            ),
        > for tsp::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as MapsTmf<
                        L,
                        BoundedNat<<Self as Heaped>::Heap>,
                    >>::Tmf,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_pattern::Nat::NatLit(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_pattern::Nat::NatLit(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as MapsTmf<
                    L,
                    BoundedNat<<Self as Heaped>::Heap>,
                >>::Tmf,
                (),
            ) {
                match self {
                    crate::term_specialized_pattern::Nat::NatLit(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (tsp::F, ()),
        > for tsp::Nat {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (tsp::F, ())) -> Self {
                crate::term_specialized_pattern::Nat::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_pattern::Nat::F(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (tsp::F, ()) {
                match self {
                    crate::term_specialized_pattern::Nat::F(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (tsp::Plus, ()),
        > for tsp::Nat {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (tsp::Plus, ())) -> Self {
                crate::term_specialized_pattern::Nat::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_pattern::Nat::Plus(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (tsp::Plus, ()) {
                match self {
                    crate::term_specialized_pattern::Nat::Plus(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (tsp::Sum, ()),
        > for tsp::Nat {
            fn construct(heap: &mut <Self as Heaped>::Heap, t: (tsp::Sum, ())) -> Self {
                crate::term_specialized_pattern::Nat::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_pattern::Nat::Sum(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(self, heap: &<Self as Heaped>::Heap) -> (tsp::Sum, ()) {
                match self {
                    crate::term_specialized_pattern::Nat::Sum(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
}
/// @generated by [term_specialized_impl_gen::gen_transitive_ccf_mod]
pub mod transitive_ccf {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use pattern_tmf::OrVariable;
    use crate::term_specialized_pattern as tsp;
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsp::Heap,
        OrVariable<tsp::Heap, tsp::Nat>,
    > for tsp::LeftOperand {
        type Intermediary = OrVariable<tsp::Heap, tsp::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsp::Heap,
        OrVariable<tsp::Heap, tsp::Nat>,
    > for tsp::RightOperand {
        type Intermediary = OrVariable<tsp::Heap, tsp::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsp::Heap,
        OrVariable<tsp::Heap, tsp::Nat>,
    > for tsp::F {
        type Intermediary = OrVariable<tsp::Heap, tsp::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsp::Heap,
        OrVariable<tsp::Heap, Set<tsp::Heap, OrVariable<tsp::Heap, tsp::Nat>>>,
    > for tsp::Sum {
        type Intermediary = OrVariable<
            tsp::Heap,
            Set<tsp::Heap, OrVariable<tsp::Heap, tsp::Nat>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsp::Heap, tsp::Plus> for tsp::Nat {
        type Intermediary = tsp::Plus;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsp::Heap, tsp::F> for tsp::Nat {
        type Intermediary = tsp::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsp::Heap, tsp::Sum> for tsp::Nat {
        type Intermediary = tsp::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsp::Heap, BoundedNat<tsp::Heap>>
    for tsp::Nat {
        type Intermediary = BoundedNat<tsp::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsp::Heap,
        (
            OrVariable<tsp::Heap, tsp::LeftOperand>,
            (OrVariable<tsp::Heap, tsp::RightOperand>, ()),
        ),
    > for tsp::Plus {
        type Intermediary = tsp::Plus;
        type Intermediaries = (
            OrVariable<tsp::Heap, tsp::LeftOperand>,
            (OrVariable<tsp::Heap, tsp::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsp::Heap,
        (
            OrVariable<tsp::Heap, tsp::LeftOperand>,
            (OrVariable<tsp::Heap, tsp::RightOperand>, ()),
        ),
    > for tsp::Nat {
        type Intermediary = tsp::Plus;
        type Intermediaries = (
            OrVariable<tsp::Heap, tsp::LeftOperand>,
            (OrVariable<tsp::Heap, tsp::RightOperand>, ()),
        );
    }
}
/// @generated by [term_specialized_impl_gen::gen_ccf_auto_impls]
pub mod ccf_auto_impls {
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Plus
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, crate
        ::term_specialized_pattern::LeftOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, crate
        ::term_specialized_pattern::RightOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::F
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Sum
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Nat
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::LeftOperand,
        >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::RightOperand,
        >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_pattern::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_pattern::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Nat, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_pattern::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Nat, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_pattern::Heap, tymetafuncspec_core::BoundedNat < crate
        ::term_specialized_pattern::Heap, >
    );
}
/// @generated by [term_specialized_impl_gen::gen_maps_tmf]
pub mod maps_tmf_impls {
    use fib_pat::words_mod_pattern::L;
    use crate::term_specialized_pattern as tsp;
    use ccf::CanonicallyConstructibleFrom;
    impl<TmfMonomorphization> term::MapsTmf<L, TmfMonomorphization> for tsp::Heap
    where
        TmfMonomorphization: CanonicallyConstructibleFrom<
            Self,
            (TmfMonomorphization, ()),
        >,
    {
        type Tmf = TmfMonomorphization;
    }
}
