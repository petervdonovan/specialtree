#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_gen::generate]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::BoundedNat;
use pattern_tmf::OrVariable;
use crate::term_specialized_pattern as tsp;
use crate::term_specialized_pattern::heap::set as tsphs;
use crate::term_specialized_pattern::heap::or_variable_zero_or_more as tsphovzom;
use crate::term_specialized_pattern::heap::nat_lit as tsphnl;
use crate::term_specialized_pattern::heap::ignored as tsphi;
/// @generated by [term_specialized_gen::gen_heap]
#[derive(Default)]
pub struct Heap {
    ignored: tsphi::Bak,
    set: tsphs::Bak,
    or_variable_zero_or_more: tsphovzom::Bak,
    nat_lit: tsphnl::Bak,
}
/// @generated by [term_specialized_gen::gen_heap]
pub mod heap {
    use crate::term_specialized_pattern::heap::set as tsphs;
    use crate::term_specialized_pattern::heap::or_variable_zero_or_more as tsphovzom;
    use crate::term_specialized_pattern::heap::nat_lit as tsphnl;
    use crate::term_specialized_pattern::heap::ignored as tsphi;
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    #[derive(Default)]
    pub struct Bak {
        pub ignored: tsphi::Bak,
        pub set: tsphs::Bak,
        pub or_variable_zero_or_more: tsphovzom::Bak,
        pub nat_lit: tsphnl::Bak,
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod ignored {
        use crate::term_specialized_pattern::heap::ignored::set as tsphis;
        use crate::term_specialized_pattern::heap::ignored::right_operand as tsphiro;
        use crate::term_specialized_pattern::heap::ignored::nat as tsphin;
        use crate::term_specialized_pattern::heap::ignored::left_operand as tsphilo;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub left_operand: tsphilo::Bak,
            pub right_operand: tsphiro::Bak,
            pub nat: tsphin::Bak,
            pub set: tsphis::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod left_operand {
            use pattern_tmf::OrVariableHeapBak;
            use crate::term_specialized_pattern as tsp;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableHeapBak<tsp::Heap, tsp::LeftOperand>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod right_operand {
            use pattern_tmf::OrVariableHeapBak;
            use crate::term_specialized_pattern as tsp;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableHeapBak<tsp::Heap, tsp::RightOperand>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod nat {
            use pattern_tmf::OrVariableHeapBak;
            use crate::term_specialized_pattern as tsp;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableHeapBak<tsp::Heap, tsp::Nat>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod set {
            use crate::term_specialized_pattern::heap::ignored::set::or_variable_zero_or_more as tsphisovzom;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub or_variable_zero_or_more: tsphisovzom::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod or_variable_zero_or_more {
                use crate::term_specialized_pattern::heap::ignored::set::or_variable_zero_or_more::nat as tsphisovzomn;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub nat: tsphisovzomn::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod nat {
                    use tymetafuncspec_core::Set;
                    use pattern_tmf::OrVariableHeapBak;
                    use pattern_tmf::OrVariable;
                    use crate::term_specialized_pattern as tsp;
                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                    #[derive(Default)]
                    pub struct Bak(
                        pub OrVariableHeapBak<
                            tsp::Heap,
                            Set<tsp::Heap, OrVariable<tsp::Heap, tsp::Nat>>,
                        >,
                    );
                }
            }
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod set {
        use crate::term_specialized_pattern::heap::set::or_variable_zero_or_more as tsphsovzom;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub or_variable_zero_or_more: tsphsovzom::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod or_variable_zero_or_more {
            use crate::term_specialized_pattern::heap::set::or_variable_zero_or_more::nat as tsphsovzomn;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub nat: tsphsovzomn::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod nat {
                use tymetafuncspec_core::SetHeapBak;
                use pattern_tmf::OrVariable;
                use crate::term_specialized_pattern as tsp;
                /// @generated by [term_specialized_gen::gen_heapbak_module]
                #[derive(Default)]
                pub struct Bak(
                    pub SetHeapBak<tsp::Heap, OrVariable<tsp::Heap, tsp::Nat>>,
                );
            }
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod or_variable_zero_or_more {
        use crate::term_specialized_pattern::heap::or_variable_zero_or_more::nat as tsphovzomn;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub nat: tsphovzomn::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod nat {
            use pattern_tmf::OrVariableZeroOrMoreHeapBak;
            use crate::term_specialized_pattern as tsp;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableZeroOrMoreHeapBak<tsp::Heap, tsp::Nat>);
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod nat_lit {
        use tymetafuncspec_core::BoundedNatHeapBak;
        use crate::term_specialized_pattern as tsp;
        /// @generated by [term_specialized_gen::gen_heapbak_module]
        #[derive(Default)]
        pub struct Bak(pub BoundedNatHeapBak<tsp::Heap>);
    }
}
/// @generated by [term_specialized_gen::gen_heap]
pub mod superheap {
    term::impl_superheap!(
        crate ::term_specialized_pattern::Heap; pattern_tmf::OrVariableHeapBak < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::LeftOperand
        >; ignored left_operand
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern::Heap; pattern_tmf::OrVariableHeapBak < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::RightOperand
        >; ignored right_operand
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern::Heap; pattern_tmf::OrVariableHeapBak < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Nat >;
        ignored nat
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern::Heap; pattern_tmf::OrVariableHeapBak < crate
        ::term_specialized_pattern::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_pattern::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Nat, >, > >;
        ignored set or_variable_zero_or_more nat
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern::Heap; tymetafuncspec_core::SetHeapBak < crate
        ::term_specialized_pattern::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Nat, > >; set
        or_variable_zero_or_more nat
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern::Heap; pattern_tmf::OrVariableZeroOrMoreHeapBak
        < crate ::term_specialized_pattern::Heap, crate ::term_specialized_pattern::Nat
        >; or_variable_zero_or_more nat
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern::Heap; tymetafuncspec_core::BoundedNatHeapBak <
        crate ::term_specialized_pattern::Heap, >; nat_lit
    );
}
#[derive(Clone, Copy)]
pub struct Plus {
    pub ignored: OrVariable<tsp::Heap, tsp::LeftOperand>,
    pub ignored: OrVariable<tsp::Heap, tsp::RightOperand>,
}
#[derive(Clone, Copy)]
pub struct LeftOperand {
    pub ignored: OrVariable<tsp::Heap, tsp::Nat>,
}
#[derive(Clone, Copy)]
pub struct RightOperand {
    pub ignored: OrVariable<tsp::Heap, tsp::Nat>,
}
#[derive(Clone, Copy)]
pub struct F {
    pub ignored: OrVariable<tsp::Heap, tsp::Nat>,
}
#[derive(Clone, Copy)]
pub struct Sum {
    pub ignored: OrVariable<tsp::Heap, Set<tsp::Heap, OrVariable<tsp::Heap, tsp::Nat>>>,
}
#[derive(Clone, Copy)]
pub enum Nat {
    NatLit(BoundedNat<tsp::Heap>),
    F(tsp::F),
    Plus(tsp::Plus),
    Sum(tsp::Sum),
}
/// @generated by [term_specialized_gen::gen_heaped_impls]
pub mod heaped {
    use crate::term_specialized_pattern as tsp;
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsp::Plus {
        type Heap = tsp::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsp::LeftOperand {
        type Heap = tsp::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsp::RightOperand {
        type Heap = tsp::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsp::F {
        type Heap = tsp::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsp::Sum {
        type Heap = tsp::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsp::Nat {
        type Heap = tsp::Heap;
    }
}
