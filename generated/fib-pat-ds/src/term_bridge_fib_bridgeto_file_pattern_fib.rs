#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
use crate::term_specialized_file_pattern_fib as tsfpf;
/// @generated by [term_bridge_gen::generate_heap]
impl fib::term_trait_fib::Heap for tsfpf::Heap {}
/// @generated by [term_bridge_gen::generate_owned_impls]
pub mod owned_impls {
    use crate::term_specialized_file_pattern_fib as tsfpf;
    impl fib::term_trait_fib::owned::Plus<tsfpf::Heap> for tsfpf::Plus {}
    impl fib::term_trait_fib::owned::LeftOperand<tsfpf::Heap> for tsfpf::LeftOperand {}
    impl fib::term_trait_fib::owned::RightOperand<tsfpf::Heap> for tsfpf::RightOperand {}
    impl fib::term_trait_fib::owned::F<tsfpf::Heap> for tsfpf::F {}
    impl fib::term_trait_fib::owned::Sum<tsfpf::Heap> for tsfpf::Sum {}
    impl fib::term_trait_fib::owned::Nat<tsfpf::Heap> for tsfpf::Nat {}
}
/// @generated by [words::words_impls]
pub mod words_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use pattern_tmf::OrVariableZeroOrMore;
    use fib::words_mod_fib::sorts::Sum;
    use fib::words_mod_fib::sorts::RightOperand;
    use fib::words_mod_fib::sorts::Plus;
    use fib::words_mod_fib::sorts::Nat;
    use fib::words_mod_fib::sorts::LeftOperand;
    use fib::words_mod_fib::sorts::F;
    use fib::words_mod_fib::L;
    use crate::term_specialized_file_pattern_fib as tsfpf;
    impl words::Implements<tsfpf::Heap, L> for tsfpf::Plus {
        type LWord = Plus;
    }
    impl words::Implements<tsfpf::Heap, L> for tsfpf::LeftOperand {
        type LWord = LeftOperand;
    }
    impl words::Implements<tsfpf::Heap, L> for tsfpf::RightOperand {
        type LWord = RightOperand;
    }
    impl words::Implements<tsfpf::Heap, L> for tsfpf::F {
        type LWord = F;
    }
    impl words::Implements<tsfpf::Heap, L> for tsfpf::Sum {
        type LWord = Sum;
    }
    impl words::Implements<tsfpf::Heap, L> for tsfpf::Nat {
        type LWord = Nat;
    }
    impl words::Implements<tsfpf::Heap, L>
    for Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>> {
        type LWord = Set<(), Nat>;
    }
    impl words::Implements<tsfpf::Heap, L> for BoundedNat<tsfpf::Heap> {
        type LWord = BoundedNat<()>;
    }
}
/// @generated by [words::words_inverse_impls]
pub mod words_inverse_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use pattern_tmf::OrVariableZeroOrMore;
    use fib::words_mod_fib::sorts::Sum;
    use fib::words_mod_fib::sorts::RightOperand;
    use fib::words_mod_fib::sorts::Plus;
    use fib::words_mod_fib::sorts::Nat;
    use fib::words_mod_fib::sorts::LeftOperand;
    use fib::words_mod_fib::sorts::F;
    use fib::words_mod_fib::L;
    use crate::term_specialized_file_pattern_fib as tsfpf;
    impl words::InverseImplements<L, Plus> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::Plus;
        type StructuralImplementor = tsfpf::Plus;
    }
    impl words::InverseImplements<L, LeftOperand> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::LeftOperand;
        type StructuralImplementor = tsfpf::LeftOperand;
    }
    impl words::InverseImplements<L, RightOperand> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::RightOperand;
        type StructuralImplementor = tsfpf::RightOperand;
    }
    impl words::InverseImplements<L, F> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::F;
        type StructuralImplementor = tsfpf::F;
    }
    impl words::InverseImplements<L, Sum> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::Sum;
        type StructuralImplementor = tsfpf::Sum;
    }
    impl words::InverseImplements<L, Nat> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::Nat;
        type StructuralImplementor = tsfpf::Nat;
    }
    impl words::InverseImplements<L, Set<(), Nat>> for tsfpf::Heap {
        type ExternBehavioralImplementor = Set<
            tsfpf::Heap,
            OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>,
        >;
        type StructuralImplementor = Set<
            tsfpf::Heap,
            OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>,
        >;
    }
    impl words::InverseImplements<L, BoundedNat<()>> for tsfpf::Heap {
        type ExternBehavioralImplementor = BoundedNat<tsfpf::Heap>;
        type StructuralImplementor = BoundedNat<tsfpf::Heap>;
    }
}
