#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_impl_gen::generate]
/// @generated by [term_specialized_impl_gen::gen_ccf_mod]
pub mod ccf_impls {
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod plus {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use crate::words_mod_autoboxed_file_pattern_fib as wmafpf;
        use crate::words_mod_autoboxed_file_pattern_fib::sorts as wmafpfs;
        use crate::term_specialized_autoboxed_file_pattern_fib as tsafpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    OrVariable<(), wmafpfs::LeftOperand>,
                >>::StructuralImplementor,
                (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        OrVariable<(), wmafpfs::RightOperand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ),
        > for tsafpf::Plus {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        OrVariable<(), wmafpfs::LeftOperand>,
                    >>::StructuralImplementor,
                    (
                        <<Self as Heaped>::Heap as InverseImplements<
                            wmafpf::L,
                            OrVariable<(), wmafpfs::RightOperand>,
                        >>::StructuralImplementor,
                        (),
                    ),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::Plus {
                    left_operand: t.0,
                    right_operand: t.1.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    OrVariable<(), wmafpfs::LeftOperand>,
                >>::StructuralImplementor,
                (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        OrVariable<(), wmafpfs::RightOperand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) {
                (self.left_operand, (self.right_operand, ()))
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod left_operand {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use crate::words_mod_autoboxed_file_pattern_fib as wmafpf;
        use crate::words_mod_autoboxed_file_pattern_fib::sorts as wmafpfs;
        use crate::term_specialized_autoboxed_file_pattern_fib as tsafpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    OrVariable<(), wmafpfs::Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::LeftOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        OrVariable<(), wmafpfs::Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::LeftOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    OrVariable<(), wmafpfs::Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod right_operand {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use crate::words_mod_autoboxed_file_pattern_fib as wmafpf;
        use crate::words_mod_autoboxed_file_pattern_fib::sorts as wmafpfs;
        use crate::term_specialized_autoboxed_file_pattern_fib as tsafpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    OrVariable<(), wmafpfs::Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::RightOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        OrVariable<(), wmafpfs::Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::RightOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    OrVariable<(), wmafpfs::Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod f {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use crate::words_mod_autoboxed_file_pattern_fib as wmafpf;
        use crate::words_mod_autoboxed_file_pattern_fib::sorts as wmafpfs;
        use crate::term_specialized_autoboxed_file_pattern_fib as tsafpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    OrVariable<(), wmafpfs::Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::F {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        OrVariable<(), wmafpfs::Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::F {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    OrVariable<(), wmafpfs::Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod sum {
        use words::InverseImplements;
        use tymetafuncspec_core::Set;
        use term::Heaped;
        use pattern_tmf::OrVariableZeroOrMore;
        use pattern_tmf::OrVariable;
        use crate::words_mod_autoboxed_file_pattern_fib as wmafpf;
        use crate::words_mod_autoboxed_file_pattern_fib::sorts as wmafpfs;
        use crate::term_specialized_autoboxed_file_pattern_fib as tsafpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    OrVariable<(), Set<(), OrVariableZeroOrMore<(), wmafpfs::Nat>>>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::Sum {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        OrVariable<(), Set<(), OrVariableZeroOrMore<(), wmafpfs::Nat>>>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::Sum {
                    set: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    OrVariable<(), Set<(), OrVariableZeroOrMore<(), wmafpfs::Nat>>>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.set, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod nat {
        use words::InverseImplements;
        use tymetafuncspec_core::IdxBox;
        use tymetafuncspec_core::BoundedNat;
        use term::Heaped;
        use crate::words_mod_autoboxed_file_pattern_fib as wmafpf;
        use crate::words_mod_autoboxed_file_pattern_fib::sorts as wmafpfs;
        use crate::term_specialized_autoboxed_file_pattern_fib as tsafpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    BoundedNat<()>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        BoundedNat<()>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::Nat::NatLit(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::Nat::NatLit(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    BoundedNat<()>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::Nat::NatLit(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    IdxBox<(), wmafpfs::F>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        IdxBox<(), wmafpfs::F>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::Nat::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::Nat::F(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    IdxBox<(), wmafpfs::F>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::Nat::F(t) => {
                        (t, ())
                    }
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    IdxBox<(), wmafpfs::Plus>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        IdxBox<(), wmafpfs::Plus>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::Nat::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::Nat::Plus(_) => {
                        true
                    }
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    IdxBox<(), wmafpfs::Plus>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::Nat::Plus(t) => {
                        (t, ())
                    }
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    wmafpfs::Sum,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        wmafpfs::Sum,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::Nat::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::Nat::Sum(_) => {
                        true
                    }
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    wmafpfs::Sum,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::Nat::Sum(t) => {
                        (t, ())
                    }
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod file_item {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::NamedPattern;
        use crate::words_mod_autoboxed_file_pattern_fib as wmafpf;
        use crate::words_mod_autoboxed_file_pattern_fib::sorts as wmafpfs;
        use crate::term_specialized_autoboxed_file_pattern_fib as tsafpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    NamedPattern<(), wmafpfs::Plus>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        NamedPattern<(), wmafpfs::Plus>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::FileItem::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::FileItem::Plus(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    NamedPattern<(), wmafpfs::Plus>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::FileItem::Plus(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    NamedPattern<(), wmafpfs::LeftOperand>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        NamedPattern<(), wmafpfs::LeftOperand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::FileItem::LeftOperand(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::FileItem::LeftOperand(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    NamedPattern<(), wmafpfs::LeftOperand>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::FileItem::LeftOperand(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    NamedPattern<(), wmafpfs::RightOperand>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        NamedPattern<(), wmafpfs::RightOperand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::FileItem::RightOperand(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::FileItem::RightOperand(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    NamedPattern<(), wmafpfs::RightOperand>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::FileItem::RightOperand(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    NamedPattern<(), wmafpfs::F>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        NamedPattern<(), wmafpfs::F>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::FileItem::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::FileItem::F(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    NamedPattern<(), wmafpfs::F>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::FileItem::F(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    NamedPattern<(), wmafpfs::Sum>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsafpf::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        wmafpf::L,
                        NamedPattern<(), wmafpfs::Sum>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_autoboxed_file_pattern_fib::FileItem::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::FileItem::Sum(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    wmafpf::L,
                    NamedPattern<(), wmafpfs::Sum>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_autoboxed_file_pattern_fib::FileItem::Sum(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
}
/// @generated by [term_specialized_impl_gen::gen_transitive_ccf_mod]
pub mod transitive_ccf {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::BoundedNat;
    use pattern_tmf::OrVariableZeroOrMore;
    use pattern_tmf::OrVariable;
    use pattern_tmf::NamedPattern;
    use crate::term_specialized_autoboxed_file_pattern_fib as tsafpf;
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Nat>
    for tsafpf::LeftOperand {
        type Intermediary = OrVariable<tsafpf::Heap, tsafpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        OrVariable<tsafpf::Heap, tsafpf::Nat>,
    > for tsafpf::LeftOperand {
        type Intermediary = OrVariable<tsafpf::Heap, tsafpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Nat>
    for tsafpf::RightOperand {
        type Intermediary = OrVariable<tsafpf::Heap, tsafpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        OrVariable<tsafpf::Heap, tsafpf::Nat>,
    > for tsafpf::RightOperand {
        type Intermediary = OrVariable<tsafpf::Heap, tsafpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Nat>
    for tsafpf::F {
        type Intermediary = OrVariable<tsafpf::Heap, tsafpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        OrVariable<tsafpf::Heap, tsafpf::Nat>,
    > for tsafpf::F {
        type Intermediary = OrVariable<tsafpf::Heap, tsafpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        Set<tsafpf::Heap, OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat>>,
    > for tsafpf::Sum {
        type Intermediary = OrVariable<
            tsafpf::Heap,
            Set<tsafpf::Heap, OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        OrVariable<
            tsafpf::Heap,
            Set<tsafpf::Heap, OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat>>,
        >,
    > for tsafpf::Sum {
        type Intermediary = OrVariable<
            tsafpf::Heap,
            Set<tsafpf::Heap, OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Plus>
    for tsafpf::Nat {
        type Intermediary = IdxBox<tsafpf::Heap, tsafpf::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::F>
    for tsafpf::Nat {
        type Intermediary = IdxBox<tsafpf::Heap, tsafpf::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Sum>
    for tsafpf::Nat {
        type Intermediary = tsafpf::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, BoundedNat<tsafpf::Heap>>
    for tsafpf::Nat {
        type Intermediary = BoundedNat<tsafpf::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        IdxBox<tsafpf::Heap, tsafpf::Plus>,
    > for tsafpf::Nat {
        type Intermediary = IdxBox<tsafpf::Heap, tsafpf::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        IdxBox<tsafpf::Heap, tsafpf::F>,
    > for tsafpf::Nat {
        type Intermediary = IdxBox<tsafpf::Heap, tsafpf::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        NamedPattern<tsafpf::Heap, tsafpf::Plus>,
    > for tsafpf::FileItem {
        type Intermediary = NamedPattern<tsafpf::Heap, tsafpf::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        NamedPattern<tsafpf::Heap, tsafpf::LeftOperand>,
    > for tsafpf::FileItem {
        type Intermediary = NamedPattern<tsafpf::Heap, tsafpf::LeftOperand>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        NamedPattern<tsafpf::Heap, tsafpf::RightOperand>,
    > for tsafpf::FileItem {
        type Intermediary = NamedPattern<tsafpf::Heap, tsafpf::RightOperand>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        NamedPattern<tsafpf::Heap, tsafpf::F>,
    > for tsafpf::FileItem {
        type Intermediary = NamedPattern<tsafpf::Heap, tsafpf::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        NamedPattern<tsafpf::Heap, tsafpf::Sum>,
    > for tsafpf::FileItem {
        type Intermediary = NamedPattern<tsafpf::Heap, tsafpf::Sum>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::LeftOperand>
    for OrVariable<tsafpf::Heap, tsafpf::LeftOperand> {
        type Intermediary = tsafpf::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Nat>
    for OrVariable<tsafpf::Heap, tsafpf::LeftOperand> {
        type Intermediary = tsafpf::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::RightOperand>
    for OrVariable<tsafpf::Heap, tsafpf::RightOperand> {
        type Intermediary = tsafpf::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Nat>
    for OrVariable<tsafpf::Heap, tsafpf::RightOperand> {
        type Intermediary = tsafpf::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Plus>
    for OrVariable<tsafpf::Heap, tsafpf::Nat> {
        type Intermediary = tsafpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::F>
    for OrVariable<tsafpf::Heap, tsafpf::Nat> {
        type Intermediary = tsafpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Sum>
    for OrVariable<tsafpf::Heap, tsafpf::Nat> {
        type Intermediary = tsafpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Nat>
    for OrVariable<tsafpf::Heap, tsafpf::Nat> {
        type Intermediary = tsafpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, BoundedNat<tsafpf::Heap>>
    for OrVariable<tsafpf::Heap, tsafpf::Nat> {
        type Intermediary = tsafpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        Set<tsafpf::Heap, OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat>>,
    >
    for OrVariable<
        tsafpf::Heap,
        Set<tsafpf::Heap, OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat>>,
    > {
        type Intermediary = Set<
            tsafpf::Heap,
            OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Plus>
    for OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat> {
        type Intermediary = tsafpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::F>
    for OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat> {
        type Intermediary = tsafpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Sum>
    for OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat> {
        type Intermediary = tsafpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Nat>
    for OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat> {
        type Intermediary = tsafpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, BoundedNat<tsafpf::Heap>>
    for OrVariableZeroOrMore<tsafpf::Heap, tsafpf::Nat> {
        type Intermediary = tsafpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Plus>
    for IdxBox<tsafpf::Heap, tsafpf::Plus> {
        type Intermediary = tsafpf::Plus;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::F>
    for IdxBox<tsafpf::Heap, tsafpf::F> {
        type Intermediary = tsafpf::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsafpf::Heap, tsafpf::Nat>
    for IdxBox<tsafpf::Heap, tsafpf::F> {
        type Intermediary = tsafpf::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsafpf::Heap,
        OrVariable<tsafpf::Heap, tsafpf::Nat>,
    > for IdxBox<tsafpf::Heap, tsafpf::F> {
        type Intermediary = tsafpf::F;
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (tsafpf::LeftOperand, (tsafpf::RightOperand, ())),
    > for tsafpf::Plus {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (tsafpf::LeftOperand, (tsafpf::RightOperand, ())),
    > for tsafpf::Nat {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (tsafpf::LeftOperand, (tsafpf::RightOperand, ())),
    > for IdxBox<tsafpf::Heap, tsafpf::Plus> {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (tsafpf::LeftOperand, (tsafpf::Nat, ())),
    > for tsafpf::Plus {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (tsafpf::LeftOperand, (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ())),
    > for tsafpf::Plus {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (tsafpf::LeftOperand, (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ())),
    > for tsafpf::Nat {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (tsafpf::LeftOperand, (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ())),
    > for IdxBox<tsafpf::Heap, tsafpf::Plus> {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (tsafpf::Nat, (tsafpf::RightOperand, ())),
    > for tsafpf::Plus {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (tsafpf::Nat, (tsafpf::Nat, ())),
    > for tsafpf::Plus {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (OrVariable<tsafpf::Heap, tsafpf::LeftOperand>, (tsafpf::RightOperand, ())),
    > for tsafpf::Plus {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (OrVariable<tsafpf::Heap, tsafpf::LeftOperand>, (tsafpf::RightOperand, ())),
    > for tsafpf::Nat {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (OrVariable<tsafpf::Heap, tsafpf::LeftOperand>, (tsafpf::RightOperand, ())),
    > for IdxBox<tsafpf::Heap, tsafpf::Plus> {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        ),
    > for tsafpf::Plus {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        ),
    > for tsafpf::Nat {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsafpf::Heap,
        (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        ),
    > for IdxBox<tsafpf::Heap, tsafpf::Plus> {
        type Intermediary = tsafpf::Plus;
        type Intermediaries = (
            OrVariable<tsafpf::Heap, tsafpf::LeftOperand>,
            (OrVariable<tsafpf::Heap, tsafpf::RightOperand>, ()),
        );
    }
}
/// @generated by [term_specialized_impl_gen::gen_ccf_auto_impls]
pub mod ccf_auto_impls {
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::Plus
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::LeftOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::RightOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::F
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::Sum
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::Nat
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::FileItem
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::OrVariable < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::LeftOperand, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::OrVariable < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::RightOperand, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::OrVariable < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::OrVariable < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, tymetafuncspec_core::Set <
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::OrVariableZeroOrMore < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::Nat, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        tymetafuncspec_core::Set < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::OrVariableZeroOrMore < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::Nat, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::OrVariableZeroOrMore < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        tymetafuncspec_core::BoundedNat < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        tymetafuncspec_core::IdxBox < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::F, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        tymetafuncspec_core::IdxBox < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::Plus, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::NamedPattern < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::Plus, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::NamedPattern < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::LeftOperand, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::NamedPattern < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::RightOperand, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::NamedPattern < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::F, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap,
        pattern_tmf::NamedPattern < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::Sum, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_autoboxed_file_pattern_fib::Heap, file_tmf::File < crate
        ::term_specialized_autoboxed_file_pattern_fib::Heap, crate
        ::term_specialized_autoboxed_file_pattern_fib::FileItem, >
    );
}
