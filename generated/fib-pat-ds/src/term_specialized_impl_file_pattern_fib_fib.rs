#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_impl_gen::generate]
use crate::term_specialized_file_pattern_fib as tsfpf;
/// @generated by [term_specialized_impl_gen::gen_heap_impl]
impl fib_pat::term_trait_file_pattern_fib::Heap for tsfpf::Heap {}
/// @generated by [term_specialized_impl_gen::gen_owned_mod]
pub mod owned_impls {
    use crate::term_specialized_file_pattern_fib as tsfpf;
    impl fib_pat::term_trait_file_pattern_fib::owned::Plus<tsfpf::Heap> for tsfpf::Plus {}
    impl fib_pat::term_trait_file_pattern_fib::owned::LeftOperand<tsfpf::Heap>
    for tsfpf::LeftOperand {}
    impl fib_pat::term_trait_file_pattern_fib::owned::RightOperand<tsfpf::Heap>
    for tsfpf::RightOperand {}
    impl fib_pat::term_trait_file_pattern_fib::owned::F<tsfpf::Heap> for tsfpf::F {}
    impl fib_pat::term_trait_file_pattern_fib::owned::Sum<tsfpf::Heap> for tsfpf::Sum {}
    impl fib_pat::term_trait_file_pattern_fib::owned::Nat<tsfpf::Heap> for tsfpf::Nat {}
    impl fib_pat::term_trait_file_pattern_fib::owned::FileItem<tsfpf::Heap>
    for tsfpf::FileItem {}
}
/// @generated by [term_specialized_impl_gen::gen_ccf_mod]
pub mod ccf_impls {
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod plus {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use fib_pat::words_mod_file_pattern_fib::sorts::RightOperand;
        use fib_pat::words_mod_file_pattern_fib::sorts::LeftOperand;
        use fib_pat::words_mod_file_pattern_fib::L;
        use crate::term_specialized_file_pattern_fib as tsfpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    OrVariable<(), LeftOperand>,
                >>::StructuralImplementor,
                (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        OrVariable<(), RightOperand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ),
        > for tsfpf::Plus {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        OrVariable<(), LeftOperand>,
                    >>::StructuralImplementor,
                    (
                        <<Self as Heaped>::Heap as InverseImplements<
                            L,
                            OrVariable<(), RightOperand>,
                        >>::StructuralImplementor,
                        (),
                    ),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::Plus {
                    left_operand: t.0,
                    right_operand: t.1.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    OrVariable<(), LeftOperand>,
                >>::StructuralImplementor,
                (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        OrVariable<(), RightOperand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) {
                (self.left_operand, (self.right_operand, ()))
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod left_operand {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use fib_pat::words_mod_file_pattern_fib::sorts::Nat;
        use fib_pat::words_mod_file_pattern_fib::L;
        use crate::term_specialized_file_pattern_fib as tsfpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    OrVariable<(), Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::LeftOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        OrVariable<(), Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::LeftOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    OrVariable<(), Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod right_operand {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use fib_pat::words_mod_file_pattern_fib::sorts::Nat;
        use fib_pat::words_mod_file_pattern_fib::L;
        use crate::term_specialized_file_pattern_fib as tsfpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    OrVariable<(), Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::RightOperand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        OrVariable<(), Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::RightOperand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    OrVariable<(), Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod f {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use fib_pat::words_mod_file_pattern_fib::sorts::Nat;
        use fib_pat::words_mod_file_pattern_fib::L;
        use crate::term_specialized_file_pattern_fib as tsfpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    OrVariable<(), Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::F {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        OrVariable<(), Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::F {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    OrVariable<(), Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod sum {
        use words::InverseImplements;
        use tymetafuncspec_core::Set;
        use term::Heaped;
        use pattern_tmf::OrVariableZeroOrMore;
        use pattern_tmf::OrVariable;
        use fib_pat::words_mod_file_pattern_fib::sorts::Nat;
        use fib_pat::words_mod_file_pattern_fib::L;
        use crate::term_specialized_file_pattern_fib as tsfpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    OrVariable<(), Set<(), OrVariableZeroOrMore<(), Nat>>>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::Sum {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        OrVariable<(), Set<(), OrVariableZeroOrMore<(), Nat>>>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::Sum {
                    set: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    OrVariable<(), Set<(), OrVariableZeroOrMore<(), Nat>>>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.set, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod nat {
        use words::InverseImplements;
        use tymetafuncspec_core::IdxBox;
        use tymetafuncspec_core::BoundedNat;
        use term::Heaped;
        use fib_pat::words_mod_file_pattern_fib::sorts::Sum;
        use fib_pat::words_mod_file_pattern_fib::sorts::Plus;
        use fib_pat::words_mod_file_pattern_fib::sorts::F;
        use fib_pat::words_mod_file_pattern_fib::L;
        use crate::term_specialized_file_pattern_fib as tsfpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    BoundedNat<()>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        BoundedNat<()>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::Nat::NatLit(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_file_pattern_fib::Nat::NatLit(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    BoundedNat<()>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_file_pattern_fib::Nat::NatLit(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    IdxBox<(), F>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        IdxBox<(), F>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::Nat::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_file_pattern_fib::Nat::F(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    IdxBox<(), F>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_file_pattern_fib::Nat::F(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    IdxBox<(), Plus>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        IdxBox<(), Plus>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::Nat::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_file_pattern_fib::Nat::Plus(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    IdxBox<(), Plus>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_file_pattern_fib::Nat::Plus(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    Sum,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        Sum,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::Nat::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_file_pattern_fib::Nat::Sum(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    Sum,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_file_pattern_fib::Nat::Sum(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod file_item {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::NamedPattern;
        use fib_pat::words_mod_file_pattern_fib::sorts::Sum;
        use fib_pat::words_mod_file_pattern_fib::sorts::RightOperand;
        use fib_pat::words_mod_file_pattern_fib::sorts::Plus;
        use fib_pat::words_mod_file_pattern_fib::sorts::LeftOperand;
        use fib_pat::words_mod_file_pattern_fib::sorts::F;
        use fib_pat::words_mod_file_pattern_fib::L;
        use crate::term_specialized_file_pattern_fib as tsfpf;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    NamedPattern<(), Plus>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        NamedPattern<(), Plus>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::FileItem::Plus(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_file_pattern_fib::FileItem::Plus(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    NamedPattern<(), Plus>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_file_pattern_fib::FileItem::Plus(t) => {
                        (t, ())
                    }
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    NamedPattern<(), LeftOperand>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        NamedPattern<(), LeftOperand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::FileItem::LeftOperand(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_file_pattern_fib::FileItem::LeftOperand(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    NamedPattern<(), LeftOperand>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_file_pattern_fib::FileItem::LeftOperand(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    NamedPattern<(), RightOperand>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        NamedPattern<(), RightOperand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::FileItem::RightOperand(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_file_pattern_fib::FileItem::RightOperand(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    NamedPattern<(), RightOperand>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_file_pattern_fib::FileItem::RightOperand(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    NamedPattern<(), F>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        NamedPattern<(), F>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::FileItem::F(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_file_pattern_fib::FileItem::F(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    NamedPattern<(), F>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_file_pattern_fib::FileItem::F(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    NamedPattern<(), Sum>,
                >>::StructuralImplementor,
                (),
            ),
        > for tsfpf::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        L,
                        NamedPattern<(), Sum>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::term_specialized_file_pattern_fib::FileItem::Sum(t.0)
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::term_specialized_file_pattern_fib::FileItem::Sum(_) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    L,
                    NamedPattern<(), Sum>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::term_specialized_file_pattern_fib::FileItem::Sum(t) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
}
/// @generated by [term_specialized_impl_gen::gen_transitive_ccf_mod]
pub mod transitive_ccf {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::BoundedNat;
    use pattern_tmf::OrVariableZeroOrMore;
    use pattern_tmf::OrVariable;
    use pattern_tmf::NamedPattern;
    use crate::term_specialized_file_pattern_fib as tsfpf;
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Nat>
    for tsfpf::LeftOperand {
        type Intermediary = OrVariable<tsfpf::Heap, tsfpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        OrVariable<tsfpf::Heap, tsfpf::Nat>,
    > for tsfpf::LeftOperand {
        type Intermediary = OrVariable<tsfpf::Heap, tsfpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Nat>
    for tsfpf::RightOperand {
        type Intermediary = OrVariable<tsfpf::Heap, tsfpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        OrVariable<tsfpf::Heap, tsfpf::Nat>,
    > for tsfpf::RightOperand {
        type Intermediary = OrVariable<tsfpf::Heap, tsfpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Nat> for tsfpf::F {
        type Intermediary = OrVariable<tsfpf::Heap, tsfpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        OrVariable<tsfpf::Heap, tsfpf::Nat>,
    > for tsfpf::F {
        type Intermediary = OrVariable<tsfpf::Heap, tsfpf::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>,
    > for tsfpf::Sum {
        type Intermediary = OrVariable<
            tsfpf::Heap,
            Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        OrVariable<
            tsfpf::Heap,
            Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>,
        >,
    > for tsfpf::Sum {
        type Intermediary = OrVariable<
            tsfpf::Heap,
            Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Plus>
    for tsfpf::Nat {
        type Intermediary = IdxBox<tsfpf::Heap, tsfpf::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::F> for tsfpf::Nat {
        type Intermediary = IdxBox<tsfpf::Heap, tsfpf::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Sum> for tsfpf::Nat {
        type Intermediary = tsfpf::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, BoundedNat<tsfpf::Heap>>
    for tsfpf::Nat {
        type Intermediary = BoundedNat<tsfpf::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        NamedPattern<tsfpf::Heap, tsfpf::Plus>,
    > for tsfpf::FileItem {
        type Intermediary = NamedPattern<tsfpf::Heap, tsfpf::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        NamedPattern<tsfpf::Heap, tsfpf::LeftOperand>,
    > for tsfpf::FileItem {
        type Intermediary = NamedPattern<tsfpf::Heap, tsfpf::LeftOperand>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        NamedPattern<tsfpf::Heap, tsfpf::RightOperand>,
    > for tsfpf::FileItem {
        type Intermediary = NamedPattern<tsfpf::Heap, tsfpf::RightOperand>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        NamedPattern<tsfpf::Heap, tsfpf::F>,
    > for tsfpf::FileItem {
        type Intermediary = NamedPattern<tsfpf::Heap, tsfpf::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        NamedPattern<tsfpf::Heap, tsfpf::Sum>,
    > for tsfpf::FileItem {
        type Intermediary = NamedPattern<tsfpf::Heap, tsfpf::Sum>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::LeftOperand>
    for OrVariable<tsfpf::Heap, tsfpf::LeftOperand> {
        type Intermediary = tsfpf::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Nat>
    for OrVariable<tsfpf::Heap, tsfpf::LeftOperand> {
        type Intermediary = tsfpf::LeftOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::RightOperand>
    for OrVariable<tsfpf::Heap, tsfpf::RightOperand> {
        type Intermediary = tsfpf::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Nat>
    for OrVariable<tsfpf::Heap, tsfpf::RightOperand> {
        type Intermediary = tsfpf::RightOperand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Plus>
    for OrVariable<tsfpf::Heap, tsfpf::Nat> {
        type Intermediary = tsfpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::F>
    for OrVariable<tsfpf::Heap, tsfpf::Nat> {
        type Intermediary = tsfpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Sum>
    for OrVariable<tsfpf::Heap, tsfpf::Nat> {
        type Intermediary = tsfpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Nat>
    for OrVariable<tsfpf::Heap, tsfpf::Nat> {
        type Intermediary = tsfpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, BoundedNat<tsfpf::Heap>>
    for OrVariable<tsfpf::Heap, tsfpf::Nat> {
        type Intermediary = tsfpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>,
    >
    for OrVariable<
        tsfpf::Heap,
        Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>,
    > {
        type Intermediary = Set<
            tsfpf::Heap,
            OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Plus>
    for OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat> {
        type Intermediary = tsfpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::F>
    for OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat> {
        type Intermediary = tsfpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Sum>
    for OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat> {
        type Intermediary = tsfpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Nat>
    for OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat> {
        type Intermediary = tsfpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, BoundedNat<tsfpf::Heap>>
    for OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat> {
        type Intermediary = tsfpf::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Plus>
    for IdxBox<tsfpf::Heap, tsfpf::Plus> {
        type Intermediary = tsfpf::Plus;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::F>
    for IdxBox<tsfpf::Heap, tsfpf::F> {
        type Intermediary = tsfpf::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<tsfpf::Heap, tsfpf::Nat>
    for IdxBox<tsfpf::Heap, tsfpf::F> {
        type Intermediary = tsfpf::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        tsfpf::Heap,
        OrVariable<tsfpf::Heap, tsfpf::Nat>,
    > for IdxBox<tsfpf::Heap, tsfpf::F> {
        type Intermediary = tsfpf::F;
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (tsfpf::LeftOperand, (tsfpf::RightOperand, ())),
    > for tsfpf::Plus {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (tsfpf::LeftOperand, (tsfpf::RightOperand, ())),
    > for tsfpf::Nat {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (tsfpf::LeftOperand, (tsfpf::Nat, ())),
    > for tsfpf::Plus {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (tsfpf::LeftOperand, (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ())),
    > for tsfpf::Plus {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (tsfpf::LeftOperand, (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ())),
    > for tsfpf::Nat {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (tsfpf::Nat, (tsfpf::RightOperand, ())),
    > for tsfpf::Plus {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (tsfpf::Nat, (tsfpf::Nat, ())),
    > for tsfpf::Plus {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (OrVariable<tsfpf::Heap, tsfpf::LeftOperand>, (tsfpf::RightOperand, ())),
    > for tsfpf::Plus {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (OrVariable<tsfpf::Heap, tsfpf::LeftOperand>, (tsfpf::RightOperand, ())),
    > for tsfpf::Nat {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        ),
    > for tsfpf::Plus {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        tsfpf::Heap,
        (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        ),
    > for tsfpf::Nat {
        type Intermediary = tsfpf::Plus;
        type Intermediaries = (
            OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
            (OrVariable<tsfpf::Heap, tsfpf::RightOperand>, ()),
        );
    }
}
/// @generated by [term_specialized_impl_gen::gen_ccf_auto_impls]
pub mod ccf_auto_impls {
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Plus
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::LeftOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::RightOperand
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::F
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Sum
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Nat
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::FileItem
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::LeftOperand, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::RightOperand, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, pattern_tmf::OrVariable < crate
        ::term_specialized_file_pattern_fib::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_file_pattern_fib::Heap, pattern_tmf::OrVariableZeroOrMore <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Nat, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_file_pattern_fib::Heap, pattern_tmf::OrVariableZeroOrMore <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Nat, >, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap,
        pattern_tmf::OrVariableZeroOrMore < crate
        ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, tymetafuncspec_core::BoundedNat
        < crate ::term_specialized_file_pattern_fib::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, tymetafuncspec_core::IdxBox <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::F, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, tymetafuncspec_core::IdxBox <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Plus, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, pattern_tmf::NamedPattern <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Plus, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, pattern_tmf::NamedPattern <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::LeftOperand, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, pattern_tmf::NamedPattern <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::RightOperand, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, pattern_tmf::NamedPattern <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::F, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, pattern_tmf::NamedPattern <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Sum, >
    );
    term::auto_impl_ccf!(
        crate ::term_specialized_file_pattern_fib::Heap, file_tmf::File < crate
        ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::FileItem, >
    );
}
/// @generated by [words::words_inverse_impls]
pub mod words_inverse_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::BoundedNat;
    use pattern_tmf::OrVariableZeroOrMore;
    use pattern_tmf::OrVariable;
    use pattern_tmf::NamedPattern;
    use file_tmf::File;
    use fib_pat::words_mod_file_pattern_fib::sorts::Sum;
    use fib_pat::words_mod_file_pattern_fib::sorts::RightOperand;
    use fib_pat::words_mod_file_pattern_fib::sorts::Plus;
    use fib_pat::words_mod_file_pattern_fib::sorts::Nat;
    use fib_pat::words_mod_file_pattern_fib::sorts::LeftOperand;
    use fib_pat::words_mod_file_pattern_fib::sorts::FileItem;
    use fib_pat::words_mod_file_pattern_fib::sorts::F;
    use fib_pat::words_mod_file_pattern_fib::L;
    use crate::term_specialized_file_pattern_fib as tsfpf;
    impl words::InverseImplements<L, Plus> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::Plus;
        type StructuralImplementor = tsfpf::Plus;
    }
    impl words::InverseImplements<L, LeftOperand> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::LeftOperand;
        type StructuralImplementor = tsfpf::LeftOperand;
    }
    impl words::InverseImplements<L, RightOperand> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::RightOperand;
        type StructuralImplementor = tsfpf::RightOperand;
    }
    impl words::InverseImplements<L, F> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::F;
        type StructuralImplementor = tsfpf::F;
    }
    impl words::InverseImplements<L, Sum> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::Sum;
        type StructuralImplementor = tsfpf::Sum;
    }
    impl words::InverseImplements<L, Nat> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::Nat;
        type StructuralImplementor = tsfpf::Nat;
    }
    impl words::InverseImplements<L, FileItem> for tsfpf::Heap {
        type ExternBehavioralImplementor = tsfpf::FileItem;
        type StructuralImplementor = tsfpf::FileItem;
    }
    impl words::InverseImplements<L, OrVariable<(), LeftOperand>> for tsfpf::Heap {
        type ExternBehavioralImplementor = OrVariable<tsfpf::Heap, tsfpf::LeftOperand>;
        type StructuralImplementor = OrVariable<tsfpf::Heap, tsfpf::LeftOperand>;
    }
    impl words::InverseImplements<L, OrVariable<(), RightOperand>> for tsfpf::Heap {
        type ExternBehavioralImplementor = OrVariable<tsfpf::Heap, tsfpf::RightOperand>;
        type StructuralImplementor = OrVariable<tsfpf::Heap, tsfpf::RightOperand>;
    }
    impl words::InverseImplements<L, OrVariable<(), Nat>> for tsfpf::Heap {
        type ExternBehavioralImplementor = OrVariable<tsfpf::Heap, tsfpf::Nat>;
        type StructuralImplementor = OrVariable<tsfpf::Heap, tsfpf::Nat>;
    }
    impl words::InverseImplements<
        L,
        OrVariable<(), Set<(), OrVariableZeroOrMore<(), Nat>>>,
    > for tsfpf::Heap {
        type ExternBehavioralImplementor = OrVariable<
            tsfpf::Heap,
            Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>,
        >;
        type StructuralImplementor = OrVariable<
            tsfpf::Heap,
            Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>,
        >;
    }
    impl words::InverseImplements<L, Set<(), OrVariableZeroOrMore<(), Nat>>>
    for tsfpf::Heap {
        type ExternBehavioralImplementor = Set<
            tsfpf::Heap,
            OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>,
        >;
        type StructuralImplementor = Set<
            tsfpf::Heap,
            OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>,
        >;
    }
    impl words::InverseImplements<L, OrVariableZeroOrMore<(), Nat>> for tsfpf::Heap {
        type ExternBehavioralImplementor = OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>;
        type StructuralImplementor = OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>;
    }
    impl words::InverseImplements<L, BoundedNat<()>> for tsfpf::Heap {
        type ExternBehavioralImplementor = BoundedNat<tsfpf::Heap>;
        type StructuralImplementor = BoundedNat<tsfpf::Heap>;
    }
    impl words::InverseImplements<L, IdxBox<(), F>> for tsfpf::Heap {
        type ExternBehavioralImplementor = IdxBox<tsfpf::Heap, tsfpf::F>;
        type StructuralImplementor = IdxBox<tsfpf::Heap, tsfpf::F>;
    }
    impl words::InverseImplements<L, IdxBox<(), Plus>> for tsfpf::Heap {
        type ExternBehavioralImplementor = IdxBox<tsfpf::Heap, tsfpf::Plus>;
        type StructuralImplementor = IdxBox<tsfpf::Heap, tsfpf::Plus>;
    }
    impl words::InverseImplements<L, NamedPattern<(), Plus>> for tsfpf::Heap {
        type ExternBehavioralImplementor = NamedPattern<tsfpf::Heap, tsfpf::Plus>;
        type StructuralImplementor = NamedPattern<tsfpf::Heap, tsfpf::Plus>;
    }
    impl words::InverseImplements<L, NamedPattern<(), LeftOperand>> for tsfpf::Heap {
        type ExternBehavioralImplementor = NamedPattern<tsfpf::Heap, tsfpf::LeftOperand>;
        type StructuralImplementor = NamedPattern<tsfpf::Heap, tsfpf::LeftOperand>;
    }
    impl words::InverseImplements<L, NamedPattern<(), RightOperand>> for tsfpf::Heap {
        type ExternBehavioralImplementor = NamedPattern<
            tsfpf::Heap,
            tsfpf::RightOperand,
        >;
        type StructuralImplementor = NamedPattern<tsfpf::Heap, tsfpf::RightOperand>;
    }
    impl words::InverseImplements<L, NamedPattern<(), F>> for tsfpf::Heap {
        type ExternBehavioralImplementor = NamedPattern<tsfpf::Heap, tsfpf::F>;
        type StructuralImplementor = NamedPattern<tsfpf::Heap, tsfpf::F>;
    }
    impl words::InverseImplements<L, NamedPattern<(), Sum>> for tsfpf::Heap {
        type ExternBehavioralImplementor = NamedPattern<tsfpf::Heap, tsfpf::Sum>;
        type StructuralImplementor = NamedPattern<tsfpf::Heap, tsfpf::Sum>;
    }
    impl words::InverseImplements<L, File<(), FileItem>> for tsfpf::Heap {
        type ExternBehavioralImplementor = File<tsfpf::Heap, tsfpf::FileItem>;
        type StructuralImplementor = File<tsfpf::Heap, tsfpf::FileItem>;
    }
}
