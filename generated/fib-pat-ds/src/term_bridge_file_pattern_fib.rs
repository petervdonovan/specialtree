#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
use crate::term_specialized_file_pattern_fib as tsfpf;
/// @generated by [term_bridge_gen::generate_heap]
impl fib::term_trait_fib::Heap for tsfpf::Heap {
    type Plus = tsfpf::Plus;
    type LeftOperand = tsfpf::LeftOperand;
    type RightOperand = tsfpf::RightOperand;
    type F = tsfpf::F;
    type Sum = tsfpf::Sum;
    type Nat = tsfpf::Nat;
}
/// @generated by [term_bridge_gen::generate_owned_impls]
pub mod owned_impls {
    use crate::term_specialized_file_pattern_fib as tsfpf;
    impl fib::term_trait_fib::owned::Plus<tsfpf::Heap> for tsfpf::Plus {}
    impl fib::term_trait_fib::owned::LeftOperand<tsfpf::Heap> for tsfpf::LeftOperand {}
    impl fib::term_trait_fib::owned::RightOperand<tsfpf::Heap> for tsfpf::RightOperand {}
    impl fib::term_trait_fib::owned::F<tsfpf::Heap> for tsfpf::F {}
    impl fib::term_trait_fib::owned::Sum<tsfpf::Heap> for tsfpf::Sum {}
    impl fib::term_trait_fib::owned::Nat<tsfpf::Heap> for tsfpf::Nat {}
}
/// @generated by [term_bridge_gen::bridge_words_impls]
pub mod words_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use pattern_tmf::OrVariableZeroOrMore;
    use fib::words_mod_fib::sorts::Sum;
    use fib::words_mod_fib::sorts::RightOperand;
    use fib::words_mod_fib::sorts::Plus;
    use fib::words_mod_fib::sorts::Nat;
    use fib::words_mod_fib::sorts::LeftOperand;
    use fib::words_mod_fib::sorts::F;
    use fib::words_mod_fib::L;
    use crate::term_specialized_file_pattern_fib as tsfpf;
    impl words::Implements<tsfpf::Heap, L> for tsfpf::Plus {
        type LWord = Plus;
    }
    impl words::Implements<tsfpf::Heap, L> for tsfpf::LeftOperand {
        type LWord = LeftOperand;
    }
    impl words::Implements<tsfpf::Heap, L> for tsfpf::RightOperand {
        type LWord = RightOperand;
    }
    impl words::Implements<tsfpf::Heap, L> for tsfpf::F {
        type LWord = F;
    }
    impl words::Implements<tsfpf::Heap, L> for tsfpf::Sum {
        type LWord = Sum;
    }
    impl words::Implements<tsfpf::Heap, L> for tsfpf::Nat {
        type LWord = Nat;
    }
    impl words::Implements<tsfpf::Heap, L>
    for Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>> {
        type LWord = Set<(), Nat>;
    }
    impl words::Implements<tsfpf::Heap, L> for BoundedNat<tsfpf::Heap> {
        type LWord = BoundedNat<()>;
    }
}
/// @generated by [term_bridge_gen::generate_maps_tmf_impls]
pub mod maps_tmf_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use pattern_tmf::OrVariableZeroOrMore;
    use fib::words_mod_fib::L;
    use fib::term_trait_fib::Heap;
    use crate::term_specialized_file_pattern_fib as tsfpf;
    impl term::MapsTmf<L, Set<tsfpf::Heap, <tsfpf::Heap as Heap>::Nat>> for tsfpf::Heap {
        type TmfFrom = Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>;
        type TmfTo = Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>;
    }
    impl term::MapsTmf<L, BoundedNat<tsfpf::Heap>> for tsfpf::Heap {
        type TmfFrom = BoundedNat<tsfpf::Heap>;
        type TmfTo = BoundedNat<tsfpf::Heap>;
    }
}
