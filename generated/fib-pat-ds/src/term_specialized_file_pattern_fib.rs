#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_gen::generate]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::IdxBox;
use tymetafuncspec_core::BoundedNat;
use pattern_tmf::OrVariableZeroOrMore;
use pattern_tmf::OrVariable;
use pattern_tmf::NamedPattern;
use crate::term_specialized_file_pattern_fib as tsfpf;
use crate::term_specialized_file_pattern_fib::heap::set as tsfpfhs;
use crate::term_specialized_file_pattern_fib::heap::or_variable_zero_or_more as tsfpfhovzom;
use crate::term_specialized_file_pattern_fib::heap::or_variable as tsfpfhov;
use crate::term_specialized_file_pattern_fib::heap::nat_lit as tsfpfhnl;
use crate::term_specialized_file_pattern_fib::heap::named_pattern as tsfpfhnp;
use crate::term_specialized_file_pattern_fib::heap::idx_box as tsfpfhib;
use crate::term_specialized_file_pattern_fib::heap::file as tsfpfhf;
#[derive(Clone, Copy)]
pub struct Plus {
    pub left_operand: OrVariable<tsfpf::Heap, tsfpf::LeftOperand>,
    pub right_operand: OrVariable<tsfpf::Heap, tsfpf::RightOperand>,
}
#[derive(Clone, Copy)]
pub struct LeftOperand {
    pub nat: OrVariable<tsfpf::Heap, tsfpf::Nat>,
}
#[derive(Clone, Copy)]
pub struct RightOperand {
    pub nat: OrVariable<tsfpf::Heap, tsfpf::Nat>,
}
#[derive(Clone, Copy)]
pub struct F {
    pub nat: OrVariable<tsfpf::Heap, tsfpf::Nat>,
}
#[derive(Clone, Copy)]
pub struct Sum {
    pub set: OrVariable<
        tsfpf::Heap,
        Set<tsfpf::Heap, OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>>,
    >,
}
#[derive(Clone, Copy)]
pub enum Nat {
    NatLit(BoundedNat<tsfpf::Heap>),
    F(IdxBox<tsfpf::Heap, tsfpf::F>),
    Plus(IdxBox<tsfpf::Heap, tsfpf::Plus>),
    Sum(tsfpf::Sum),
}
#[derive(Clone, Copy)]
pub enum FileItem {
    Plus(NamedPattern<tsfpf::Heap, tsfpf::Plus>),
    LeftOperand(NamedPattern<tsfpf::Heap, tsfpf::LeftOperand>),
    RightOperand(NamedPattern<tsfpf::Heap, tsfpf::RightOperand>),
    F(NamedPattern<tsfpf::Heap, tsfpf::F>),
    Sum(NamedPattern<tsfpf::Heap, tsfpf::Sum>),
}
/// @generated by [term_specialized_gen::gen_heaped_impls]
pub mod heaped {
    use crate::term_specialized_file_pattern_fib as tsfpf;
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsfpf::Plus {
        type Heap = tsfpf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsfpf::LeftOperand {
        type Heap = tsfpf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsfpf::RightOperand {
        type Heap = tsfpf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsfpf::F {
        type Heap = tsfpf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsfpf::Sum {
        type Heap = tsfpf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsfpf::Nat {
        type Heap = tsfpf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tsfpf::FileItem {
        type Heap = tsfpf::Heap;
    }
}
/// @generated by [term_specialized_gen::gen_heap]
#[derive(Default)]
pub struct Heap {
    or_variable: tsfpfhov::Bak,
    set: tsfpfhs::Bak,
    or_variable_zero_or_more: tsfpfhovzom::Bak,
    nat_lit: tsfpfhnl::Bak,
    idx_box: tsfpfhib::Bak,
    named_pattern: tsfpfhnp::Bak,
    file: tsfpfhf::Bak,
}
/// @generated by [term_specialized_gen::gen_heap]
pub mod heap {
    use crate::term_specialized_file_pattern_fib::heap::set as tsfpfhs;
    use crate::term_specialized_file_pattern_fib::heap::or_variable_zero_or_more as tsfpfhovzom;
    use crate::term_specialized_file_pattern_fib::heap::or_variable as tsfpfhov;
    use crate::term_specialized_file_pattern_fib::heap::nat_lit as tsfpfhnl;
    use crate::term_specialized_file_pattern_fib::heap::named_pattern as tsfpfhnp;
    use crate::term_specialized_file_pattern_fib::heap::idx_box as tsfpfhib;
    use crate::term_specialized_file_pattern_fib::heap::file as tsfpfhf;
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    #[derive(Default)]
    pub struct Bak {
        pub or_variable: tsfpfhov::Bak,
        pub set: tsfpfhs::Bak,
        pub or_variable_zero_or_more: tsfpfhovzom::Bak,
        pub nat_lit: tsfpfhnl::Bak,
        pub idx_box: tsfpfhib::Bak,
        pub named_pattern: tsfpfhnp::Bak,
        pub file: tsfpfhf::Bak,
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod or_variable {
        use crate::term_specialized_file_pattern_fib::heap::or_variable::set as tsfpfhovs;
        use crate::term_specialized_file_pattern_fib::heap::or_variable::right_operand as tsfpfhovro;
        use crate::term_specialized_file_pattern_fib::heap::or_variable::nat as tsfpfhovn;
        use crate::term_specialized_file_pattern_fib::heap::or_variable::left_operand as tsfpfhovlo;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub left_operand: tsfpfhovlo::Bak,
            pub right_operand: tsfpfhovro::Bak,
            pub nat: tsfpfhovn::Bak,
            pub set: tsfpfhovs::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod left_operand {
            use pattern_tmf::OrVariableHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableHeapBak<tsfpf::Heap, tsfpf::LeftOperand>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod right_operand {
            use pattern_tmf::OrVariableHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableHeapBak<tsfpf::Heap, tsfpf::RightOperand>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod nat {
            use pattern_tmf::OrVariableHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableHeapBak<tsfpf::Heap, tsfpf::Nat>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod set {
            use crate::term_specialized_file_pattern_fib::heap::or_variable::set::or_variable_zero_or_more as tsfpfhovsovzom;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub or_variable_zero_or_more: tsfpfhovsovzom::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod or_variable_zero_or_more {
                use crate::term_specialized_file_pattern_fib::heap::or_variable::set::or_variable_zero_or_more::nat as tsfpfhovsovzomn;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub nat: tsfpfhovsovzomn::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod nat {
                    use tymetafuncspec_core::Set;
                    use pattern_tmf::OrVariableZeroOrMore;
                    use pattern_tmf::OrVariableHeapBak;
                    use crate::term_specialized_file_pattern_fib as tsfpf;
                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                    #[derive(Default)]
                    pub struct Bak(
                        pub OrVariableHeapBak<
                            tsfpf::Heap,
                            Set<
                                tsfpf::Heap,
                                OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>,
                            >,
                        >,
                    );
                }
            }
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod set {
        use crate::term_specialized_file_pattern_fib::heap::set::or_variable_zero_or_more as tsfpfhsovzom;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub or_variable_zero_or_more: tsfpfhsovzom::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod or_variable_zero_or_more {
            use crate::term_specialized_file_pattern_fib::heap::set::or_variable_zero_or_more::nat as tsfpfhsovzomn;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub nat: tsfpfhsovzomn::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod nat {
                use tymetafuncspec_core::SetHeapBak;
                use pattern_tmf::OrVariableZeroOrMore;
                use crate::term_specialized_file_pattern_fib as tsfpf;
                /// @generated by [term_specialized_gen::gen_heapbak_module]
                #[derive(Default)]
                pub struct Bak(
                    pub SetHeapBak<
                        tsfpf::Heap,
                        OrVariableZeroOrMore<tsfpf::Heap, tsfpf::Nat>,
                    >,
                );
            }
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod or_variable_zero_or_more {
        use crate::term_specialized_file_pattern_fib::heap::or_variable_zero_or_more::nat as tsfpfhovzomn;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub nat: tsfpfhovzomn::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod nat {
            use pattern_tmf::OrVariableZeroOrMoreHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableZeroOrMoreHeapBak<tsfpf::Heap, tsfpf::Nat>);
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod nat_lit {
        use tymetafuncspec_core::BoundedNatHeapBak;
        use crate::term_specialized_file_pattern_fib as tsfpf;
        /// @generated by [term_specialized_gen::gen_heapbak_module]
        #[derive(Default)]
        pub struct Bak(pub BoundedNatHeapBak<tsfpf::Heap>);
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod idx_box {
        use crate::term_specialized_file_pattern_fib::heap::idx_box::plus as tsfpfhibp;
        use crate::term_specialized_file_pattern_fib::heap::idx_box::f as tsfpfhibf;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub f: tsfpfhibf::Bak,
            pub plus: tsfpfhibp::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod f {
            use tymetafuncspec_core::IdxBoxHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub IdxBoxHeapBak<tsfpf::Heap, tsfpf::F>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod plus {
            use tymetafuncspec_core::IdxBoxHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub IdxBoxHeapBak<tsfpf::Heap, tsfpf::Plus>);
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod named_pattern {
        use crate::term_specialized_file_pattern_fib::heap::named_pattern::sum as tsfpfhnps;
        use crate::term_specialized_file_pattern_fib::heap::named_pattern::right_operand as tsfpfhnpro;
        use crate::term_specialized_file_pattern_fib::heap::named_pattern::plus as tsfpfhnpp;
        use crate::term_specialized_file_pattern_fib::heap::named_pattern::left_operand as tsfpfhnplo;
        use crate::term_specialized_file_pattern_fib::heap::named_pattern::f as tsfpfhnpf;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub plus: tsfpfhnpp::Bak,
            pub left_operand: tsfpfhnplo::Bak,
            pub right_operand: tsfpfhnpro::Bak,
            pub f: tsfpfhnpf::Bak,
            pub sum: tsfpfhnps::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod plus {
            use pattern_tmf::NamedPatternHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub NamedPatternHeapBak<tsfpf::Heap, tsfpf::Plus>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod left_operand {
            use pattern_tmf::NamedPatternHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub NamedPatternHeapBak<tsfpf::Heap, tsfpf::LeftOperand>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod right_operand {
            use pattern_tmf::NamedPatternHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub NamedPatternHeapBak<tsfpf::Heap, tsfpf::RightOperand>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod f {
            use pattern_tmf::NamedPatternHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub NamedPatternHeapBak<tsfpf::Heap, tsfpf::F>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod sum {
            use pattern_tmf::NamedPatternHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub NamedPatternHeapBak<tsfpf::Heap, tsfpf::Sum>);
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod file {
        use crate::term_specialized_file_pattern_fib::heap::file::file_item as tsfpfhffi;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub file_item: tsfpfhffi::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod file_item {
            use file_tmf::FileHeapBak;
            use crate::term_specialized_file_pattern_fib as tsfpf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub FileHeapBak<tsfpf::Heap, tsfpf::FileItem>);
        }
    }
}
/// @generated by [term_specialized_gen::gen_heap]
pub mod superheap {
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; pattern_tmf::OrVariableHeapBak <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::LeftOperand, >; or_variable left_operand
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; pattern_tmf::OrVariableHeapBak <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::RightOperand, >; or_variable right_operand
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; pattern_tmf::OrVariableHeapBak <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Nat, >; or_variable nat
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; pattern_tmf::OrVariableHeapBak <
        crate ::term_specialized_file_pattern_fib::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_file_pattern_fib::Heap, pattern_tmf::OrVariableZeroOrMore <
        crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Nat, >, >, >; or_variable set
        or_variable_zero_or_more nat
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; tymetafuncspec_core::SetHeapBak
        < crate ::term_specialized_file_pattern_fib::Heap,
        pattern_tmf::OrVariableZeroOrMore < crate
        ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Nat, >, >; set or_variable_zero_or_more nat
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap;
        pattern_tmf::OrVariableZeroOrMoreHeapBak < crate
        ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Nat, >; or_variable_zero_or_more nat
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap;
        tymetafuncspec_core::BoundedNatHeapBak < crate
        ::term_specialized_file_pattern_fib::Heap, >; nat_lit
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap;
        tymetafuncspec_core::IdxBoxHeapBak < crate
        ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::F, >; idx_box f
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap;
        tymetafuncspec_core::IdxBoxHeapBak < crate
        ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Plus, >; idx_box plus
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; pattern_tmf::NamedPatternHeapBak
        < crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Plus, >; named_pattern plus
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; pattern_tmf::NamedPatternHeapBak
        < crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::LeftOperand, >; named_pattern left_operand
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; pattern_tmf::NamedPatternHeapBak
        < crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::RightOperand, >; named_pattern right_operand
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; pattern_tmf::NamedPatternHeapBak
        < crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::F, >; named_pattern f
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; pattern_tmf::NamedPatternHeapBak
        < crate ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::Sum, >; named_pattern sum
    );
    term::impl_superheap!(
        crate ::term_specialized_file_pattern_fib::Heap; file_tmf::FileHeapBak < crate
        ::term_specialized_file_pattern_fib::Heap, crate
        ::term_specialized_file_pattern_fib::FileItem, >; file file_item
    );
}
