#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
use crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as ltsrlalflpfrrr;
/// @generated by [term_bridge_gen::generate_heap]
impl fib::l_term_trait_r_fib::Heap for ltsrlalflpfrrr::Heap {}
/// @generated by [words::words_inverse_impls]
pub mod words_inverse_impls {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::BoundedNat;
    use pattern_tmf::OrVariableZeroOrMore;
    use fib::l_words_mod_r_fib::sorts::Sum;
    use fib::l_words_mod_r_fib::sorts::Right_operand;
    use fib::l_words_mod_r_fib::sorts::Plus;
    use fib::l_words_mod_r_fib::sorts::Nat;
    use fib::l_words_mod_r_fib::sorts::Left_operand;
    use fib::l_words_mod_r_fib::sorts::F;
    use fib::l_words_mod_r_fib::L;
    use crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as ltsrlalflpfrrr;
    impl words::InverseImplements<L, F> for ltsrlalflpfrrr::Heap {
        type ExternBehavioralImplementor = ltsrlalflpfrrr::F;
        type StructuralImplementor = ltsrlalflpfrrr::F;
    }
    impl words::InverseImplements<L, Left_operand> for ltsrlalflpfrrr::Heap {
        type ExternBehavioralImplementor = ltsrlalflpfrrr::Left_operand;
        type StructuralImplementor = ltsrlalflpfrrr::Left_operand;
    }
    impl words::InverseImplements<L, Plus> for ltsrlalflpfrrr::Heap {
        type ExternBehavioralImplementor = ltsrlalflpfrrr::Plus;
        type StructuralImplementor = ltsrlalflpfrrr::Plus;
    }
    impl words::InverseImplements<L, Right_operand> for ltsrlalflpfrrr::Heap {
        type ExternBehavioralImplementor = ltsrlalflpfrrr::Right_operand;
        type StructuralImplementor = ltsrlalflpfrrr::Right_operand;
    }
    impl words::InverseImplements<L, Sum> for ltsrlalflpfrrr::Heap {
        type ExternBehavioralImplementor = ltsrlalflpfrrr::Sum;
        type StructuralImplementor = ltsrlalflpfrrr::Sum;
    }
    impl words::InverseImplements<L, Nat> for ltsrlalflpfrrr::Heap {
        type ExternBehavioralImplementor = ltsrlalflpfrrr::Nat;
        type StructuralImplementor = ltsrlalflpfrrr::Nat;
    }
    impl words::InverseImplements<L, Set<(), Nat>> for ltsrlalflpfrrr::Heap {
        type ExternBehavioralImplementor = Set<
            ltsrlalflpfrrr::Heap,
            OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
        >;
        type StructuralImplementor = Set<
            ltsrlalflpfrrr::Heap,
            OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
        >;
    }
    impl words::InverseImplements<L, BoundedNat<()>> for ltsrlalflpfrrr::Heap {
        type ExternBehavioralImplementor = BoundedNat<ltsrlalflpfrrr::Heap>;
        type StructuralImplementor = BoundedNat<ltsrlalflpfrrr::Heap>;
    }
}
