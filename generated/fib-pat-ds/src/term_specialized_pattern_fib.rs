#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_gen::generate]
use tymetafuncspec_core::Set;
use tymetafuncspec_core::IdxBox;
use tymetafuncspec_core::BoundedNat;
use pattern_tmf::OrVariableZeroOrMore;
use pattern_tmf::OrVariable;
use crate::term_specialized_pattern_fib as tspf;
use crate::term_specialized_pattern_fib::heap::set as tspfhs;
use crate::term_specialized_pattern_fib::heap::or_variable_zero_or_more as tspfhovzom;
use crate::term_specialized_pattern_fib::heap::or_variable as tspfhov;
use crate::term_specialized_pattern_fib::heap::nat_lit as tspfhnl;
use crate::term_specialized_pattern_fib::heap::idx_box as tspfhib;
/// @generated by [term_specialized_gen::gen_heap]
#[derive(Default)]
pub struct Heap {
    or_variable: tspfhov::Bak,
    set: tspfhs::Bak,
    or_variable_zero_or_more: tspfhovzom::Bak,
    nat_lit: tspfhnl::Bak,
    idx_box: tspfhib::Bak,
}
/// @generated by [term_specialized_gen::gen_heap]
pub mod heap {
    use crate::term_specialized_pattern_fib::heap::set as tspfhs;
    use crate::term_specialized_pattern_fib::heap::or_variable_zero_or_more as tspfhovzom;
    use crate::term_specialized_pattern_fib::heap::or_variable as tspfhov;
    use crate::term_specialized_pattern_fib::heap::nat_lit as tspfhnl;
    use crate::term_specialized_pattern_fib::heap::idx_box as tspfhib;
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    #[derive(Default)]
    pub struct Bak {
        pub or_variable: tspfhov::Bak,
        pub set: tspfhs::Bak,
        pub or_variable_zero_or_more: tspfhovzom::Bak,
        pub nat_lit: tspfhnl::Bak,
        pub idx_box: tspfhib::Bak,
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod or_variable {
        use crate::term_specialized_pattern_fib::heap::or_variable::set as tspfhovs;
        use crate::term_specialized_pattern_fib::heap::or_variable::right_operand as tspfhovro;
        use crate::term_specialized_pattern_fib::heap::or_variable::nat as tspfhovn;
        use crate::term_specialized_pattern_fib::heap::or_variable::left_operand as tspfhovlo;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub left_operand: tspfhovlo::Bak,
            pub right_operand: tspfhovro::Bak,
            pub nat: tspfhovn::Bak,
            pub set: tspfhovs::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod left_operand {
            use pattern_tmf::OrVariableHeapBak;
            use crate::term_specialized_pattern_fib as tspf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableHeapBak<tspf::Heap, tspf::LeftOperand>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod right_operand {
            use pattern_tmf::OrVariableHeapBak;
            use crate::term_specialized_pattern_fib as tspf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableHeapBak<tspf::Heap, tspf::RightOperand>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod nat {
            use pattern_tmf::OrVariableHeapBak;
            use crate::term_specialized_pattern_fib as tspf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableHeapBak<tspf::Heap, tspf::Nat>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod set {
            use crate::term_specialized_pattern_fib::heap::or_variable::set::or_variable_zero_or_more as tspfhovsovzom;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub or_variable_zero_or_more: tspfhovsovzom::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod or_variable_zero_or_more {
                use crate::term_specialized_pattern_fib::heap::or_variable::set::or_variable_zero_or_more::nat as tspfhovsovzomn;
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                #[derive(Default)]
                pub struct Bak {
                    pub nat: tspfhovsovzomn::Bak,
                }
                /// @generated by [term_specialized_gen::gen_modules_with_prefix]
                pub mod nat {
                    use tymetafuncspec_core::Set;
                    use pattern_tmf::OrVariableZeroOrMore;
                    use pattern_tmf::OrVariableHeapBak;
                    use crate::term_specialized_pattern_fib as tspf;
                    /// @generated by [term_specialized_gen::gen_heapbak_module]
                    #[derive(Default)]
                    pub struct Bak(
                        pub OrVariableHeapBak<
                            tspf::Heap,
                            Set<tspf::Heap, OrVariableZeroOrMore<tspf::Heap, tspf::Nat>>,
                        >,
                    );
                }
            }
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod set {
        use crate::term_specialized_pattern_fib::heap::set::or_variable_zero_or_more as tspfhsovzom;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub or_variable_zero_or_more: tspfhsovzom::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod or_variable_zero_or_more {
            use crate::term_specialized_pattern_fib::heap::set::or_variable_zero_or_more::nat as tspfhsovzomn;
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            #[derive(Default)]
            pub struct Bak {
                pub nat: tspfhsovzomn::Bak,
            }
            /// @generated by [term_specialized_gen::gen_modules_with_prefix]
            pub mod nat {
                use tymetafuncspec_core::SetHeapBak;
                use pattern_tmf::OrVariableZeroOrMore;
                use crate::term_specialized_pattern_fib as tspf;
                /// @generated by [term_specialized_gen::gen_heapbak_module]
                #[derive(Default)]
                pub struct Bak(
                    pub SetHeapBak<
                        tspf::Heap,
                        OrVariableZeroOrMore<tspf::Heap, tspf::Nat>,
                    >,
                );
            }
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod or_variable_zero_or_more {
        use crate::term_specialized_pattern_fib::heap::or_variable_zero_or_more::nat as tspfhovzomn;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub nat: tspfhovzomn::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod nat {
            use pattern_tmf::OrVariableZeroOrMoreHeapBak;
            use crate::term_specialized_pattern_fib as tspf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub OrVariableZeroOrMoreHeapBak<tspf::Heap, tspf::Nat>);
        }
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod nat_lit {
        use tymetafuncspec_core::BoundedNatHeapBak;
        use crate::term_specialized_pattern_fib as tspf;
        /// @generated by [term_specialized_gen::gen_heapbak_module]
        #[derive(Default)]
        pub struct Bak(pub BoundedNatHeapBak<tspf::Heap>);
    }
    /// @generated by [term_specialized_gen::gen_modules_with_prefix]
    pub mod idx_box {
        use crate::term_specialized_pattern_fib::heap::idx_box::plus as tspfhibp;
        use crate::term_specialized_pattern_fib::heap::idx_box::f as tspfhibf;
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        #[derive(Default)]
        pub struct Bak {
            pub f: tspfhibf::Bak,
            pub plus: tspfhibp::Bak,
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod f {
            use tymetafuncspec_core::IdxBoxHeapBak;
            use crate::term_specialized_pattern_fib as tspf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub IdxBoxHeapBak<tspf::Heap, tspf::F>);
        }
        /// @generated by [term_specialized_gen::gen_modules_with_prefix]
        pub mod plus {
            use tymetafuncspec_core::IdxBoxHeapBak;
            use crate::term_specialized_pattern_fib as tspf;
            /// @generated by [term_specialized_gen::gen_heapbak_module]
            #[derive(Default)]
            pub struct Bak(pub IdxBoxHeapBak<tspf::Heap, tspf::Plus>);
        }
    }
}
/// @generated by [term_specialized_gen::gen_heap]
pub mod superheap {
    term::impl_superheap!(
        crate ::term_specialized_pattern_fib::Heap; pattern_tmf::OrVariableHeapBak <
        crate ::term_specialized_pattern_fib::Heap, crate
        ::term_specialized_pattern_fib::LeftOperand >; or_variable left_operand
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern_fib::Heap; pattern_tmf::OrVariableHeapBak <
        crate ::term_specialized_pattern_fib::Heap, crate
        ::term_specialized_pattern_fib::RightOperand >; or_variable right_operand
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern_fib::Heap; pattern_tmf::OrVariableHeapBak <
        crate ::term_specialized_pattern_fib::Heap, crate
        ::term_specialized_pattern_fib::Nat >; or_variable nat
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern_fib::Heap; pattern_tmf::OrVariableHeapBak <
        crate ::term_specialized_pattern_fib::Heap, tymetafuncspec_core::Set < crate
        ::term_specialized_pattern_fib::Heap, pattern_tmf::OrVariableZeroOrMore < crate
        ::term_specialized_pattern_fib::Heap, crate ::term_specialized_pattern_fib::Nat,
        >, > >; or_variable set or_variable_zero_or_more nat
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern_fib::Heap; tymetafuncspec_core::SetHeapBak <
        crate ::term_specialized_pattern_fib::Heap, pattern_tmf::OrVariableZeroOrMore <
        crate ::term_specialized_pattern_fib::Heap, crate
        ::term_specialized_pattern_fib::Nat, > >; set or_variable_zero_or_more nat
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern_fib::Heap;
        pattern_tmf::OrVariableZeroOrMoreHeapBak < crate
        ::term_specialized_pattern_fib::Heap, crate ::term_specialized_pattern_fib::Nat
        >; or_variable_zero_or_more nat
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern_fib::Heap;
        tymetafuncspec_core::BoundedNatHeapBak < crate
        ::term_specialized_pattern_fib::Heap, >; nat_lit
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern_fib::Heap; tymetafuncspec_core::IdxBoxHeapBak <
        crate ::term_specialized_pattern_fib::Heap, crate
        ::term_specialized_pattern_fib::F >; idx_box f
    );
    term::impl_superheap!(
        crate ::term_specialized_pattern_fib::Heap; tymetafuncspec_core::IdxBoxHeapBak <
        crate ::term_specialized_pattern_fib::Heap, crate
        ::term_specialized_pattern_fib::Plus >; idx_box plus
    );
}
#[derive(Clone, Copy)]
pub struct Plus {
    pub left_operand: OrVariable<tspf::Heap, tspf::LeftOperand>,
    pub right_operand: OrVariable<tspf::Heap, tspf::RightOperand>,
}
#[derive(Clone, Copy)]
pub struct LeftOperand {
    pub nat: OrVariable<tspf::Heap, tspf::Nat>,
}
#[derive(Clone, Copy)]
pub struct RightOperand {
    pub nat: OrVariable<tspf::Heap, tspf::Nat>,
}
#[derive(Clone, Copy)]
pub struct F {
    pub nat: OrVariable<tspf::Heap, tspf::Nat>,
}
#[derive(Clone, Copy)]
pub struct Sum {
    pub set: OrVariable<
        tspf::Heap,
        Set<tspf::Heap, OrVariableZeroOrMore<tspf::Heap, tspf::Nat>>,
    >,
}
#[derive(Clone, Copy)]
pub enum Nat {
    NatLit(BoundedNat<tspf::Heap>),
    F(IdxBox<tspf::Heap, tspf::F>),
    Plus(IdxBox<tspf::Heap, tspf::Plus>),
    Sum(tspf::Sum),
}
/// @generated by [term_specialized_gen::gen_heaped_impls]
pub mod heaped {
    use crate::term_specialized_pattern_fib as tspf;
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tspf::Plus {
        type Heap = tspf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tspf::LeftOperand {
        type Heap = tspf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tspf::RightOperand {
        type Heap = tspf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tspf::F {
        type Heap = tspf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tspf::Sum {
        type Heap = tspf::Heap;
    }
    /// @generated by [term_specialized_gen::gen_heaped_impls::heaped_impl]
    impl term::Heaped for tspf::Nat {
        type Heap = tspf::Heap;
    }
}
