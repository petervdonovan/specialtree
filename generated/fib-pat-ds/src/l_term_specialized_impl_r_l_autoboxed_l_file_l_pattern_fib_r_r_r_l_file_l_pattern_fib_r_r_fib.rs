#![feature(custom_inner_attributes)]
#![rustfmt::skip]
#![allow(warnings)]
#![allow(unknown_lints)]
//! @generated by [term_specialized_impl_gen::generate]
/// @generated by [term_specialized_impl_gen::gen_ccf_mod]
pub mod ccf_impls {
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod f {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as lwmrlalflpfrrr;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::sorts as lwmrlalflpfrrrs;
        use crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as ltsrlalflpfrrr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    OrVariable<(), lwmrlalflpfrrrs::Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::F {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        OrVariable<(), lwmrlalflpfrrrs::Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::F {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    OrVariable<(), lwmrlalflpfrrrs::Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod left_operand {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as lwmrlalflpfrrr;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::sorts as lwmrlalflpfrrrs;
        use crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as ltsrlalflpfrrr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    OrVariable<(), lwmrlalflpfrrrs::Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::Left_operand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        OrVariable<(), lwmrlalflpfrrrs::Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Left_operand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    OrVariable<(), lwmrlalflpfrrrs::Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod plus {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as lwmrlalflpfrrr;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::sorts as lwmrlalflpfrrrs;
        use crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as ltsrlalflpfrrr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    OrVariable<(), lwmrlalflpfrrrs::Left_operand>,
                >>::StructuralImplementor,
                (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        OrVariable<(), lwmrlalflpfrrrs::Right_operand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ),
        > for ltsrlalflpfrrr::Plus {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        OrVariable<(), lwmrlalflpfrrrs::Left_operand>,
                    >>::StructuralImplementor,
                    (
                        <<Self as Heaped>::Heap as InverseImplements<
                            lwmrlalflpfrrr::L,
                            OrVariable<(), lwmrlalflpfrrrs::Right_operand>,
                        >>::StructuralImplementor,
                        (),
                    ),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Plus {
                    left_operand: t.0,
                    right_operand: t.1.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    OrVariable<(), lwmrlalflpfrrrs::Left_operand>,
                >>::StructuralImplementor,
                (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        OrVariable<(), lwmrlalflpfrrrs::Right_operand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) {
                (self.left_operand, (self.right_operand, ()))
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod right_operand {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::OrVariable;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as lwmrlalflpfrrr;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::sorts as lwmrlalflpfrrrs;
        use crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as ltsrlalflpfrrr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    OrVariable<(), lwmrlalflpfrrrs::Nat>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::Right_operand {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        OrVariable<(), lwmrlalflpfrrrs::Nat>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Right_operand {
                    nat: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    OrVariable<(), lwmrlalflpfrrrs::Nat>,
                >>::StructuralImplementor,
                (),
            ) {
                (self.nat, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod sum {
        use words::InverseImplements;
        use tymetafuncspec_core::Set;
        use term::Heaped;
        use pattern_tmf::OrVariableZeroOrMore;
        use pattern_tmf::OrVariable;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as lwmrlalflpfrrr;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::sorts as lwmrlalflpfrrrs;
        use crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as ltsrlalflpfrrr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_prod]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    OrVariable<
                        (),
                        Set<(), OrVariableZeroOrMore<(), lwmrlalflpfrrrs::Nat>>,
                    >,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::Sum {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        OrVariable<
                            (),
                            Set<(), OrVariableZeroOrMore<(), lwmrlalflpfrrrs::Nat>>,
                        >,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Sum {
                    set: t.0,
                }
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                true
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    OrVariable<
                        (),
                        Set<(), OrVariableZeroOrMore<(), lwmrlalflpfrrrs::Nat>>,
                    >,
                >>::StructuralImplementor,
                (),
            ) {
                (self.set, ())
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod nat {
        use words::InverseImplements;
        use tymetafuncspec_core::IdxBox;
        use tymetafuncspec_core::BoundedNat;
        use term::Heaped;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as lwmrlalflpfrrr;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::sorts as lwmrlalflpfrrrs;
        use crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as ltsrlalflpfrrr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    BoundedNat<()>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        BoundedNat<()>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::NatLit(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::NatLit(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    BoundedNat<()>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::NatLit(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    IdxBox<(), lwmrlalflpfrrrs::F>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        IdxBox<(), lwmrlalflpfrrrs::F>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::F(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::F(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    IdxBox<(), lwmrlalflpfrrrs::F>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::F(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    IdxBox<(), lwmrlalflpfrrrs::Plus>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        IdxBox<(), lwmrlalflpfrrrs::Plus>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::Plus(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::Plus(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    IdxBox<(), lwmrlalflpfrrrs::Plus>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::Plus(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    lwmrlalflpfrrrs::Sum,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::Nat {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        lwmrlalflpfrrrs::Sum,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::Sum(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::Sum(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    lwmrlalflpfrrrs::Sum,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat::Sum(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
    /// @generated by [term_specialized_impl_gen::gen_ccf_impls]
    pub mod file_item {
        use words::InverseImplements;
        use term::Heaped;
        use pattern_tmf::NamedPattern;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as lwmrlalflpfrrr;
        use crate::l_words_mod_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::sorts as lwmrlalflpfrrrs;
        use crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as ltsrlalflpfrrr;
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    NamedPattern<(), lwmrlalflpfrrrs::F>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        NamedPattern<(), lwmrlalflpfrrrs::F>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::F(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::F(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    NamedPattern<(), lwmrlalflpfrrrs::F>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::F(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    NamedPattern<(), lwmrlalflpfrrrs::Left_operand>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        NamedPattern<(), lwmrlalflpfrrrs::Left_operand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Left_operand(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Left_operand(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    NamedPattern<(), lwmrlalflpfrrrs::Left_operand>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Left_operand(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    NamedPattern<(), lwmrlalflpfrrrs::Plus>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        NamedPattern<(), lwmrlalflpfrrrs::Plus>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Plus(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Plus(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    NamedPattern<(), lwmrlalflpfrrrs::Plus>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Plus(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    NamedPattern<(), lwmrlalflpfrrrs::Right_operand>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        NamedPattern<(), lwmrlalflpfrrrs::Right_operand>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Right_operand(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Right_operand(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    NamedPattern<(), lwmrlalflpfrrrs::Right_operand>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Right_operand(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
        /// @generated by [term_specialized_impl_gen::gen_ccf_impl_sum]
        impl ccf::DirectlyCanonicallyConstructibleFrom<
            <Self as Heaped>::Heap,
            (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    NamedPattern<(), lwmrlalflpfrrrs::Sum>,
                >>::StructuralImplementor,
                (),
            ),
        > for ltsrlalflpfrrr::FileItem {
            fn construct(
                heap: &mut <Self as Heaped>::Heap,
                t: (
                    <<Self as Heaped>::Heap as InverseImplements<
                        lwmrlalflpfrrr::L,
                        NamedPattern<(), lwmrlalflpfrrrs::Sum>,
                    >>::StructuralImplementor,
                    (),
                ),
            ) -> Self {
                crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Sum(
                    t.0,
                )
            }
            fn deconstruct_succeeds(&self, heap: &<Self as Heaped>::Heap) -> bool {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Sum(
                        _,
                    ) => true,
                    _ => false,
                }
            }
            fn deconstruct(
                self,
                heap: &<Self as Heaped>::Heap,
            ) -> (
                <<Self as Heaped>::Heap as InverseImplements<
                    lwmrlalflpfrrr::L,
                    NamedPattern<(), lwmrlalflpfrrrs::Sum>,
                >>::StructuralImplementor,
                (),
            ) {
                match self {
                    crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem::Sum(
                        t,
                    ) => (t, ()),
                    _ => panic!("conversion failure"),
                }
            }
        }
    }
}
/// @generated by [term_specialized_impl_gen::gen_transitive_ccf_mod]
pub mod transitive_ccf {
    use tymetafuncspec_core::Set;
    use tymetafuncspec_core::IdxBox;
    use tymetafuncspec_core::BoundedNat;
    use pattern_tmf::OrVariableZeroOrMore;
    use pattern_tmf::OrVariable;
    use pattern_tmf::NamedPattern;
    use crate::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r as ltsrlalflpfrrr;
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Nat,
    > for ltsrlalflpfrrr::F {
        type Intermediary = OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
    > for ltsrlalflpfrrr::F {
        type Intermediary = OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Nat,
    > for ltsrlalflpfrrr::Left_operand {
        type Intermediary = OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
    > for ltsrlalflpfrrr::Left_operand {
        type Intermediary = OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Nat,
    > for ltsrlalflpfrrr::Right_operand {
        type Intermediary = OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
    > for ltsrlalflpfrrr::Right_operand {
        type Intermediary = OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        Set<
            ltsrlalflpfrrr::Heap,
            OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
        >,
    > for ltsrlalflpfrrr::Sum {
        type Intermediary = OrVariable<
            ltsrlalflpfrrr::Heap,
            Set<
                ltsrlalflpfrrr::Heap,
                OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        OrVariable<
            ltsrlalflpfrrr::Heap,
            Set<
                ltsrlalflpfrrr::Heap,
                OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
            >,
        >,
    > for ltsrlalflpfrrr::Sum {
        type Intermediary = OrVariable<
            ltsrlalflpfrrr::Heap,
            Set<
                ltsrlalflpfrrr::Heap,
                OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
            >,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F>
    for ltsrlalflpfrrr::Nat {
        type Intermediary = IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Plus,
    > for ltsrlalflpfrrr::Nat {
        type Intermediary = IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Sum,
    > for ltsrlalflpfrrr::Nat {
        type Intermediary = ltsrlalflpfrrr::Sum;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        BoundedNat<ltsrlalflpfrrr::Heap>,
    > for ltsrlalflpfrrr::Nat {
        type Intermediary = BoundedNat<ltsrlalflpfrrr::Heap>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F>,
    > for ltsrlalflpfrrr::Nat {
        type Intermediary = IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Plus>,
    > for ltsrlalflpfrrr::Nat {
        type Intermediary = IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        NamedPattern<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F>,
    > for ltsrlalflpfrrr::FileItem {
        type Intermediary = NamedPattern<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        NamedPattern<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
    > for ltsrlalflpfrrr::FileItem {
        type Intermediary = NamedPattern<
            ltsrlalflpfrrr::Heap,
            ltsrlalflpfrrr::Left_operand,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        NamedPattern<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Plus>,
    > for ltsrlalflpfrrr::FileItem {
        type Intermediary = NamedPattern<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Plus>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        NamedPattern<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>,
    > for ltsrlalflpfrrr::FileItem {
        type Intermediary = NamedPattern<
            ltsrlalflpfrrr::Heap,
            ltsrlalflpfrrr::Right_operand,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        NamedPattern<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Sum>,
    > for ltsrlalflpfrrr::FileItem {
        type Intermediary = NamedPattern<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Sum>;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Left_operand,
    > for OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand> {
        type Intermediary = ltsrlalflpfrrr::Left_operand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Nat,
    > for OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand> {
        type Intermediary = ltsrlalflpfrrr::Left_operand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Right_operand,
    > for OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand> {
        type Intermediary = ltsrlalflpfrrr::Right_operand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Nat,
    > for OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand> {
        type Intermediary = ltsrlalflpfrrr::Right_operand;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F>
    for OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat> {
        type Intermediary = ltsrlalflpfrrr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Plus,
    > for OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat> {
        type Intermediary = ltsrlalflpfrrr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Sum,
    > for OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat> {
        type Intermediary = ltsrlalflpfrrr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Nat,
    > for OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat> {
        type Intermediary = ltsrlalflpfrrr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        BoundedNat<ltsrlalflpfrrr::Heap>,
    > for OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat> {
        type Intermediary = ltsrlalflpfrrr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        Set<
            ltsrlalflpfrrr::Heap,
            OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
        >,
    >
    for OrVariable<
        ltsrlalflpfrrr::Heap,
        Set<
            ltsrlalflpfrrr::Heap,
            OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
        >,
    > {
        type Intermediary = Set<
            ltsrlalflpfrrr::Heap,
            OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
        >;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F>
    for OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat> {
        type Intermediary = ltsrlalflpfrrr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Plus,
    > for OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat> {
        type Intermediary = ltsrlalflpfrrr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Sum,
    > for OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat> {
        type Intermediary = ltsrlalflpfrrr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Nat,
    > for OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat> {
        type Intermediary = ltsrlalflpfrrr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        BoundedNat<ltsrlalflpfrrr::Heap>,
    > for OrVariableZeroOrMore<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat> {
        type Intermediary = ltsrlalflpfrrr::Nat;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F>
    for IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F> {
        type Intermediary = ltsrlalflpfrrr::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Nat,
    > for IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F> {
        type Intermediary = ltsrlalflpfrrr::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Nat>,
    > for IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::F> {
        type Intermediary = ltsrlalflpfrrr::F;
    }
    /// @generated by [term_specialized_impl_gen::tuc_impls]
    impl ccf::transitivity::TransitivelyUnitCcf<
        ltsrlalflpfrrr::Heap,
        ltsrlalflpfrrr::Plus,
    > for IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Plus> {
        type Intermediary = ltsrlalflpfrrr::Plus;
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (ltsrlalflpfrrr::Left_operand, (ltsrlalflpfrrr::Right_operand, ())),
    > for ltsrlalflpfrrr::Plus {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (ltsrlalflpfrrr::Left_operand, (ltsrlalflpfrrr::Right_operand, ())),
    > for ltsrlalflpfrrr::Nat {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (ltsrlalflpfrrr::Left_operand, (ltsrlalflpfrrr::Right_operand, ())),
    > for IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Plus> {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (ltsrlalflpfrrr::Left_operand, (ltsrlalflpfrrr::Nat, ())),
    > for ltsrlalflpfrrr::Plus {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (
            ltsrlalflpfrrr::Left_operand,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        ),
    > for ltsrlalflpfrrr::Plus {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (
            ltsrlalflpfrrr::Left_operand,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        ),
    > for ltsrlalflpfrrr::Nat {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (
            ltsrlalflpfrrr::Left_operand,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        ),
    > for IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Plus> {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (ltsrlalflpfrrr::Nat, (ltsrlalflpfrrr::Right_operand, ())),
    > for ltsrlalflpfrrr::Plus {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (ltsrlalflpfrrr::Nat, (ltsrlalflpfrrr::Nat, ())),
    > for ltsrlalflpfrrr::Plus {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (ltsrlalflpfrrr::Right_operand, ()),
        ),
    > for ltsrlalflpfrrr::Plus {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (ltsrlalflpfrrr::Right_operand, ()),
        ),
    > for ltsrlalflpfrrr::Nat {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (ltsrlalflpfrrr::Right_operand, ()),
        ),
    > for IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Plus> {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        ),
    > for ltsrlalflpfrrr::Plus {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        ),
    > for ltsrlalflpfrrr::Nat {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
    /// @generated by [term_specialized_impl_gen::tac_impls]
    impl ccf::transitivity::TransitivelyAllCcf<
        ltsrlalflpfrrr::Heap,
        (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        ),
    > for IdxBox<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Plus> {
        type Intermediary = ltsrlalflpfrrr::Plus;
        type Intermediaries = (
            OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Left_operand>,
            (OrVariable<ltsrlalflpfrrr::Heap, ltsrlalflpfrrr::Right_operand>, ()),
        );
    }
}
/// @generated by [term_specialized_impl_gen::gen_ccf_auto_impls]
pub mod ccf_auto_impls {
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::F
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Left_operand
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Plus
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Right_operand
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Sum
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::OrVariable < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::OrVariable < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Left_operand, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::OrVariable < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Right_operand, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::OrVariable < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        tymetafuncspec_core::Set < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::OrVariableZeroOrMore < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat, >, >, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        tymetafuncspec_core::Set < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::OrVariableZeroOrMore < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat, >, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::OrVariableZeroOrMore < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Nat, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        tymetafuncspec_core::BoundedNat < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        tymetafuncspec_core::IdxBox < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::F, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        tymetafuncspec_core::IdxBox < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Plus, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::NamedPattern < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::F, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::NamedPattern < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Left_operand, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::NamedPattern < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Plus, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::NamedPattern < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Right_operand, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        pattern_tmf::NamedPattern < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Sum, >
    );
    term::auto_impl_ccf!(
        crate ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap,
        file_tmf::File < crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::Heap, crate
        ::l_term_specialized_r_l_autoboxed_l_file_l_pattern_fib_r_r_r::FileItem, >
    );
}
