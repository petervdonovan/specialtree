fn parse<T: crate::extension_of::Any::Nat>(
    input: &str,
) -> Result<(<T as crate::extension_of::LImpl>::LImpl, T), ()> {
    let refbased: crate::data_structure::refbased::Fib =
        serde_yml::from_str(input).map_err(|_| ())?;
    let l = core::default::Default::default();
    let lo = core::default::Default::default();
    let ret = refbased.convert(&mut lo);
    Ok((lo, ret))
}
/// generated by [extensionof_gen::gen]
pub mod extension_of {
    /// generated by [extensionof_gen::limpl_trait]
    pub trait LImpl: core::default::Default {
        type NatLit: crate::extension_of::owned::NatLit<LImpl = Self>;
        type Plus: crate::extension_of::owned::Plus<LImpl = Self>;
        type F: crate::extension_of::owned::F<LImpl = Self>;
        type Nat: crate::extension_of::owned::Nat<LImpl = Self>;
        fn convert<
            LImpl: crate::extension_of::LImpl<Plus = Plus, F = F, Nat = Nat>,
            NatLit,
            Plus: crate::extension_of::owned::Plus<LImpl = LImpl>,
            F: crate::extension_of::owned::F<LImpl = LImpl>,
            Nat: crate::extension_of::owned::Nat<LImpl = LImpl>,
        >(
            &mut self,
            lo: &LImpl,
            from: crate::extension_of::Any<NatLit, Plus, F, Nat>,
        ) -> crate::extension_of::Any<NatLit, Self::Plus, Self::F, Self::Nat> {
            use crate::extension_of::reference::Nat;
            use crate::extension_of::reference::Plus;
            use crate::extension_of::reference::F;
            match from {
                crate::extension_of::Any::NatLit(nat_lit) => {
                    crate::extension_of::Any::NatLit(nat_lit)
                }
                crate::extension_of::Any::Plus(p) => {
                    crate::extension_of::Any::Plus(p.get_ref(lo).convert(lo, self))
                }
                crate::extension_of::Any::F(p) => {
                    crate::extension_of::Any::F(p.get_ref(lo).convert(lo, self))
                }
                crate::extension_of::Any::Nat(s) => {
                    crate::extension_of::Any::Nat(s.get_ref(lo).convert(lo, self))
                }
            }
        }
    }
    /// generated by [extensionof_gen::any_type]
    pub enum Any<
        NatLit,
        Plus: crate::extension_of::owned::Plus,
        F: crate::extension_of::owned::F,
        Nat: crate::extension_of::owned::Nat,
    > {
        NatLit(NatLit),
        Plus(Plus),
        F(F),
        Nat(Nat),
    }
    pub trait Projection<LImpl, const N: u8> {
        type To;
        fn project(self, l: &LImpl) -> Self::To;
    }
    pub trait ExtensionOf {
        type Any;
        fn take_reduct<L: ExtensionOf>(&self, term: &Self::Any) -> (L, L::Any);
    }
    /// generated by [extensionof_gen::owned::gen]
    pub mod owned {
        pub trait NatLit: From<u64> {
            type LImpl: crate::extension_of::LImpl;
        }
        /// generated by [extensionof_gen::owned::prods]
        pub trait Plus {
            type LImpl: crate::extension_of::LImpl;
            fn new(
                l: &mut Self::LImpl,
                args: (
                    <Self::LImpl as crate::extension_of::LImpl>::Nat,
                    <Self::LImpl as crate::extension_of::LImpl>::Nat,
                ),
            ) -> Self;
            fn get_ref<'a, 'b: 'a>(
                &'a self,
                l: &'b Self::LImpl,
            ) -> impl crate::extension_of::reference::Plus<'a, LImpl = Self::LImpl>;
            fn get_mut<'a, 'b: 'a>(
                &'a mut self,
                l: &'b mut Self::LImpl,
            ) -> impl crate::extension_of::mut_reference::Plus<'a, LImpl = Self::LImpl>;
        }
        /// generated by [extensionof_gen::owned::prods]
        pub trait F {
            type LImpl: crate::extension_of::LImpl;
            fn new(
                l: &mut Self::LImpl,
                args: (<Self::LImpl as crate::extension_of::LImpl>::Nat,),
            ) -> Self;
            fn get_ref<'a, 'b: 'a>(
                &'a self,
                l: &'b Self::LImpl,
            ) -> impl crate::extension_of::reference::F<'a, LImpl = Self::LImpl>;
            fn get_mut<'a, 'b: 'a>(
                &'a mut self,
                l: &'b mut Self::LImpl,
            ) -> impl crate::extension_of::mut_reference::F<'a, LImpl = Self::LImpl>;
        }
        /// generated by [extensionof_gen::owned::sums]
        pub trait Nat {
            type LImpl: crate::extension_of::LImpl;
            fn nat_lit(
                l: &mut Self::LImpl,
                from: <Self::LImpl as crate::extension_of::LImpl>::NatLit,
            ) -> Self;
            fn f(l: &mut Self::LImpl, from: <Self::LImpl as crate::extension_of::LImpl>::F)
                -> Self;
            fn plus(
                l: &mut Self::LImpl,
                from: <Self::LImpl as crate::extension_of::LImpl>::Plus,
            ) -> Self;
            fn get_ref(
                &self,
                l: &Self::LImpl,
            ) -> impl crate::extension_of::reference::Nat<'_, LImpl = Self::LImpl>;
            fn get_mut(
                &mut self,
                l: &mut Self::LImpl,
            ) -> impl crate::extension_of::mut_reference::Nat<'_, LImpl = Self::LImpl>;
        }
    }
    /// generated by [extensionof_gen::reference::gen]
    pub mod reference {
        pub trait NatLit<'a>: Into<u64> {
            type LImpl: crate::extension_of::LImpl;
            fn is_eq<'b: 'a>(self, l: &'b Self::LImpl, other: Self) -> bool;
            fn convert<'b: 'a, 'c, O: crate::extension_of::owned::NatLit>(
                self,
                _l: &'b Self::LImpl,
                _lo: &'c mut O::LImpl,
            ) -> O {
                let intermediate: u64 = self.into();
                O::from(intermediate)
            }
        }
        /// generated by [extensionof_gen::reference::prods]
        pub trait Plus<'a>:
            Copy
            + 'a
            + crate::extension_of::Projection<Self::LImpl, 0, To = Self::T0>
            + crate::extension_of::Projection<Self::LImpl, 1, To = Self::T1>
        where
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
        {
            type LImpl: crate::extension_of::LImpl;
            type T0: crate::extension_of::reference::Nat<'a, LImpl = Self::LImpl>;
            type T1: crate::extension_of::reference::Nat<'a, LImpl = Self::LImpl>;
            fn is_eq<'b: 'a>(self, l: &'b Self::LImpl, other: Self) -> bool;
            fn convert<'b: 'a, 'c, O: crate::extension_of::owned::Plus>(
                self,
                l: &'b Self::LImpl,
                lo: &'c mut O::LImpl,
            ) -> O {
                let args = (
                    <Self as crate::extension_of::Projection<Self::LImpl, 0>>::project(self, l)
                        .convert(l, lo),
                    <Self as crate::extension_of::Projection<Self::LImpl, 1>>::project(self, l)
                        .convert(l, lo),
                );
                O::new(lo, args)
            }
        }
        /// generated by [extensionof_gen::reference::prods]
        pub trait F<'a>:
            Copy + 'a + crate::extension_of::Projection<Self::LImpl, 0, To = Self::T0>
        where
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
        {
            type LImpl: crate::extension_of::LImpl;
            type T0: crate::extension_of::reference::Nat<'a, LImpl = Self::LImpl>;
            fn is_eq<'b: 'a>(self, l: &'b Self::LImpl, other: Self) -> bool;
            fn convert<'b: 'a, 'c, O: crate::extension_of::owned::F>(
                self,
                l: &'b Self::LImpl,
                lo: &'c mut O::LImpl,
            ) -> O {
                let args = (
                    <Self as crate::extension_of::Projection<Self::LImpl, 0>>::project(self, l)
                        .convert(l, lo),
                );
                O::new(lo, args)
            }
        }
        /// generated by [extensionof_gen::reference::sums]
        pub trait Nat<'a>: Copy + 'a {
            type LImpl: crate::extension_of::LImpl;
            type NatLit: crate::extension_of::reference::NatLit<'a, LImpl = Self::LImpl>;
            type F: crate::extension_of::reference::F<'a, LImpl = Self::LImpl>;
            type Plus: crate::extension_of::reference::Plus<'a, LImpl = Self::LImpl>;
            fn nat_lit<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::NatLit>;
            fn f<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::F>;
            fn plus<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::Plus>;
            fn is_eq<'b: 'a>(self, l: &'b Self::LImpl, other: Self) -> bool;
            fn convert<'b: 'a, 'c, O: crate::extension_of::owned::Nat>(
                self,
                l: &'b Self::LImpl,
                lo: &'c mut O::LImpl,
            ) -> O {
                if let Some(x) = self.nat_lit(l) {
                    let arg = x.convert(l, lo);
                    return O::nat_lit(lo, arg);
                }
                if let Some(x) = self.f(l) {
                    let arg = x.convert(l, lo);
                    return O::f(lo, arg);
                }
                if let Some(x) = self.plus(l) {
                    let arg = x.convert(l, lo);
                    return O::plus(lo, arg);
                }
                panic!("unreachable");
            }
        }
    }
    pub mod mut_reference {
        pub trait NatLit<'a> {}
        /// generated by [extensionof_gen::mut_reference::prods]
        pub trait Plus<'a>:
            crate::extension_of::Projection<Self::LImpl, 0, To = Self::T0>
            + crate::extension_of::Projection<Self::LImpl, 1, To = Self::T1>
        where
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
        {
            type LImpl: crate::extension_of::LImpl;
            type T0: crate::extension_of::mut_reference::Nat<'a>;
            type T1: crate::extension_of::mut_reference::Nat<'a>;
        }
        /// generated by [extensionof_gen::mut_reference::prods]
        pub trait F<'a>: crate::extension_of::Projection<Self::LImpl, 0, To = Self::T0>
        where
            <Self::LImpl as crate::extension_of::LImpl>::Nat: 'a,
        {
            type LImpl: crate::extension_of::LImpl;
            type T0: crate::extension_of::mut_reference::Nat<'a>;
        }
        /// generated by [extensionof_gen::mut_reference::sums]
        pub trait Nat<'a>: 'a {
            type LImpl: crate::extension_of::LImpl;
            type Owned: crate::extension_of::owned::Nat;
            type NatLit: crate::extension_of::mut_reference::NatLit<'a>;
            type F: crate::extension_of::mut_reference::F<'a>;
            type Plus: crate::extension_of::mut_reference::Plus<'a>;
            fn nat_lit<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::NatLit>;
            fn f<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::F>;
            fn plus<'b: 'a>(self, l: &'b Self::LImpl) -> Option<Self::Plus>;
            fn set<'b: 'a>(self, l: &'b mut Self::LImpl, value: Self::Owned);
        }
    }
}
pub mod data_structure {
    /// generated by [langdatastructure_gen::refbased::gen]
    pub mod refbased {
        /// generated by [langdatastructure_gen::refbased::gen_limpl]
        #[derive(Default)]
        pub struct Fib;
        pub type NatLit = u64;
        #[derive(serde::Serialize, serde::Deserialize)]
        pub struct Plus(
            pub crate::data_structure::refbased::Nat,
            pub crate::data_structure::refbased::Nat,
        );
        #[derive(serde::Serialize, serde::Deserialize)]
        pub struct F(pub crate::data_structure::refbased::Nat);
        #[derive(serde::Serialize, serde::Deserialize)]
        pub enum Nat {
            NatLit(u64),
            F(Box<crate::data_structure::refbased::F>),
            Plus(Box<crate::data_structure::refbased::Plus>),
        }
    }
}
